{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_wnative",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_keeper",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_plexusFeeRecipient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_plexusFeeConfig",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "NotManager",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "StratVersionExists",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "GlobalPause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "strategyName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "InstanceUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "strategyName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "NewStrategyAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "strategyName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "proxy",
						"type": "address"
					}
				],
				"name": "ProxyCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "rebalancer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isRebalancer",
						"type": "bool"
					}
				],
				"name": "RebalancerChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "keeper",
						"type": "address"
					}
				],
				"name": "SetKeeper",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "plexusFeeConfig",
						"type": "address"
					}
				],
				"name": "SetPlexusFeeConfig",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "plexusFeeRecipient",
						"type": "address"
					}
				],
				"name": "SetPlexusFeeRecipient",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "strategyName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "StratPause",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_rebalancer",
						"type": "address"
					}
				],
				"name": "addRebalancer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_implementation",
						"type": "address"
					}
				],
				"name": "addStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					}
				],
				"name": "createStrategy",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					}
				],
				"name": "getImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getStrategyTypes",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "globalPause",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "instances",
				"outputs": [
					{
						"internalType": "contract UpgradeableBeacon",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "keeper",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseAllStrats",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					}
				],
				"name": "pauseStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "plexusFeeConfig",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "plexusFeeRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "rebalancers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_rebalancer",
						"type": "address"
					}
				],
				"name": "removeRebalancer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_keeper",
						"type": "address"
					}
				],
				"name": "setKeeper",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_plexusFeeConfig",
						"type": "address"
					}
				],
				"name": "setPlexusFeeConfig",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_plexusFeeRecipient",
						"type": "address"
					}
				],
				"name": "setPlexusFeeRecipient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "strategyPause",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "strategyTypes",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpauseAllStrats",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					}
				],
				"name": "unpauseStrategy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_strategyName",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wnative",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addRebalancer(address)": {
					"params": {
						"_rebalancer": "The rebalancer address"
					}
				},
				"addStrategy(string,address)": {
					"params": {
						"_implementation": "The implementation address",
						"_strategyName": "The name of the strategy"
					}
				},
				"createStrategy(string)": {
					"params": {
						"_strategyName": "The name of the strategy"
					},
					"returns": {
						"_0": "A reference to the new proxied Plexus Strategy"
					}
				},
				"getImplementation(string)": {
					"params": {
						"_strategyName": "The name of the strategy"
					},
					"returns": {
						"_0": "The implementation address"
					}
				},
				"getStrategyTypes()": {
					"returns": {
						"_0": "The array of deployed strategies"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeRebalancer(address)": {
					"params": {
						"_rebalancer": "The rebalancer address"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setKeeper(address)": {
					"params": {
						"_keeper": "The new keeper address"
					}
				},
				"setPlexusFeeConfig(address)": {
					"params": {
						"_plexusFeeConfig": "The new plexus fee config address"
					}
				},
				"setPlexusFeeRecipient(address)": {
					"params": {
						"_plexusFeeRecipient": "The new plexus fee recipient address"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgradeTo(string,address)": {
					"params": {
						"_newImplementation": "The new implementation address",
						"_strategyName": "The name of the strategy"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addRebalancer(address)": {
					"notice": "Adds a rebalancer callable by the owner"
				},
				"addStrategy(string,address)": {
					"notice": "Adds a new strategy to the factory"
				},
				"constructor": {
					"notice": "Constructor initializes the keeper address"
				},
				"createStrategy(string)": {
					"notice": "Creates a new Plexus Strategy as a proxy of the template instance"
				},
				"getImplementation(string)": {
					"notice": "Gets the implementation of a strategy"
				},
				"getStrategyTypes()": {
					"notice": "Gets the array of deployed strategies"
				},
				"globalPause()": {
					"notice": "Global pause state for all strategies that use this"
				},
				"instances(string)": {
					"notice": "instance mapping to strategy name with version."
				},
				"keeper()": {
					"notice": "The address of the keeper"
				},
				"pauseAllStrats()": {
					"notice": "Pauses all strategies"
				},
				"plexusFeeConfig()": {
					"notice": "The plexus fee config"
				},
				"plexusFeeRecipient()": {
					"notice": "The plexus fee recipient"
				},
				"rebalancers(address)": {
					"notice": "approved rebalancer mapping"
				},
				"removeRebalancer(address)": {
					"notice": "Removes a rebalancer callable by a manager"
				},
				"setKeeper(address)": {
					"notice": "set the keeper address"
				},
				"setPlexusFeeConfig(address)": {
					"notice": "set the plexus fee config address"
				},
				"setPlexusFeeRecipient(address)": {
					"notice": "set the plexus fee recipient address"
				},
				"strategyPause(string)": {
					"notice": "Pause state by strategyName"
				},
				"strategyTypes(uint256)": {
					"notice": "deployed strategy types"
				},
				"unpauseAllStrats()": {
					"notice": "Unpauses all strategies"
				},
				"upgradeTo(string,address)": {
					"notice": "Upgrades the implementation of a strategy"
				},
				"wnative()": {
					"notice": "The address of the wnative token"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/infra/StrategyFactory.sol": "StrategyFactory"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1967.sol": {
			"keccak256": "0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263",
				"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff",
			"license": "MIT",
			"urls": [
				"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688",
				"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
			"keccak256": "0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2",
			"license": "MIT",
			"urls": [
				"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2",
				"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82"
			]
		},
		"@openzeppelin/contracts/proxy/Proxy.sol": {
			"keccak256": "0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27",
			"license": "MIT",
			"urls": [
				"bzz-raw://8831721b6f4cc26534d190f9f1631c3f59c9ff38efdd911f85e0882b8e360472",
				"dweb:/ipfs/QmQZnLErZNStirSQ13ZNWQgvEYUtGE5tXYwn4QUPaVUfPN"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
			"keccak256": "0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e18633c182e445895e5a70f9e79f2558d0f6eac86767fd1d90552177df2955c",
				"dweb:/ipfs/QmagUFUJbiNGRGGajg9CF5LPuopc44XSCtcCaYvQasBuX9"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
			"license": "MIT",
			"urls": [
				"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
				"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
			"keccak256": "0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://362f12aebd1022d643235e6a7fa6ccfb38c13f3a0d1b006d5d1aea51af4bb852",
				"dweb:/ipfs/QmSUQ7pM4UnBawMfP2Di8EqawxaoU195DgsSLxHejvSpPz"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
			"license": "MIT",
			"urls": [
				"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
				"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899",
			"license": "MIT",
			"urls": [
				"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da",
				"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"
			]
		},
		"contracts/infra/StrategyFactory.sol": {
			"keccak256": "0x5fe8682e71badfa9dd3593fa84c9004b2671f16f7710c467af44e7ebd646c519",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c4f8d7d866810b1fb92e5bd8f4ca69155b86be1790dc6678c53cc9c5855640d",
				"dweb:/ipfs/QmfHRRGQGbye9oSQ7TS2Ak9h6ERcZbQ2GnRrnNjjYgGHQy"
			]
		}
	},
	"version": 1
}