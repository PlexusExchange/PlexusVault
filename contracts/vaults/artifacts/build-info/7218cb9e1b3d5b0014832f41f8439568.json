{
	"id": "7218cb9e1b3d5b0014832f41f8439568",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/vaults/PlexusVaultNative.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/plexus/IStrategy.sol\";\nimport \"../interfaces/common/IWrappedNative.sol\";\n\n/**\n * @dev Implementation of a vault to deposit funds for yield optimizing.\n * This is the contract that receives funds and that users interface with.\n * The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\n */\ncontract PlexusVaultNative is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    struct StratCandidate {\n        address implementation;\n        uint proposedTime;\n    }\n\n    // The last proposed strategy to switch to.\n    StratCandidate public stratCandidate;\n    // The strategy currently in use by the vault.\n    IStrategy public strategy;\n    // The minimum time it has to pass before a strat candidate can be approved.\n    uint256 public approvalDelay;\n\n    event NewStratCandidate(address implementation);\n    event UpgradeStrat(address implementation);\n\n    /**\n     * @dev Sets the value of {token} to the token that the vault will\n     * hold as underlying value. It initializes the vault's own 'plxv' token\n     * This token is minted when someone does a deposit. It is burned in order\n     * to withdraw the corresponding portion of the underlying assets.\n     * @param _strategy the address of the strategy.\n     * @param _name the name of the vault token.\n     * @param _symbol the symbol of the vault token.\n     * @param _approvalDelay the delay before a new strat can be approved.\n     */\n    function initialize(IStrategy _strategy, string memory _name, string memory _symbol, uint256 _approvalDelay) public initializer {\n        __ERC20_init(_name, _symbol);\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        strategy = _strategy;\n        approvalDelay = _approvalDelay;\n    }\n\n    function want() public view returns (IERC20Upgradeable) {\n        return IERC20Upgradeable(strategy.want());\n    }\n\n    /**\n     * @dev It calculates the total underlying value of {token} held by the system.\n     * It takes into account the vault contract balance, the strategy contract balance\n     *  and the balance deployed in other contracts as part of the strategy.\n     */\n    function balance() public view returns (uint) {\n        return want().balanceOf(address(this)) + IStrategy(strategy).balanceOf();\n    }\n\n    /**\n     * @dev Custom logic in here for how much the vault allows to be borrowed.\n     * We return 100% of tokens for now. Under certain conditions we might\n     * want to keep some of the system funds at hand in the vault, instead\n     * of putting them to work.\n     */\n    function available() public view returns (uint256) {\n        return want().balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\n     */\n    function getPricePerFullShare() public view returns (uint256) {\n        return totalSupply() == 0 ? 1e18 : (balance() * 1e18) / totalSupply();\n    }\n\n    /**\n     * @dev A helper function to call deposit() with all the sender's funds.\n     */\n    function depositAll() external {\n        deposit(want().balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev The entrypoint of funds into the system. People deposit with this function\n     * into the vault. The vault is then in charge of sending funds into the strategy.\n     */\n    function deposit(uint _amount) public nonReentrant {\n        strategy.beforeDeposit();\n\n        uint256 _pool = balance();\n        want().safeTransferFrom(msg.sender, address(this), _amount);\n        earn();\n        uint256 _after = balance();\n        _amount = _after - _pool; // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / _pool;\n        }\n        _mint(msg.sender, shares);\n    }\n\n    /**\n     * @dev Alterwnative entry point into the strat. You can send wnative,\n     * and the vault will wrap them before sending them into the strat.\n     */\n    function depositNative() public payable nonReentrant {\n        strategy.beforeDeposit();\n\n        uint256 _pool = balance();\n        uint256 _amount = msg.value;\n        IWrappedNative(address(want())).deposit{value: _amount}();\n        earn();\n        uint256 _after = balance();\n        _amount = _after - _pool; // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / _pool;\n        }\n        _mint(msg.sender, shares);\n    }\n\n    /**\n     * @dev Function to send funds into the strategy and put them to work. It's primarily called\n     * by the vault's deposit() function.\n     */\n    function earn() public {\n        uint _bal = available();\n        want().safeTransfer(address(strategy), _bal);\n        strategy.deposit();\n    }\n\n    /**\n     * @dev A helper function to call withdraw() with all the sender's funds.\n     */\n    function withdrawAll() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Alterwnative helper function to withdraw all funds in wnative form.\n     */\n    function withdrawAllNative() external {\n        withdrawNative(balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Function to exit the system. The vault will withdraw the required tokens\n     * from the strategy and pay up the token holder. A proportional number of IOU\n     * tokens are burned in the process.\n     */\n    function withdraw(uint256 _shares) public {\n        uint256 r = (balance() * _shares) / totalSupply();\n        _burn(msg.sender, _shares);\n\n        uint b = want().balanceOf(address(this));\n        if (b < r) {\n            uint _withdraw = r - b;\n            strategy.withdraw(_withdraw);\n            uint _after = want().balanceOf(address(this));\n            uint _diff = _after - b;\n            if (_diff < _withdraw) {\n                r = b + _diff;\n            }\n        }\n\n        want().safeTransfer(msg.sender, r);\n    }\n\n    /**\n     * @dev Alterwnative function to exit the system. Works just like 'withdraw(uint256)',\n     * but the funds arrive in wnative.\n     */\n    function withdrawNative(uint256 _shares) public {\n        uint256 r = (balance() * _shares) / totalSupply();\n        _burn(msg.sender, _shares);\n\n        uint b = want().balanceOf(address(this));\n        if (b < r) {\n            uint _withdraw = r - b;\n            strategy.withdraw(_withdraw);\n            uint _after = want().balanceOf(address(this));\n            uint _diff = _after - b;\n            if (_diff < _withdraw) {\n                r = b + _diff;\n            }\n        }\n\n        IWrappedNative(address(want())).withdraw(r);\n        payable(msg.sender).transfer(r);\n    }\n\n    /**\n     * @dev Sets the candidate for the new strat to use with this vault.\n     * @param _implementation The address of the candidate strategy.\n     */\n    function proposeStrat(address _implementation) public onlyOwner {\n        require(address(this) == IStrategy(_implementation).vault(), \"Proposal not valid for this Vault\");\n        require(want() == IStrategy(_implementation).want(), \"Different want\");\n        stratCandidate = StratCandidate({implementation: _implementation, proposedTime: block.timestamp});\n\n        emit NewStratCandidate(_implementation);\n    }\n\n    /**\n     * @dev It switches the active strat for the strat candidate. After upgrading, the\n     * candidate implementation is set to the 0x00 address, and proposedTime to a time\n     * happening in +100 years for safety.\n     */\n\n    function upgradeStrat() public onlyOwner {\n        require(stratCandidate.implementation != address(0), \"There is no candidate\");\n        require(stratCandidate.proposedTime + approvalDelay < block.timestamp, \"Delay has not passed\");\n\n        emit UpgradeStrat(stratCandidate.implementation);\n\n        strategy.retireStrat();\n        strategy = IStrategy(stratCandidate.implementation);\n        stratCandidate.implementation = address(0);\n        stratCandidate.proposedTime = 5000000000;\n\n        earn();\n    }\n\n    /**\n     * @dev Rescues random funds stuck that the strat can't handle.\n     * @param _token address of the token to rescue.\n     */\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\n        require(_token != address(want()), \"!token\");\n\n        uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this));\n        IERC20Upgradeable(_token).safeTransfer(msg.sender, amount);\n    }\n\n    receive() external payable {}\n}\n"
			},
			"contracts/interfaces/common/IWrappedNative.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.9.0;\n\ninterface IWrappedNative {\n    function deposit() external payable;\n    function withdraw(uint256 wad) external;\n}\n"
			},
			"contracts/interfaces/plexus/IStrategy.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IStrategy {\n    function vault() external view returns (address);\n    function want() external view returns (IERC20Upgradeable);\n    function beforeDeposit() external;\n    function deposit() external;\n    function withdraw(uint256) external;\n    function balanceOf() external view returns (uint256);\n    function balanceOfWant() external view returns (uint256);\n    function balanceOfPool() external view returns (uint256);\n    function harvest() external;\n    function retireStrat() external;\n    function panic() external;\n    function pause() external;\n    function unpause() external;\n    function paused() external view returns (bool);\n    function swapper() external view returns (address);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e89863421b4014b96a4b62be76eb3b9f0a8afe9684664a6f389124c0964bfe5c\",\"dweb:/ipfs/Qmbk7xr1irpDuU1WdxXgxELBXxs61rHhCgod7heVcvFx16\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b06267c5f80bad727af3e48b1382333d591dad51376399ef2f6b0ee6d58bf95\",\"dweb:/ipfs/QmdU5La1agcQvghnfMpWZGDPz2TUDTCxUwTLKmuMRXBpAx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1894,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 11,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 131,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"ReentrancyGuardUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d27f4b23c2dee42394aebaf42bf238285230f472dfd3282a39c3f000ec28214f\",\"dweb:/ipfs/QmQa3DnvccwdWJeWrjgXPnFMTWbzWQWR39hVqC7eEwo2PC\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 316,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 385,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "2",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1632:13493  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1632:13493  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1459   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1438:1460   */\n      iszero\n        /* \"#utility.yul\":1420:1461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1408:1410   */\n      0x20\n        /* \"#utility.yul\":1393:1411   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1375:1467   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":5015:5040   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3462:3553  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3544:3546  18 */\n      0x12\n        /* \"#utility.yul\":5193:5229   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5181:5183   */\n      0x20\n        /* \"#utility.yul\":5166:5184   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3462:3553  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":5148:5235   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6212:6446  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3777:3902  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3851:3858  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3886  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3777:3902  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2727:2829  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6933:7360  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4287  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2570:2583  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2602:2607  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2595:2607  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4885:4889  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4971  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4955:4962  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4964:4970  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4947  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4971  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4988:4992  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5658:5662  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5752  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5730:5734  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5745:5751  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5729  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5752  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5789  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5772:5776  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5778:5780  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5782:5788  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5771  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5789  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5806:5810  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6212:6446  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6300:6304  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6418  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6370:6377  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6407:6417  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6404  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6370:6377  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6388  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6404  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6417  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6362  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6418  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2727:2829  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2783:2796  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2815:2822  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2808:2822  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6933:7360  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7026:7030  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7026:7030  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7132  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7124:7131  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7116  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7132  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7080:7132  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7170:7185  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7150:7166  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7150:7185  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4647:4668   */\n      mstore\n        /* \"#utility.yul\":4704:4706   */\n      0x25\n        /* \"#utility.yul\":4684:4702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4677:4707   */\n      mstore\n        /* \"#utility.yul\":4743:4777   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4723:4741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4716:4778   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4794:4812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4787:4822   */\n      mstore\n        /* \"#utility.yul\":4839:4858   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7321  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7270:7275  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7277:7284  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7305:7320  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7286:7302  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7286:7320  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7269  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7321  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4287  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4177:4181  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4259  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4248:4250  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4252:4258  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4240  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4259  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4434:4441  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4471  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4487  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10815:11155  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10916:10935  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4260:4262   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4242:4263   */\n      mstore\n        /* \"#utility.yul\":4299:4301   */\n      0x24\n        /* \"#utility.yul\":4279:4297   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4272:4302   */\n      mstore\n        /* \"#utility.yul\":4338:4372   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4318:4336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4311:4373   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4389:4407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4382:4416   */\n      mstore\n        /* \"#utility.yul\":4433:4452   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4232:4458   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10994:11015  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2686:2688   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2668:2689   */\n      mstore\n        /* \"#utility.yul\":2725:2727   */\n      0x22\n        /* \"#utility.yul\":2705:2723   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2698:2728   */\n      mstore\n        /* \"#utility.yul\":2764:2798   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2737:2799   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2815:2833   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2808:2840   */\n      mstore\n        /* \"#utility.yul\":2857:2876   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2658:2882   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11083  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11076  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11083  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11092  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11101  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":5015:5040   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10815:11155  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11436:11847  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11536:11560  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11588  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11573:11578  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11580:11587  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11572  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11588  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11536:11588  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11602:11618  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11602:11639  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11598:11841  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11683:11689  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11679  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11689  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3089:3091   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3071:3092   */\n      mstore\n        /* \"#utility.yul\":3128:3130   */\n      0x1d\n        /* \"#utility.yul\":3108:3126   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3101:3131   */\n      mstore\n        /* \"#utility.yul\":3167:3198   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3147:3165   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3140:3199   */\n      mstore\n        /* \"#utility.yul\":3216:3234   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":3061:3240   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11816  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11774:11779  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11781:11788  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11809:11815  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11790:11806  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11790:11815  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11773  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11816  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11436:11847  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7814:8602  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7910:7928  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3854:3856   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3836:3857   */\n      mstore\n        /* \"#utility.yul\":3893:3895   */\n      0x25\n        /* \"#utility.yul\":3873:3891   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3866:3896   */\n      mstore\n        /* \"#utility.yul\":3932:3966   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3912:3930   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3905:3967   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3983:4001   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3976:4011   */\n      mstore\n        /* \"#utility.yul\":4028:4047   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3826:4053   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7988:8004  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2282:2284   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2264:2285   */\n      mstore\n        /* \"#utility.yul\":2321:2323   */\n      0x23\n        /* \"#utility.yul\":2301:2319   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2294:2324   */\n      mstore\n        /* \"#utility.yul\":2360:2394   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2340:2358   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2333:2395   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2411:2429   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2404:2437   */\n      mstore\n        /* \"#utility.yul\":2454:2473   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2254:2479   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8104:8123  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8135  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8159:8180  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3447:3449   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3429:3450   */\n      mstore\n        /* \"#utility.yul\":3486:3488   */\n      0x26\n        /* \"#utility.yul\":3466:3484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3459:3489   */\n      mstore\n        /* \"#utility.yul\":3525:3559   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3505:3523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3498:3560   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3576:3594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3569:3605   */\n      mstore\n        /* \"#utility.yul\":3622:3641   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":3419:3647   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8272  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8266  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8272  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8295  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8295  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8472:8485  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8472:8495  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8521:8547  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8289:8295  amount */\n      dup7\n        /* \"#utility.yul\":5015:5040   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n      swap1\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8521:8547  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8558:8595  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12431:12522  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {} */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_141:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_143\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_143:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_44:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_145:\n        /* \"#utility.yul\":353:382   */\n      tag_146\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_141\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":343:382   */\n      swap4\n        /* \"#utility.yul\":262:388   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:663   */\n    tag_60:\n        /* \"#utility.yul\":461:467   */\n      0x00\n        /* \"#utility.yul\":469:475   */\n      dup1\n        /* \"#utility.yul\":522:524   */\n      0x40\n        /* \"#utility.yul\":510:519   */\n      dup4\n        /* \"#utility.yul\":501:508   */\n      dup6\n        /* \"#utility.yul\":497:520   */\n      sub\n        /* \"#utility.yul\":493:525   */\n      slt\n        /* \"#utility.yul\":490:492   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":543:549   */\n      dup1\n        /* \"#utility.yul\":535:541   */\n      dup2\n        /* \"#utility.yul\":528:550   */\n      revert\n        /* \"#utility.yul\":490:492   */\n    tag_148:\n        /* \"#utility.yul\":571:600   */\n      tag_149\n        /* \"#utility.yul\":590:599   */\n      dup4\n        /* \"#utility.yul\":571:600   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":561:600   */\n      swap2\n      pop\n        /* \"#utility.yul\":619:657   */\n      tag_150\n        /* \"#utility.yul\":653:655   */\n      0x20\n        /* \"#utility.yul\":642:651   */\n      dup5\n        /* \"#utility.yul\":638:656   */\n      add\n        /* \"#utility.yul\":619:657   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":609:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":480:663   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:1006   */\n    tag_31:\n        /* \"#utility.yul\":745:751   */\n      0x00\n        /* \"#utility.yul\":753:759   */\n      dup1\n        /* \"#utility.yul\":761:767   */\n      0x00\n        /* \"#utility.yul\":814:816   */\n      0x60\n        /* \"#utility.yul\":802:811   */\n      dup5\n        /* \"#utility.yul\":793:800   */\n      dup7\n        /* \"#utility.yul\":789:812   */\n      sub\n        /* \"#utility.yul\":785:817   */\n      slt\n        /* \"#utility.yul\":782:784   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":835:841   */\n      dup1\n        /* \"#utility.yul\":827:833   */\n      dup2\n        /* \"#utility.yul\":820:842   */\n      revert\n        /* \"#utility.yul\":782:784   */\n    tag_152:\n        /* \"#utility.yul\":863:892   */\n      tag_153\n        /* \"#utility.yul\":882:891   */\n      dup5\n        /* \"#utility.yul\":863:892   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":853:892   */\n      swap3\n      pop\n        /* \"#utility.yul\":911:949   */\n      tag_154\n        /* \"#utility.yul\":945:947   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup6\n        /* \"#utility.yul\":930:948   */\n      add\n        /* \"#utility.yul\":911:949   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":901:949   */\n      swap2\n      pop\n        /* \"#utility.yul\":996:998   */\n      0x40\n        /* \"#utility.yul\":985:994   */\n      dup5\n        /* \"#utility.yul\":981:999   */\n      add\n        /* \"#utility.yul\":968:1000   */\n      calldataload\n        /* \"#utility.yul\":958:1000   */\n      swap1\n      pop\n        /* \"#utility.yul\":772:1006   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1011:1275   */\n    tag_21:\n        /* \"#utility.yul\":1079:1085   */\n      0x00\n        /* \"#utility.yul\":1087:1093   */\n      dup1\n        /* \"#utility.yul\":1140:1142   */\n      0x40\n        /* \"#utility.yul\":1128:1137   */\n      dup4\n        /* \"#utility.yul\":1119:1126   */\n      dup6\n        /* \"#utility.yul\":1115:1138   */\n      sub\n        /* \"#utility.yul\":1111:1143   */\n      slt\n        /* \"#utility.yul\":1108:1110   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1161:1167   */\n      dup2\n        /* \"#utility.yul\":1153:1159   */\n      dup3\n        /* \"#utility.yul\":1146:1168   */\n      revert\n        /* \"#utility.yul\":1108:1110   */\n    tag_156:\n        /* \"#utility.yul\":1189:1218   */\n      tag_157\n        /* \"#utility.yul\":1208:1217   */\n      dup4\n        /* \"#utility.yul\":1189:1218   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1179:1218   */\n      swap5\n        /* \"#utility.yul\":1265:1267   */\n      0x20\n        /* \"#utility.yul\":1250:1268   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1237:1269   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1098:1275   */\n      jump\t// out\n        /* \"#utility.yul\":1472:2075   */\n    tag_18:\n        /* \"#utility.yul\":1584:1588   */\n      0x00\n        /* \"#utility.yul\":1613:1615   */\n      0x20\n        /* \"#utility.yul\":1642:1644   */\n      dup1\n        /* \"#utility.yul\":1631:1640   */\n      dup4\n        /* \"#utility.yul\":1624:1645   */\n      mstore\n        /* \"#utility.yul\":1674:1680   */\n      dup4\n        /* \"#utility.yul\":1668:1681   */\n      mload\n        /* \"#utility.yul\":1717:1723   */\n      dup1\n        /* \"#utility.yul\":1712:1714   */\n      dup3\n        /* \"#utility.yul\":1701:1710   */\n      dup6\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"#utility.yul\":1690:1724   */\n      mstore\n        /* \"#utility.yul\":1742:1746   */\n      dup3\n        /* \"#utility.yul\":1755:1895   */\n    tag_160:\n        /* \"#utility.yul\":1769:1775   */\n      dup2\n        /* \"#utility.yul\":1766:1767   */\n      dup2\n        /* \"#utility.yul\":1763:1776   */\n      lt\n        /* \"#utility.yul\":1755:1895   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1864:1878   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1860:1883   */\n      dup4\n      add\n        /* \"#utility.yul\":1854:1884   */\n      mload\n        /* \"#utility.yul\":1830:1847   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1849:1851   */\n      0x40\n        /* \"#utility.yul\":1826:1852   */\n      add\n        /* \"#utility.yul\":1819:1885   */\n      mstore\n        /* \"#utility.yul\":1784:1794   */\n      dup3\n      add\n        /* \"#utility.yul\":1755:1895   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1913:1919   */\n      dup2\n        /* \"#utility.yul\":1910:1911   */\n      dup2\n        /* \"#utility.yul\":1907:1920   */\n      gt\n        /* \"#utility.yul\":1904:1906   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1983:1987   */\n      dup4\n        /* \"#utility.yul\":1978:1980   */\n      0x40\n        /* \"#utility.yul\":1969:1975   */\n      dup4\n        /* \"#utility.yul\":1958:1967   */\n      dup8\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1950:1981   */\n      add\n        /* \"#utility.yul\":1943:1988   */\n      mstore\n        /* \"#utility.yul\":1904:1906   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2059:2061   */\n      0x1f\n        /* \"#utility.yul\":2038:2053   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2034:2063   */\n      and\n        /* \"#utility.yul\":2019:2064   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2066:2068   */\n      0x40\n        /* \"#utility.yul\":2015:2069   */\n      add\n      swap4\n        /* \"#utility.yul\":1593:2075   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5240:5469   */\n    tag_88:\n        /* \"#utility.yul\":5280:5283   */\n      0x00\n        /* \"#utility.yul\":5311:5312   */\n      dup3\n        /* \"#utility.yul\":5307:5313   */\n      not\n        /* \"#utility.yul\":5304:5305   */\n      dup3\n        /* \"#utility.yul\":5301:5314   */\n      gt\n        /* \"#utility.yul\":5298:5300   */\n      iszero\n      tag_174\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5337:5370   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5393:5397   */\n      0x11\n        /* \"#utility.yul\":5390:5391   */\n      0x04\n        /* \"#utility.yul\":5383:5398   */\n      mstore\n        /* \"#utility.yul\":5423:5427   */\n      0x24\n        /* \"#utility.yul\":5344:5347   */\n      dup2\n        /* \"#utility.yul\":5411:5428   */\n      revert\n        /* \"#utility.yul\":5298:5300   */\n    tag_174:\n      pop\n        /* \"#utility.yul\":5454:5463   */\n      add\n      swap1\n        /* \"#utility.yul\":5288:5469   */\n      jump\t// out\n        /* \"#utility.yul\":5474:5854   */\n    tag_65:\n        /* \"#utility.yul\":5553:5554   */\n      0x01\n        /* \"#utility.yul\":5549:5561   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5596:5608   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5617:5619   */\n      tag_176\n      jumpi\n        /* \"#utility.yul\":5671:5675   */\n      0x7f\n        /* \"#utility.yul\":5663:5669   */\n      dup3\n        /* \"#utility.yul\":5659:5676   */\n      and\n        /* \"#utility.yul\":5649:5676   */\n      swap2\n      pop\n        /* \"#utility.yul\":5617:5619   */\n    tag_176:\n        /* \"#utility.yul\":5724:5726   */\n      0x20\n        /* \"#utility.yul\":5716:5722   */\n      dup3\n        /* \"#utility.yul\":5713:5727   */\n      lt\n        /* \"#utility.yul\":5693:5711   */\n      dup2\n        /* \"#utility.yul\":5690:5728   */\n      eq\n        /* \"#utility.yul\":5687:5689   */\n      iszero\n      tag_177\n      jumpi\n        /* \"#utility.yul\":5770:5780   */\n      0x4e487b71\n        /* \"#utility.yul\":5765:5768   */\n      0xe0\n        /* \"#utility.yul\":5761:5781   */\n      shl\n        /* \"#utility.yul\":5758:5759   */\n      0x00\n        /* \"#utility.yul\":5751:5782   */\n      mstore\n        /* \"#utility.yul\":5805:5809   */\n      0x22\n        /* \"#utility.yul\":5802:5803   */\n      0x04\n        /* \"#utility.yul\":5795:5810   */\n      mstore\n        /* \"#utility.yul\":5833:5837   */\n      0x24\n        /* \"#utility.yul\":5830:5831   */\n      0x00\n        /* \"#utility.yul\":5823:5838   */\n      revert\n        /* \"#utility.yul\":5687:5689   */\n    tag_177:\n      pop\n        /* \"#utility.yul\":5529:5854   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212206a0701b1819f4ffebb4cc81e0d30a123d69adcd745fcd7a1348a6521a0a3f65a64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061085c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610774565b60405180910390f35b6100df6100da36600461074b565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610710565b61024a565b604051601281526020016100c3565b6100df61013136600461074b565b61026e565b6100f36101443660046106bd565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df61017536600461074b565b61029f565b6100df61018836600461074b565b61031f565b6100f361019b3660046106de565b61032d565b6060603680546101af906107eb565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107eb565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107c7565b610358565b6060603780546101af906107eb565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106b857600080fd5b919050565b6000602082840312156106ce578081fd5b6106d7826106a1565b9392505050565b600080604083850312156106f0578081fd5b6106f9836106a1565b9150610707602084016106a1565b90509250929050565b600080600060608486031215610724578081fd5b61072d846106a1565b925061073b602085016106a1565b9150604084013590509250925092565b6000806040838503121561075d578182fd5b610766836106a1565b946020939093013593505050565b6000602080835283518082850152825b818110156107a057858101830151858201604001528201610784565b818111156107b15783604083870101525b50601f01601f1916929092016040019392505050565b600082198211156107e657634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806107ff57607f821691505b6020821081141561082057634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212206a0701b1819f4ffebb4cc81e0d30a123d69adcd745fcd7a1348a6521a0a3f65a64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x710 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7EB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7EB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7C7 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7EB JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6D7 DUP3 PUSH2 0x6A1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F9 DUP4 PUSH2 0x6A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x707 PUSH1 0x20 DUP5 ADD PUSH2 0x6A1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x724 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x72D DUP5 PUSH2 0x6A1 JUMP JUMPDEST SWAP3 POP PUSH2 0x73B PUSH1 0x20 DUP6 ADD PUSH2 0x6A1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x766 DUP4 PUSH2 0x6A1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x784 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7B1 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x7E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x820 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x701B1819F4FFEBB4CC81E 0xD ADDRESS LOG1 0x23 0xD6 SWAP11 0xDC 0xD7 GASLIMIT 0xFC 0xD7 LOG1 CALLVALUE DUP11 PUSH6 0x21A0A3F65A64 PUSH20 0x6F6C634300080400330000000000000000000000 ",
							"sourceMap": "1632:11861:3:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5856:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:13"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:13"
															},
															"nodeType": "YulIf",
															"src": "111:2:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:13",
														"type": ""
													}
												],
												"src": "14:173:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:13"
															},
															"nodeType": "YulIf",
															"src": "272:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:13",
														"type": ""
													}
												],
												"src": "192:196:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "480:183:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "526:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "535:6:13"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "543:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "528:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "528:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "528:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "501:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "522:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "493:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:32:13"
															},
															"nodeType": "YulIf",
															"src": "490:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "571:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "571:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "609:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "642:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "653:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "638:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "638:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "619:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "438:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "449:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "461:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "469:6:13",
														"type": ""
													}
												],
												"src": "393:270:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "772:234:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "827:6:13"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "793:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "802:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "789:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "789:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "814:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:32:13"
															},
															"nodeType": "YulIf",
															"src": "782:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "853:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "882:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "863:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "863:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "853:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "901:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "945:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "911:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "901:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "958:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "996:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "968:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "958:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "722:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "733:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "745:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "753:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "761:6:13",
														"type": ""
													}
												],
												"src": "668:338:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:177:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1144:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1153:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1161:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1146:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1146:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1146:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1128:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1140:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1111:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:32:13"
															},
															"nodeType": "YulIf",
															"src": "1108:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1179:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1208:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1189:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1179:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1227:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1254:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1265:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1250:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1250:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1237:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1237:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1056:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1067:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1087:6:13",
														"type": ""
													}
												],
												"src": "1011:264:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1375:92:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1385:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1408:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1385:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1452:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1445:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1445:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1438:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1438:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1420:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1420:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1420:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1344:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1355:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1366:4:13",
														"type": ""
													}
												],
												"src": "1280:187:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1593:482:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1603:12:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1613:2:13",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1607:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1642:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1624:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:21:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1674:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1658:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1701:9:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1712:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:18:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1717:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1690:34:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1733:13:13",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1742:4:13"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1737:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:90:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1834:9:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1845:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1830:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1830:17:13"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:2:13",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1826:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1826:26:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1868:6:13"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1876:1:13"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1864:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1864:14:13"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1880:2:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1860:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1860:23:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1854:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1854:30:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1819:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1819:66:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1819:66:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1766:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1769:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1763:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1763:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1777:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1779:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1788:1:13"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1791:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1784:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1784:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1779:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1759:3:13",
																"statements": []
															},
															"src": "1755:140:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1929:69:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1958:9:13"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1969:6:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1954:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1954:22:13"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1978:2:13",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1950:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1950:31:13"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1983:4:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1943:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1943:45:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1943:45:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1910:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1907:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:13:13"
															},
															"nodeType": "YulIf",
															"src": "1904:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:62:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2042:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2050:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2038:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2038:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2059:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2055:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2055:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:29:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:45:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2066:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2015:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:54:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1562:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1584:4:13",
														"type": ""
													}
												],
												"src": "1472:603:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2254:225:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2271:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2282:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2264:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2264:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2264:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2305:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2316:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2301:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2301:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2321:2:13",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2294:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2294:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2344:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2355:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2340:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2340:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2360:34:13",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2333:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2431:5:13",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2404:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:33:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2404:33:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2446:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2458:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2469:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2446:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2231:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2245:4:13",
														"type": ""
													}
												],
												"src": "2080:399:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2658:224:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2668:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2668:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2709:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2725:2:13",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2698:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2698:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2764:34:13",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2737:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2737:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2835:4:13",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:32:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:32:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2849:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2872:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2857:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2849:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2635:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2649:4:13",
														"type": ""
													}
												],
												"src": "2484:398:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:179:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3078:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3089:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3071:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3071:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3071:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3128:2:13",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3101:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3151:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3162:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3147:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3167:31:13",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3140:59:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3140:59:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3208:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3220:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3208:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3038:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3052:4:13",
														"type": ""
													}
												],
												"src": "2887:353:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3419:228:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3436:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3429:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3429:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3429:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3470:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3466:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3466:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3486:2:13",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3459:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3459:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3459:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3525:34:13",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3580:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3591:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3576:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3596:8:13",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3614:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3626:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3637:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3622:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3614:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3396:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3410:4:13",
														"type": ""
													}
												],
												"src": "3245:402:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3826:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3843:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3854:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3836:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3836:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3877:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3888:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3873:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3873:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3893:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3866:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3916:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3927:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3932:34:13",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3905:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3998:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4003:7:13",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3976:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3976:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4020:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4032:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4028:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4020:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3803:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3817:4:13",
														"type": ""
													}
												],
												"src": "3652:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4232:226:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4249:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4260:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4242:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4242:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4283:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4294:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4279:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4279:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4299:2:13",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4272:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4322:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4333:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4318:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4318:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4338:34:13",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4311:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4311:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4311:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:6:13",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4425:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4437:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4448:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4433:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4433:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4425:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4209:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4223:4:13",
														"type": ""
													}
												],
												"src": "4058:400:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4637:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4647:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4647:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4688:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4699:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4684:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4704:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4727:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4738:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4743:34:13",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4716:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4716:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4716:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4814:7:13",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4831:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4843:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4854:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4831:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4614:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4628:4:13",
														"type": ""
													}
												],
												"src": "4463:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4970:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4980:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4992:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5003:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4988:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4988:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4980:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5022:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5033:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5015:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5015:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5015:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4939:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4950:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4961:4:13",
														"type": ""
													}
												],
												"src": "4869:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5148:87:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5158:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5170:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5181:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5166:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5166:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5158:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5200:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5215:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5223:4:13",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5211:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5211:17:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5193:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5193:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5193:36:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5117:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5128:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5139:4:13",
														"type": ""
													}
												],
												"src": "5051:184:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5288:181:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5323:115:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5344:3:13"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5353:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5358:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5349:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5349:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5337:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5337:33:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5337:33:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5390:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5393:4:13",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5383:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5383:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5383:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5418:3:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5423:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5411:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5411:17:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5411:17:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5304:1:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5311:1:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5307:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5307:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5301:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5301:13:13"
															},
															"nodeType": "YulIf",
															"src": "5298:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5447:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5458:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5461:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5454:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5454:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5447:3:13"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5271:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5274:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5280:3:13",
														"type": ""
													}
												],
												"src": "5240:229:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5529:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5539:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5553:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5556:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5549:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5549:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5539:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5570:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5600:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5606:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5596:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5596:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5574:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5647:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5649:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5663:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5671:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5659:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5659:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5649:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5627:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5620:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5620:26:13"
															},
															"nodeType": "YulIf",
															"src": "5617:2:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5737:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5758:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5765:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5770:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5761:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5761:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5751:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5751:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5751:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5802:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5805:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5795:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5795:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5795:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5830:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5833:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5823:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5823:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5823:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5693:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5716:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5724:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5713:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5713:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5690:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5690:38:13"
															},
															"nodeType": "YulIf",
															"src": "5687:2:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5509:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5518:6:13",
														"type": ""
													}
												],
												"src": "5474:380:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610774565b60405180910390f35b6100df6100da36600461074b565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610710565b61024a565b604051601281526020016100c3565b6100df61013136600461074b565b61026e565b6100f36101443660046106bd565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df61017536600461074b565b61029f565b6100df61018836600461074b565b61031f565b6100f361019b3660046106de565b61032d565b6060603680546101af906107eb565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107eb565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107c7565b610358565b6060603780546101af906107eb565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106b857600080fd5b919050565b6000602082840312156106ce578081fd5b6106d7826106a1565b9392505050565b600080604083850312156106f0578081fd5b6106f9836106a1565b9150610707602084016106a1565b90509250929050565b600080600060608486031215610724578081fd5b61072d846106a1565b925061073b602085016106a1565b9150604084013590509250925092565b6000806040838503121561075d578182fd5b610766836106a1565b946020939093013593505050565b6000602080835283518082850152825b818110156107a057858101830151858201604001528201610784565b818111156107b15783604083870101525b50601f01601f1916929092016040019392505050565b600082198211156107e657634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806107ff57607f821691505b6020821081141561082057634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212206a0701b1819f4ffebb4cc81e0d30a123d69adcd745fcd7a1348a6521a0a3f65a64736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x774 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x710 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x74B JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7EB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7EB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7C7 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7EB JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6CE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6D7 DUP3 PUSH2 0x6A1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6F0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F9 DUP4 PUSH2 0x6A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x707 PUSH1 0x20 DUP5 ADD PUSH2 0x6A1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x724 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x72D DUP5 PUSH2 0x6A1 JUMP JUMPDEST SWAP3 POP PUSH2 0x73B PUSH1 0x20 DUP6 ADD PUSH2 0x6A1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x766 DUP4 PUSH2 0x6A1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7A0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x784 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7B1 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x7E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x820 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH11 0x701B1819F4FFEBB4CC81E 0xD ADDRESS LOG1 0x23 0xD6 SWAP11 0xDC 0xD7 GASLIMIT 0xFC 0xD7 LOG1 CALLVALUE DUP11 PUSH6 0x21A0A3F65A64 PUSH20 0x6F6C634300080400330000000000000000000000 ",
							"sourceMap": "1632:11861:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4802:197;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:13;;1438:22;1420:41;;1408:2;1393:18;4802:197:3;1375:92:13;3613:106:3;3700:12;;3613:106;;;5015:25:13;;;5003:2;4988:18;3613:106:3;4970:76:13;5561:256:3;;;;;;:::i;:::-;;:::i;3462:91::-;;;3544:2;5193:36:13;;5181:2;5166:18;3462:91:3;5148:87:13;6212:234:3;;;;;;:::i;:::-;;:::i;3777:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3877:18:3;3851:7;3877:18;;;:9;:18;;;;;;;3777:125;2727:102;;;:::i;6933:427::-;;;;;;:::i;:::-;;:::i;4098:189::-;;;;;;:::i;:::-;;:::i;4345:149::-;;;;;;:::i;:::-;;:::i;2516:98::-;2570:13;2602:5;2595:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;:::o;4802:197::-;4885:4;965:10:9;4939:32:3;965:10:9;4955:7:3;4964:6;4939:8;:32::i;:::-;-1:-1:-1;4988:4:3;;4802:197;-1:-1:-1;;;4802:197:3:o;5561:256::-;5658:4;965:10:9;5714:38:3;5730:4;965:10:9;5745:6:3;5714:15;:38::i;:::-;5762:27;5772:4;5778:2;5782:6;5762:9;:27::i;:::-;-1:-1:-1;5806:4:3;;5561:256;-1:-1:-1;;;;5561:256:3:o;6212:234::-;6300:4;965:10:9;6354:64:3;965:10:9;6370:7:3;6407:10;6379:25;965:10:9;6370:7:3;6379:9;:25::i;:::-;:38;;;;:::i;:::-;6354:8;:64::i;2727:102::-;2783:13;2815:7;2808:14;;;;;:::i;6933:427::-;7026:4;965:10:9;7026:4:3;7107:25;965:10:9;7124:7:3;7107:9;:25::i;:::-;7080:52;;7170:15;7150:16;:35;;7142:85;;;;-1:-1:-1;;;7142:85:3;;4665:2:13;7142:85:3;;;4647:21:13;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:13;;;4787:35;4839:19;;7142:85:3;;;;;;;;;7261:60;7270:5;7277:7;7305:15;7286:16;:34;7261:8;:60::i;4098:189::-;4177:4;965:10:9;4231:28:3;965:10:9;4248:2:3;4252:6;4231:9;:28::i;4345:149::-;-1:-1:-1;;;;;4460:18:3;;;4434:7;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4345:149::o;10815:340::-;-1:-1:-1;;;;;10916:19:3;;10908:68;;;;-1:-1:-1;;;10908:68:3;;4260:2:13;10908:68:3;;;4242:21:13;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:13;;;4382:34;4433:19;;10908:68:3;4232:226:13;10908:68:3;-1:-1:-1;;;;;10994:21:3;;10986:68;;;;-1:-1:-1;;;10986:68:3;;2686:2:13;10986:68:3;;;2668:21:13;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:13;;;2808:32;2857:19;;10986:68:3;2658:224:13;10986:68:3;-1:-1:-1;;;;;11065:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11116:32;;5015:25:13;;;11116:32:3;;4988:18:13;11116:32:3;;;;;;;10815:340;;;:::o;11436:411::-;11536:24;11563:25;11573:5;11580:7;11563:9;:25::i;:::-;11536:52;;-1:-1:-1;;11602:16:3;:37;11598:243;;11683:6;11663:16;:26;;11655:68;;;;-1:-1:-1;;;11655:68:3;;3089:2:13;11655:68:3;;;3071:21:13;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11655:68:3;3061:179:13;11655:68:3;11765:51;11774:5;11781:7;11809:6;11790:16;:25;11765:8;:51::i;:::-;11436:411;;;;:::o;7814:788::-;-1:-1:-1;;;;;7910:18:3;;7902:68;;;;-1:-1:-1;;;7902:68:3;;3854:2:13;7902:68:3;;;3836:21:13;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:13;;;3976:35;4028:19;;7902:68:3;3826:227:13;7902:68:3;-1:-1:-1;;;;;7988:16:3;;7980:64;;;;-1:-1:-1;;;7980:64:3;;2282:2:13;7980:64:3;;;2264:21:13;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:13;;;2404:33;2454:19;;7980:64:3;2254:225:13;7980:64:3;-1:-1:-1;;;;;8126:15:3;;8104:19;8126:15;;;:9;:15;;;;;;8159:21;;;;8151:72;;;;-1:-1:-1;;;8151:72:3;;3447:2:13;8151:72:3;;;3429:21:13;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:13;;;3569:36;3622:19;;8151:72:3;3419:228:13;8151:72:3;-1:-1:-1;;;;;8257:15:3;;;;;;;:9;:15;;;;;;8275:20;;;8257:38;;8472:13;;;;;;;;;;:23;;;;;;8521:26;;;;;;8289:6;5015:25:13;;5003:2;4988:18;;4970:76;8521:26:3;;;;;;;;8558:37;12431:91;14:173:13;82:20;;-1:-1:-1;;;;;131:31:13;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:13:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:13:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:13;2038:15;-1:-1:-1;;2034:29:13;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:13:o;5240:229::-;5280:3;5311:1;5307:6;5304:1;5301:13;5298:2;;;-1:-1:-1;;;5337:33:13;;5393:4;5390:1;5383:15;5423:4;5344:3;5411:17;5298:2;-1:-1:-1;5454:9:13;;5288:181::o;5474:380::-;5553:1;5549:12;;;;5596;;;5617:2;;5671:4;5663:6;5659:17;5649:27;;5617:2;5724;5716:6;5713:14;5693:18;5690:38;5687:2;;;5770:10;5765:3;5761:20;5758:1;5751:31;5805:4;5802:1;5795:15;5833:4;5830:1;5823:15;5687:2;;5529:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "428000",
								"executionCost": "461",
								"totalCost": "428461"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22524",
								"balanceOf(address)": "1259",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "23616",
								"increaseAllowance(address,uint256)": "23578",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1026",
								"transfer(address,uint256)": "44343",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 13493,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206a0701b1819f4ffebb4cc81e0d30a123d69adcd745fcd7a1348a6521a0a3f65a64736f6c63430008040033",
									".code": [
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "39509351"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "39509351"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "95D89B41"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "A457C2D7"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "DD62ED3E"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "6FDDE03"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "95EA7B3"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "18160DDD"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1632,
											"end": 13493,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1438,
											"end": 1460,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1408,
											"end": 1410,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1411,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 1375,
											"end": 1467,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3544,
											"end": 3546,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5181,
											"end": 5183,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 5148,
											"end": 5235,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3851,
											"end": 3858,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3886,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2570,
											"end": 2583,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2602,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4885,
											"end": 4889,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4955,
											"end": 4962,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4964,
											"end": 4970,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4939,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4988,
											"end": 4992,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4988,
											"end": 4992,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5658,
											"end": 5662,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 5730,
											"end": 5734,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5745,
											"end": 5751,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5714,
											"end": 5729,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 5772,
											"end": 5776,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5782,
											"end": 5788,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5762,
											"end": 5771,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5806,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5806,
											"end": 5810,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6300,
											"end": 6304,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 6354,
											"end": 6418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6370,
											"end": 6377,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6407,
											"end": 6417,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6370,
											"end": 6377,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6388,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6354,
											"end": 6362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 6354,
											"end": 6418,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2783,
											"end": 2796,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2815,
											"end": 2822,
											"name": "PUSH",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7026,
											"end": 7030,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 7026,
											"end": 7030,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7124,
											"end": 7131,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7107,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "tag",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7080,
											"end": 7132,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7080,
											"end": 7132,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7170,
											"end": 7185,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7166,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7185,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7185,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4647,
											"end": 4668,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4677,
											"end": 4707,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4777,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4716,
											"end": 4778,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4787,
											"end": 4822,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7261,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 7270,
											"end": 7275,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7277,
											"end": 7284,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7305,
											"end": 7320,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7286,
											"end": 7302,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7286,
											"end": 7320,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7261,
											"end": 7269,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 7261,
											"end": 7321,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4177,
											"end": 4181,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4259,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4250,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4258,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4231,
											"end": 4240,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 4231,
											"end": 4259,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4434,
											"end": 4441,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4471,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "tag",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10916,
											"end": 10935,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10916,
											"end": 10935,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4260,
											"end": 4262,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4242,
											"end": 4263,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4299,
											"end": 4301,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4272,
											"end": 4302,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4338,
											"end": 4372,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4311,
											"end": 4373,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4382,
											"end": 4416,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 4232,
											"end": 4458,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10994,
											"end": 11015,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10994,
											"end": 11015,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2668,
											"end": 2689,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2725,
											"end": 2727,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2698,
											"end": 2728,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2764,
											"end": 2798,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2737,
											"end": 2799,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2808,
											"end": 2840,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2658,
											"end": 2882,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11076,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "tag",
											"source": 3,
											"value": "79"
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11560,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 11573,
											"end": 11578,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11580,
											"end": 11587,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11563,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "61"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "tag",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11588,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11588,
											"name": "POP",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11602,
											"end": 11618,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11602,
											"end": 11639,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 11598,
											"end": 11841,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 11598,
											"end": 11841,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 11683,
											"end": 11689,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11689,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11689,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3089,
											"end": 3091,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3071,
											"end": 3092,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 13,
											"value": "1D"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3101,
											"end": 3131,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3167,
											"end": 3198,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3140,
											"end": 3199,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3061,
											"end": 3240,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "tag",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 11774,
											"end": 11779,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11781,
											"end": 11788,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11809,
											"end": 11815,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11790,
											"end": 11806,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11790,
											"end": 11815,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11765,
											"end": 11773,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 7814,
											"end": 8602,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 7814,
											"end": 8602,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7910,
											"end": 7928,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7910,
											"end": 7928,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3836,
											"end": 3857,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3893,
											"end": 3895,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3866,
											"end": 3896,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3932,
											"end": 3966,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3905,
											"end": 3967,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3976,
											"end": 4011,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3826,
											"end": 4053,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "tag",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7988,
											"end": 8004,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7988,
											"end": 8004,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2282,
											"end": 2284,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2264,
											"end": 2285,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2321,
											"end": 2323,
											"name": "PUSH",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2294,
											"end": 2324,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2360,
											"end": 2394,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2333,
											"end": 2395,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2404,
											"end": 2437,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2254,
											"end": 2479,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8104,
											"end": 8123,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8135,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3447,
											"end": 3449,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3450,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3486,
											"end": 3488,
											"name": "PUSH",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3459,
											"end": 3489,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3525,
											"end": 3559,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3498,
											"end": 3560,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3569,
											"end": 3605,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 3419,
											"end": 3647,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "tag",
											"source": 3,
											"value": "132"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8266,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8295,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8295,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "135"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8289,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "tag",
											"source": 3,
											"value": "135"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 8558,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 12431,
											"end": 12522,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 13,
											"value": "145"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "tag",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 343,
											"end": 382,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 262,
											"end": 388,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 388,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "tag",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 461,
											"end": 467,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 522,
											"end": 524,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 501,
											"end": 508,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 497,
											"end": 520,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 493,
											"end": 525,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 490,
											"end": 492,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 490,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 543,
											"end": 549,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 535,
											"end": 541,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 528,
											"end": 550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 490,
											"end": 492,
											"name": "tag",
											"source": 13,
											"value": "148"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 590,
											"end": 599,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "tag",
											"source": 13,
											"value": "149"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 561,
											"end": 600,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 561,
											"end": 600,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 653,
											"end": 655,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 642,
											"end": 651,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 638,
											"end": 656,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "tag",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 609,
											"end": 657,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 609,
											"end": 657,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 480,
											"end": 663,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "tag",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 745,
											"end": 751,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 761,
											"end": 767,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 814,
											"end": 816,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 793,
											"end": 800,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 789,
											"end": 812,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 785,
											"end": 817,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 782,
											"end": 784,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 820,
											"end": 842,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 782,
											"end": 784,
											"name": "tag",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "153"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "tag",
											"source": 13,
											"value": "153"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 853,
											"end": 892,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 853,
											"end": 892,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "154"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 930,
											"end": 948,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "tag",
											"source": 13,
											"value": "154"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 901,
											"end": 949,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 901,
											"end": 949,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 981,
											"end": 999,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1079,
											"end": 1085,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1093,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1140,
											"end": 1142,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1128,
											"end": 1137,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1115,
											"end": 1138,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1111,
											"end": 1143,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1161,
											"end": 1167,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1168,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "tag",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 1208,
											"end": 1217,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "141"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "tag",
											"source": 13,
											"value": "157"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1179,
											"end": 1218,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 1265,
											"end": 1267,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1098,
											"end": 1275,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "tag",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1584,
											"end": 1588,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1642,
											"end": 1644,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1624,
											"end": 1645,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1674,
											"end": 1680,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1668,
											"end": 1681,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1717,
											"end": 1723,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1701,
											"end": 1710,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1690,
											"end": 1724,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1742,
											"end": 1746,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1769,
											"end": 1775,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1763,
											"end": 1776,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1854,
											"end": 1884,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1826,
											"end": 1852,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1819,
											"end": 1885,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "160"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 13,
											"value": "162"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1913,
											"end": 1919,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1910,
											"end": 1911,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1907,
											"end": 1920,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1978,
											"end": 1980,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1950,
											"end": 1981,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1943,
											"end": 1988,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "tag",
											"source": 13,
											"value": "163"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2061,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2053,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2063,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2066,
											"end": 2068,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "tag",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5280,
											"end": 5283,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5311,
											"end": 5312,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5307,
											"end": 5313,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 5304,
											"end": 5305,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5301,
											"end": 5314,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "174"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5393,
											"end": 5397,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 5390,
											"end": 5391,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5383,
											"end": 5398,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5423,
											"end": 5427,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 5344,
											"end": 5347,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5411,
											"end": 5428,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "tag",
											"source": 13,
											"value": "174"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5288,
											"end": 5469,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5553,
											"end": 5554,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "176"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5671,
											"end": 5675,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 5663,
											"end": 5669,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5659,
											"end": 5676,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "tag",
											"source": 13,
											"value": "176"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5724,
											"end": 5726,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5713,
											"end": 5727,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 5693,
											"end": 5711,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5690,
											"end": 5728,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5770,
											"end": 5780,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 5765,
											"end": 5768,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 5761,
											"end": 5781,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5758,
											"end": 5759,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5751,
											"end": 5782,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5805,
											"end": 5809,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 5802,
											"end": 5803,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5795,
											"end": 5810,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5833,
											"end": 5837,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 5830,
											"end": 5831,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5823,
											"end": 5838,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "tag",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ebdf0d3e42bd25223e45a213311d6d7e177d56a2c541a78b58c0c9d10bbdfbf9\",\"dweb:/ipfs/QmfMyehJ6pxHrh7yL4793J6i7dofXnS2zH3cTtC8JdQMV9\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b06267c5f80bad727af3e48b1382333d591dad51376399ef2f6b0ee6d58bf95\",\"dweb:/ipfs/QmdU5La1agcQvghnfMpWZGDPz2TUDTCxUwTLKmuMRXBpAx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1894,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 406,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 412,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 414,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 416,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 418,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 998,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
				"IERC20PermitUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fed09b97ccb0ff9ba9b6a94224f1d489026bf6b4b7279bfe64fb6e8749dee4d\",\"dweb:/ipfs/QmcRAzaSP1UnGr4vrGkfJmB2L9aiTYoXfV1Lg9gqrVRWn8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"SafeERC20Upgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":734:7100  library SafeERC20Upgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":734:7100  library SafeERC20Upgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bb576566e3056fc673b210e42cfcdf44e1a0a29b757e3a046b301b19773334dc64736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb576566e3056fc673b210e42cfcdf44e1a0a29b757e3a046b301b19773334dc64736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB JUMPI PUSH6 0x66E3056FC673 0xB2 LT 0xE4 0x2C 0xFC 0xDF DIFFICULTY 0xE1 LOG0 LOG2 SWAP12 PUSH22 0x7E3A046B301B19773334DC64736F6C63430008040033 ",
							"sourceMap": "734:6366:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;734:6366:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bb576566e3056fc673b210e42cfcdf44e1a0a29b757e3a046b301b19773334dc64736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB JUMPI PUSH6 0x66E3056FC673 0xB2 LT 0xE4 0x2C 0xFC 0xDF DIFFICULTY 0xE1 LOG0 LOG2 SWAP12 PUSH22 0x7E3A046B301B19773334DC64736F6C63430008040033 ",
							"sourceMap": "734:6366:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)": "infinite",
								"forceApprove(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeApprove(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 734,
									"end": 7100,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bb576566e3056fc673b210e42cfcdf44e1a0a29b757e3a046b301b19773334dc64736f6c63430008040033",
									".code": [
										{
											"begin": 734,
											"end": 7100,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 734,
											"end": 7100,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fed09b97ccb0ff9ba9b6a94224f1d489026bf6b4b7279bfe64fb6e8749dee4d\",\"dweb:/ipfs/QmcRAzaSP1UnGr4vrGkfJmB2L9aiTYoXfV1Lg9gqrVRWn8\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d03ebe5406134f0c4a017dee625ff615031194493bd1e88504e5c8fae55bc166\",\"dweb:/ipfs/QmUZV5bMbgk2PAkV3coouSeSainHN2jhqaQDJaA7hQRyu2\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:9374  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122027981b8ba9041b0c03df2c13450e58e347119dee293820cbe84c676cc4b9bb0764736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122027981b8ba9041b0c03df2c13450e58e347119dee293820cbe84c676cc4b9bb0764736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 SWAP9 SHL DUP12 0xA9 DIV SHL 0xC SUB 0xDF 0x2C SGT GASLIMIT 0xE PC 0xE3 SELFBALANCE GT SWAP14 0xEE 0x29 CODESIZE KECCAK256 0xCB 0xE8 0x4C PUSH8 0x6CC4B9BB0764736F PUSH13 0x63430008040033000000000000 ",
							"sourceMap": "194:9180:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9180:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122027981b8ba9041b0c03df2c13450e58e347119dee293820cbe84c676cc4b9bb0764736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 SWAP9 SHL DUP12 0xA9 DIV SHL 0xC SUB 0xDF 0x2C SGT GASLIMIT 0xE PC 0xE3 SELFBALANCE GT SWAP14 0xEE 0x29 CODESIZE KECCAK256 0xCB 0xE8 0x4C PUSH8 0x6CC4B9BB0764736F PUSH13 0x63430008040033000000000000 ",
							"sourceMap": "194:9180:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 194,
									"end": 9374,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122027981b8ba9041b0c03df2c13450e58e347119dee293820cbe84c676cc4b9bb0764736f6c63430008040033",
									".code": [
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 194,
											"end": 9374,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b06267c5f80bad727af3e48b1382333d591dad51376399ef2f6b0ee6d58bf95\",\"dweb:/ipfs/QmdU5La1agcQvghnfMpWZGDPz2TUDTCxUwTLKmuMRXBpAx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1894,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/common/IWrappedNative.sol": {
				"IWrappedNative": {
					"abi": [
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wad",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deposit()": "d0e30db0",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/common/IWrappedNative.sol\":\"IWrappedNative\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/common/IWrappedNative.sol\":{\"keccak256\":\"0x6051fc2e15a474c3acc157c3b9a0da2f14ac92adae51174b041a9debb75a37c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91575751f1de52095425abb4367feab6d9445f64e44ef91e765f5ad6f751e2b5\",\"dweb:/ipfs/QmUZ7Yg7BwK7TgnsoohCK6KLaDdVroQVPV4AsSfZ3h3ask\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/plexus/IStrategy.sol": {
				"IStrategy": {
					"abi": [
						{
							"inputs": [],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "balanceOfPool",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "balanceOfWant",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "beforeDeposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "harvest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "panic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "retireStrat",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapper",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vault",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "want",
							"outputs": [
								{
									"internalType": "contract IERC20Upgradeable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"balanceOf()": "722713f7",
							"balanceOfPool()": "11588086",
							"balanceOfWant()": "c1a3d44c",
							"beforeDeposit()": "573fef0a",
							"deposit()": "d0e30db0",
							"harvest()": "4641257d",
							"panic()": "4700d305",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"retireStrat()": "fb617787",
							"swapper()": "2b3297f9",
							"unpause()": "3f4ba83a",
							"vault()": "fbfa77cf",
							"want()": "1f1fcd51",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/plexus/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"contracts/interfaces/plexus/IStrategy.sol\":{\"keccak256\":\"0xae36742b32610464de23e86c25e743a53ff6ff430f0b026b4c0cefef1fb07338\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87904f610142127ba778cbedef9da4b02f5e26aa5c18c63847de5c066f3311d7\",\"dweb:/ipfs/QmRjrwfz9kF14d29dV2qLaJmHWtquHecKuQbB9wN2FgXgS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/vaults/PlexusVaultNative.sol": {
				"PlexusVaultNative": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "NewStratCandidate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "UpgradeStrat",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "approvalDelay",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "available",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "balance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "depositAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "depositNative",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "earn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPricePerFullShare",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "inCaseTokensGetStuck",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IStrategy",
									"name": "_strategy",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "_symbol",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "_approvalDelay",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_implementation",
									"type": "address"
								}
							],
							"name": "proposeStrat",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stratCandidate",
							"outputs": [
								{
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "proposedTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "strategy",
							"outputs": [
								{
									"internalType": "contract IStrategy",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "upgradeStrat",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "want",
							"outputs": [
								{
									"internalType": "contract IERC20Upgradeable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_shares",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawAllNative",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_shares",
									"type": "uint256"
								}
							],
							"name": "withdrawNative",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "Implementation of a vault to deposit funds for yield optimizing. This is the contract that receives funds and that users interface with. The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"available()": {
								"details": "Custom logic in here for how much the vault allows to be borrowed. We return 100% of tokens for now. Under certain conditions we might want to keep some of the system funds at hand in the vault, instead of putting them to work."
							},
							"balance()": {
								"details": "It calculates the total underlying value of {token} held by the system. It takes into account the vault contract balance, the strategy contract balance  and the balance deployed in other contracts as part of the strategy."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"deposit(uint256)": {
								"details": "The entrypoint of funds into the system. People deposit with this function into the vault. The vault is then in charge of sending funds into the strategy."
							},
							"depositAll()": {
								"details": "A helper function to call deposit() with all the sender's funds."
							},
							"depositNative()": {
								"details": "Alterwnative entry point into the strat. You can send wnative, and the vault will wrap them before sending them into the strat."
							},
							"earn()": {
								"details": "Function to send funds into the strategy and put them to work. It's primarily called by the vault's deposit() function."
							},
							"getPricePerFullShare()": {
								"details": "Function for various UIs to display the current value of one of our yield tokens. Returns an uint256 with 18 decimals of how much underlying asset one vault share represents."
							},
							"inCaseTokensGetStuck(address)": {
								"details": "Rescues random funds stuck that the strat can't handle.",
								"params": {
									"_token": "address of the token to rescue."
								}
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"initialize(address,string,string,uint256)": {
								"details": "Sets the value of {token} to the token that the vault will hold as underlying value. It initializes the vault's own 'plxv' token This token is minted when someone does a deposit. It is burned in order to withdraw the corresponding portion of the underlying assets.",
								"params": {
									"_approvalDelay": "the delay before a new strat can be approved.",
									"_name": "the name of the vault token.",
									"_strategy": "the address of the strategy.",
									"_symbol": "the symbol of the vault token."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"proposeStrat(address)": {
								"details": "Sets the candidate for the new strat to use with this vault.",
								"params": {
									"_implementation": "The address of the candidate strategy."
								}
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"upgradeStrat()": {
								"details": "It switches the active strat for the strat candidate. After upgrading, the candidate implementation is set to the 0x00 address, and proposedTime to a time happening in +100 years for safety."
							},
							"withdraw(uint256)": {
								"details": "Function to exit the system. The vault will withdraw the required tokens from the strategy and pay up the token holder. A proportional number of IOU tokens are burned in the process."
							},
							"withdrawAll()": {
								"details": "A helper function to call withdraw() with all the sender's funds."
							},
							"withdrawAllNative()": {
								"details": "Alterwnative helper function to withdraw all funds in wnative form."
							},
							"withdrawNative(uint256)": {
								"details": "Alterwnative function to exit the system. Works just like 'withdraw(uint256)', but the funds arrive in wnative."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/vaults/PlexusVaultNative.sol\":735:9116  contract PlexusVaultNative is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/vaults/PlexusVaultNative.sol\":735:9116  contract PlexusVaultNative is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x84276d81\n      gt\n      tag_36\n      jumpi\n      dup1\n      0xb6b55f25\n      gt\n      tag_37\n      jumpi\n      dup1\n      0xde5f6268\n      gt\n      tag_38\n      jumpi\n      dup1\n      0xde5f6268\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xdef68a9c\n      eq\n      tag_32\n      jumpi\n      dup1\n      0xe2d1e75c\n      eq\n      tag_33\n      jumpi\n      dup1\n      0xe6685244\n      eq\n      tag_34\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      dup1\n      0xb6b55f25\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xd389800f\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xdb6b5246\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      dup1\n      0xa457c2d7\n      gt\n      tag_39\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xa8c62e76\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xb69ef8a8\n      eq\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      dup1\n      0x84276d81\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x853828b6\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup1\n      0x482fe024\n      gt\n      tag_40\n      jumpi\n      dup1\n      0x70a08231\n      gt\n      tag_41\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x76dfabb8\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x77c7b8fc\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      dup1\n      0x482fe024\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x48a0d754\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4d12d4b6\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x5b12ff9b\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      dup1\n      0x23b872dd\n      gt\n      tag_42\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x1f1fcd51\n      eq\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_51\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n    tag_51:\n      mload(0x40)\n        /* \"#utility.yul\":5589:5603   */\n      swap1\n      iszero\n        /* \"#utility.yul\":5582:5604   */\n      iszero\n        /* \"#utility.yul\":5564:5605   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5552:5554   */\n      0x20\n        /* \"#utility.yul\":5537:5555   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_48\n        /* \"#utility.yul\":5519:5611   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_58:\n      mload(0x40)\n        /* \"#utility.yul\":15672:15697   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":15660:15662   */\n      0x20\n        /* \"#utility.yul\":15645:15663   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_48\n        /* \"#utility.yul\":15627:15703   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2228:2342  function want() public view returns (IERC20Upgradeable) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_63\n      tag_64\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4721:4753   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4703:4754   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4691:4693   */\n      0x20\n        /* \"#utility.yul\":4676:4694   */\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2228:2342  function want() public view returns (IERC20Upgradeable) {... */\n      tag_48\n        /* \"#utility.yul\":4658:4760   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_51\n      tag_69\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n      tag_74\n      tag_75\n      calldatasize\n      0x04\n      tag_76\n      jump\t// in\n    tag_75:\n      tag_77\n      jump\t// in\n    tag_74:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3462:3553  function decimals() public view virtual override returns (uint8) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n      pop\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3544:3546  18 */\n      0x12\n        /* \"#utility.yul\":6228:6264   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6216:6218   */\n      0x20\n        /* \"#utility.yul\":6201:6219   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3462:3553  function decimals() public view virtual override returns (uint8) {... */\n      tag_48\n        /* \"#utility.yul\":6183:6270   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6212:6446  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_51\n      tag_85\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_85:\n      tag_86\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5748:5840  function withdrawAllNative() external {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_74\n      tag_90\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3030:3136  function available() public view returns (uint256) {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      pop\n      tag_58\n      tag_93\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1919:2222  function initialize(IStrategy _strategy, string memory _name, string memory _symbol, uint256 _approvalDelay) public initializer {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_74\n      tag_97\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_97:\n      tag_99\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7498:7913  function proposeStrat(address _implementation) public onlyOwner {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_100\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_100:\n      pop\n      tag_74\n      tag_102\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_102:\n      tag_104\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3777:3902  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_105\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_105:\n      pop\n      tag_58\n      tag_107\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3851:3858  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3886  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3777:3902  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2085:2186  function renounceOwnership() public virtual onlyOwner {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_110\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_110:\n      pop\n      tag_74\n      tag_112\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1033:1069  StratCandidate public stratCandidate */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_113\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_113:\n      pop\n      sload(0xc9)\n      sload(0xca)\n      tag_114\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      dup3\n      jump\n    tag_114:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5337:5369   */\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":5319:5370   */\n      dup4\n      mstore\n        /* \"#utility.yul\":5401:5403   */\n      0x20\n        /* \"#utility.yul\":5386:5404   */\n      dup4\n      add\n        /* \"#utility.yul\":5379:5413   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":5292:5310   */\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1033:1069  StratCandidate public stratCandidate */\n      tag_48\n        /* \"#utility.yul\":5274:5419   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3352:3500  function getPricePerFullShare() public view returns (uint256) {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n      tag_58\n      tag_120\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6751:7334  function withdrawNative(uint256 _shares) public {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_122\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_122:\n      pop\n      tag_74\n      tag_124\n      calldatasize\n      0x04\n      tag_76\n      jump\t// in\n    tag_124:\n      tag_125\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5566:5646  function withdrawAll() external {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      tag_74\n      tag_128\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1462:1547  function owner() public view virtual returns (address) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_129\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_129:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1534:1540  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1462:1547  function owner() public view virtual returns (address) {... */\n      jump(tag_63)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2727:2829  function symbol() public view virtual override returns (string memory) {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      tag_46\n      tag_136\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6933:7360  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_51\n      tag_140\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_140:\n      tag_141\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1126:1151  IStrategy public strategy */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_143\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_143:\n      pop\n      sload(0xcb)\n      tag_63\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4287  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_148\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_148:\n      pop\n      tag_51\n      tag_150\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_150:\n      tag_151\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2612:2747  function balance() public view returns (uint) {... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_153\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_153:\n      pop\n      tag_58\n      tag_155\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3880:4417  function deposit(uint _amount) public nonReentrant {... */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_157\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_157:\n      pop\n      tag_74\n      tag_159\n      calldatasize\n      0x04\n      tag_76\n      jump\t// in\n    tag_159:\n      tag_160\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5321:5466  function earn() public {... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_161\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_161:\n      pop\n      tag_74\n      tag_163\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4586:5160  function depositNative() public payable nonReentrant {... */\n    tag_29:\n      tag_74\n      tag_165\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      tag_58\n      tag_168\n      calldatasize\n      0x04\n      tag_169\n      jump\t// in\n    tag_168:\n      tag_170\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3599:3684  function depositAll() external {... */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_172\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_172:\n      pop\n      tag_74\n      tag_174\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8807:9079  function inCaseTokensGetStuck(address _token) external onlyOwner {... */\n    tag_32:\n      callvalue\n      dup1\n      iszero\n      tag_175\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_175:\n      pop\n      tag_74\n      tag_177\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_177:\n      tag_178\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1238:1266  uint256 public approvalDelay */\n    tag_33:\n      callvalue\n      dup1\n      iszero\n      tag_179\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_179:\n      pop\n      tag_58\n      sload(0xcc)\n      dup2\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8153:8664  function upgradeStrat() public onlyOwner {... */\n    tag_34:\n      callvalue\n      dup1\n      iszero\n      tag_183\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_183:\n      pop\n      tag_74\n      tag_185\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2335:2533  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_35:\n      callvalue\n      dup1\n      iszero\n      tag_186\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_186:\n      pop\n      tag_74\n      tag_188\n      calldatasize\n      0x04\n      tag_103\n      jump\t// in\n    tag_188:\n      tag_189\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2570:2583  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2602:2607  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2595:2607  return _name */\n      dup1\n      sload\n      tag_191\n      swap1\n      tag_192\n      jump\t// in\n    tag_191:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_193\n      swap1\n      tag_192\n      jump\t// in\n    tag_193:\n      dup1\n      iszero\n      tag_194\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_195\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_194)\n    tag_195:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_196:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_196\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_194:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2516:2614  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_54:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4885:4889  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4971  _approve(owner, spender, amount) */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4955:4962  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4964:4970  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4947  _approve */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4939:4971  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_200:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4988:4992  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4802:4999  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2228:2342  function want() public view returns (IERC20Upgradeable) {... */\n    tag_64:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2327  strategy */\n      sload(0xcb)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2334  strategy.want() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x1f1fcd51)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2265:2282  IERC20Upgradeable */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2327  strategy */\n      and\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2332  strategy.want */\n      0x1f1fcd51\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2334  strategy.want() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2327  strategy */\n      dup7\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2319:2334  strategy.want() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_204\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_204:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_206\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_206:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_207\n      swap2\n      swap1\n      tag_295\n      jump\t// in\n    tag_207:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2294:2335  return IERC20Upgradeable(strategy.want()) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2228:2342  function want() public view returns (IERC20Upgradeable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5658:5662  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5752  _spendAllowance(from, spender, amount) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5730:5734  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5745:5751  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5729  _spendAllowance */\n      tag_212\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5714:5752  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5789  _transfer(from, to, amount) */\n      tag_213\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5772:5776  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5778:5780  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5782:5788  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5771  _transfer */\n      tag_214\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5762:5789  _transfer(from, to, amount) */\n      jump\t// in\n    tag_213:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5806:5810  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5561:5817  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n    tag_77:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6123:6132  uint256 r */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6159:6172  totalSupply() */\n      tag_216\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6159:6172  totalSupply() */\n    tag_216:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6148:6155  _shares */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6136:6145  balance() */\n      tag_217\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6136:6143  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6136:6145  balance() */\n      jump\t// in\n    tag_217:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6136:6155  balance() * _shares */\n      tag_218\n      swap2\n      swap1\n      tag_219\n      jump\t// in\n    tag_218:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6135:6172  (balance() * _shares) / totalSupply() */\n      tag_220\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n    tag_220:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6123:6172  uint256 r = (balance() * _shares) / totalSupply() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6182:6208  _burn(msg.sender, _shares) */\n      tag_222\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6188:6198  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6200:6207  _shares */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6182:6187  _burn */\n      tag_223\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6182:6208  _burn(msg.sender, _shares) */\n      jump\t// in\n    tag_222:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6219:6225  uint b */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6234  want() */\n      tag_224\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6232  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6234  want() */\n      jump\t// in\n    tag_224:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6259  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6253:6257  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6259  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6244  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6228:6259  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_226\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_226:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_228\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_228:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_229\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_229:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6219:6259  uint b = want().balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6277:6278  r */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6273:6274  b */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6273:6278  b < r */\n      lt\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6269:6547  if (b < r) {... */\n      iszero\n      tag_231\n      jumpi\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6294:6308  uint _withdraw */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6311:6316  r - b */\n      tag_232\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6315:6316  b */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6311:6312  r */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6311:6316  r - b */\n      tag_233\n      jump\t// in\n    tag_232:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6330:6338  strategy */\n      sload(0xcb)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6330:6358  strategy.withdraw(_withdraw) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":15672:15697   */\n      dup4\n      swap1\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6294:6316  uint _withdraw = r - b */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6330:6338  strategy */\n      and\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6330:6347  strategy.withdraw */\n      0x2e1a7d4d\n      swap1\n        /* \"#utility.yul\":15645:15663   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6330:6358  strategy.withdraw(_withdraw) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_235\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_235:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_237\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_237:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6372:6383  uint _after */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6392  want() */\n      tag_238\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6390  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6392  want() */\n      jump\t// in\n    tag_238:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6417  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6411:6415  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6417  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6402  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6386:6417  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_240\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_240:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_242\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_242:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_243\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_243:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6372:6417  uint _after = want().balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6431:6441  uint _diff */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6444:6454  _after - b */\n      tag_244\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6453:6454  b */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6372:6417  uint _after = want().balanceOf(address(this)) */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6444:6454  _after - b */\n      tag_233\n      jump\t// in\n    tag_244:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6431:6454  uint _diff = _after - b */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6480:6489  _withdraw */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6472:6477  _diff */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6472:6489  _diff < _withdraw */\n      lt\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6468:6537  if (_diff < _withdraw) {... */\n      iszero\n      tag_245\n      jumpi\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6513:6522  b + _diff */\n      tag_246\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6517:6522  _diff */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6513:6514  b */\n      dup6\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6513:6522  b + _diff */\n      tag_247\n      jump\t// in\n    tag_246:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6509:6522  r = b + _diff */\n      swap5\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6468:6537  if (_diff < _withdraw) {... */\n    tag_245:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6269:6547  if (b < r) {... */\n      pop\n      pop\n      pop\n    tag_231:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6591  want().safeTransfer(msg.sender, r) */\n      tag_248\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6577:6587  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6589:6590  r */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6563  want() */\n      tag_249\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6561  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6563  want() */\n      jump\t// in\n    tag_249:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6576  want().safeTransfer */\n      and\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6591  want().safeTransfer(msg.sender, r) */\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6576  want().safeTransfer */\n      tag_250\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6557:6591  want().safeTransfer(msg.sender, r) */\n      jump\t// in\n    tag_248:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6212:6446  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6300:6304  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6418  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6370:6377  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6407:6417  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6404  allowance(owner, spender) */\n      tag_255\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6370:6377  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6388  allowance */\n      tag_170\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6404  allowance(owner, spender) */\n      jump\t// in\n    tag_255:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6379:6417  allowance(owner, spender) + addedValue */\n      tag_256\n      swap2\n      swap1\n      tag_247\n      jump\t// in\n    tag_256:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6362  _approve */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6418  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5748:5840  function withdrawAllNative() external {... */\n    tag_90:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5821:5831  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3851:3858  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3886  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5796:5833  withdrawNative(balanceOf(msg.sender)) */\n      tag_258\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6751:7334  function withdrawNative(uint256 _shares) public {... */\n      tag_125\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5796:5833  withdrawNative(balanceOf(msg.sender)) */\n    tag_258:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5748:5840  function withdrawAllNative() external {... */\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3030:3136  function available() public view returns (uint256) {... */\n    tag_93:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3072:3079  uint256 */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3104  want() */\n      tag_261\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3102  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3104  want() */\n      jump\t// in\n    tag_261:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3129  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3123:3127  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3129  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3114  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3098:3129  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_263\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_263:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_265\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_265:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_207\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1919:2222  function initialize(IStrategy _strategy, string memory _name, string memory _symbol, uint256 _approvalDelay) public initializer {... */\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3279:3298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3302:3315  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3301:3315  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_268\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3380:3381  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3377  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3365:3381  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3347:3381  isTopLevelCall && _initialized < 1 */\n    tag_268:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3346:3454  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_272\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3426:3430  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1713:1736  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_272\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3436:3448  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3436:3453  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3387:3453  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_272:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      tag_273\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10739:10741   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10721:10742   */\n      mstore\n        /* \"#utility.yul\":10778:10780   */\n      0x2e\n        /* \"#utility.yul\":10758:10776   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10751:10781   */\n      mstore\n        /* \"#utility.yul\":10817:10851   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":10797:10815   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10790:10852   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":10868:10886   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10861:10905   */\n      mstore\n        /* \"#utility.yul\":10922:10941   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3325:3526  require(... */\n    tag_274:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_273:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3548  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3551:3552  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3536:3552  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_276\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3596:3609  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3596:3616  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3562:3627  if (isTopLevelCall) {... */\n    tag_276:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2057:2085  __ERC20_init(_name, _symbol) */\n      tag_278\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2070:2075  _name */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2077:2084  _symbol */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2057:2069  __ERC20_init */\n      tag_279\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2057:2085  __ERC20_init(_name, _symbol) */\n      jump\t// in\n    tag_278:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2095:2111  __Ownable_init() */\n      tag_280\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2095:2109  __Ownable_init */\n      tag_281\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2095:2111  __Ownable_init() */\n      jump\t// in\n    tag_280:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2121:2145  __ReentrancyGuard_init() */\n      tag_282\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2121:2143  __ReentrancyGuard_init */\n      tag_283\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2121:2145  __ReentrancyGuard_init() */\n      jump\t// in\n    tag_282:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2155:2163  strategy */\n      0xcb\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2155:2175  strategy = _strategy */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2185:2198  approvalDelay */\n      0xcc\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2185:2215  approvalDelay = _approvalDelay */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3647:3746  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_284\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3697:3702  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3681:3702  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":6228:6264   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":6216:6218   */\n      0x20\n        /* \"#utility.yul\":6201:6219   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3721:3735  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3647:3746  if (isTopLevelCall) {... */\n    tag_284:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":1919:2222  function initialize(IStrategy _strategy, string memory _name, string memory _symbol, uint256 _approvalDelay) public initializer {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7498:7913  function proposeStrat(address _implementation) public onlyOwner {... */\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      tag_288\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1366  _checkOwner */\n      tag_289\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      jump\t// in\n    tag_288:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7607:7622  _implementation */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7597:7629  IStrategy(_implementation).vault */\n      and\n      0xfbfa77cf\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7597:7631  IStrategy(_implementation).vault() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_291\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_291:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_293\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_293:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_294\n      swap2\n      swap1\n      tag_295\n      jump\t// in\n    tag_294:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7580:7631  address(this) == IStrategy(_implementation).vault() */\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7588:7592  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7580:7631  address(this) == IStrategy(_implementation).vault() */\n      and\n      eq\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7572:7669  require(address(this) == IStrategy(_implementation).vault(), \"Proposal not valid for this Vault\") */\n      tag_296\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10337:10339   */\n      0x20\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7572:7669  require(address(this) == IStrategy(_implementation).vault(), \"Proposal not valid for this Vault\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10319:10340   */\n      mstore\n        /* \"#utility.yul\":10376:10378   */\n      0x21\n        /* \"#utility.yul\":10356:10374   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10349:10379   */\n      mstore\n        /* \"#utility.yul\":10415:10449   */\n      0x50726f706f73616c206e6f742076616c696420666f722074686973205661756c\n        /* \"#utility.yul\":10395:10413   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10388:10450   */\n      mstore\n      shl(0xfa, 0x1d)\n        /* \"#utility.yul\":10466:10484   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10459:10490   */\n      mstore\n        /* \"#utility.yul\":10507:10526   */\n      0x84\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7572:7669  require(address(this) == IStrategy(_implementation).vault(), \"Proposal not valid for this Vault\") */\n      tag_274\n        /* \"#utility.yul\":10309:10532   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7572:7669  require(address(this) == IStrategy(_implementation).vault(), \"Proposal not valid for this Vault\") */\n    tag_296:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7707:7722  _implementation */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7697:7728  IStrategy(_implementation).want */\n      and\n      0x1f1fcd51\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7697:7730  IStrategy(_implementation).want() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_299\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_299:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_301\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_301:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_302\n      swap2\n      swap1\n      tag_295\n      jump\t// in\n    tag_302:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7687:7730  want() == IStrategy(_implementation).want() */\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7687:7693  want() */\n      tag_303\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7687:7691  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7687:7693  want() */\n      jump\t// in\n    tag_303:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7687:7730  want() == IStrategy(_implementation).want() */\n      and\n      eq\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7679:7749  require(want() == IStrategy(_implementation).want(), \"Different want\") */\n      tag_304\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11154:11156   */\n      0x20\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7679:7749  require(want() == IStrategy(_implementation).want(), \"Different want\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11136:11157   */\n      mstore\n        /* \"#utility.yul\":11193:11195   */\n      0x0e\n        /* \"#utility.yul\":11173:11191   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11166:11196   */\n      mstore\n      shl(0x92, 0x111a5999995c995b9d081dd85b9d)\n        /* \"#utility.yul\":11212:11230   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11205:11249   */\n      mstore\n        /* \"#utility.yul\":11266:11284   */\n      0x64\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7679:7749  require(want() == IStrategy(_implementation).want(), \"Different want\") */\n      tag_274\n        /* \"#utility.yul\":11126:11290   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7679:7749  require(want() == IStrategy(_implementation).want(), \"Different want\") */\n    tag_304:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7776:7856  StratCandidate({implementation: _implementation, proposedTime: block.timestamp}) */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      dup3\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      dup1\n      dup3\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7839:7854  block.timestamp */\n      timestamp\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7776:7856  StratCandidate({implementation: _implementation, proposedTime: block.timestamp}) */\n      0x20\n      swap3\n      dup4\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7759:7773  stratCandidate */\n      0xc9\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7759:7856  stratCandidate = StratCandidate({implementation: _implementation, proposedTime: block.timestamp}) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      dup4\n      or\n      swap1\n      sstore\n      0xca\n      sstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7872:7906  NewStratCandidate(_implementation) */\n      swap2\n      mload\n        /* \"#utility.yul\":4703:4754   */\n      swap2\n      dup3\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7872:7906  NewStratCandidate(_implementation) */\n      0x1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df\n      swap2\n        /* \"#utility.yul\":4676:4694   */\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7872:7906  NewStratCandidate(_implementation) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7498:7913  function proposeStrat(address _implementation) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2085:2186  function renounceOwnership() public virtual onlyOwner {... */\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      tag_310\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1366  _checkOwner */\n      tag_289\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      jump\t// in\n    tag_310:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2149:2179  _transferOwnership(address(0)) */\n      tag_258\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2176:2177  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2149:2167  _transferOwnership */\n      tag_313\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2149:2179  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3352:3500  function getPricePerFullShare() public view returns (uint256) {... */\n    tag_120:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3405:3412  uint256 */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3431:3444  totalSupply() */\n      tag_315\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3431:3444  totalSupply() */\n    tag_315:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3431:3449  totalSupply() == 0 */\n      iszero\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3431:3493  totalSupply() == 0 ? 1e18 : (balance() * 1e18) / totalSupply() */\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3460:3469  balance() */\n      tag_318\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3460:3467  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3460:3469  balance() */\n      jump\t// in\n    tag_318:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3460:3476  balance() * 1e18 */\n      tag_319\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3472:3476  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3460:3476  balance() * 1e18 */\n      tag_219\n      jump\t// in\n    tag_319:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3459:3493  (balance() * 1e18) / totalSupply() */\n      tag_207\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3431:3493  totalSupply() == 0 ? 1e18 : (balance() * 1e18) / totalSupply() */\n    tag_316:\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3452:3456  1e18 */\n      0x0de0b6b3a7640000\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3352:3500  function getPricePerFullShare() public view returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6751:7334  function withdrawNative(uint256 _shares) public {... */\n    tag_125:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6809:6818  uint256 r */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6845:6858  totalSupply() */\n      tag_323\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6845:6858  totalSupply() */\n    tag_323:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6834:6841  _shares */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6822:6831  balance() */\n      tag_324\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6822:6829  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6822:6831  balance() */\n      jump\t// in\n    tag_324:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6822:6841  balance() * _shares */\n      tag_325\n      swap2\n      swap1\n      tag_219\n      jump\t// in\n    tag_325:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6821:6858  (balance() * _shares) / totalSupply() */\n      tag_326\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n    tag_326:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6809:6858  uint256 r = (balance() * _shares) / totalSupply() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6868:6894  _burn(msg.sender, _shares) */\n      tag_327\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6874:6884  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6886:6893  _shares */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6868:6873  _burn */\n      tag_223\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6868:6894  _burn(msg.sender, _shares) */\n      jump\t// in\n    tag_327:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6905:6911  uint b */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6920  want() */\n      tag_328\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6918  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6920  want() */\n      jump\t// in\n    tag_328:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6945  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6939:6943  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6945  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6930  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6914:6945  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_330\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_330:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_332\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_332:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_333\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_333:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6905:6945  uint b = want().balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6963:6964  r */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6959:6960  b */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6959:6964  b < r */\n      lt\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6955:7233  if (b < r) {... */\n      iszero\n      tag_334\n      jumpi\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6980:6994  uint _withdraw */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6997:7002  r - b */\n      tag_335\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7001:7002  b */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6997:6998  r */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6997:7002  r - b */\n      tag_233\n      jump\t// in\n    tag_335:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7016:7024  strategy */\n      sload(0xcb)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7016:7044  strategy.withdraw(_withdraw) */\n      mload(0x40)\n      shl(0xe0, 0x2e1a7d4d)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":15672:15697   */\n      dup4\n      swap1\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6980:7002  uint _withdraw = r - b */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7016:7024  strategy */\n      and\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7016:7033  strategy.withdraw */\n      0x2e1a7d4d\n      swap1\n        /* \"#utility.yul\":15645:15663   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7016:7044  strategy.withdraw(_withdraw) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_337\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_337:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_339\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_339:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7058:7069  uint _after */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7078  want() */\n      tag_340\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7076  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7078  want() */\n      jump\t// in\n    tag_340:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7103  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7097:7101  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7103  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7088  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7072:7103  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_342\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_342:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_344\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_344:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_345\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_345:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7058:7103  uint _after = want().balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7117:7127  uint _diff */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7130:7140  _after - b */\n      tag_346\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7139:7140  b */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7058:7103  uint _after = want().balanceOf(address(this)) */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7130:7140  _after - b */\n      tag_233\n      jump\t// in\n    tag_346:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7117:7140  uint _diff = _after - b */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7166:7175  _withdraw */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7158:7163  _diff */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7158:7175  _diff < _withdraw */\n      lt\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7154:7223  if (_diff < _withdraw) {... */\n      iszero\n      tag_347\n      jumpi\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7199:7208  b + _diff */\n      tag_348\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7203:7208  _diff */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7199:7200  b */\n      dup6\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7199:7208  b + _diff */\n      tag_247\n      jump\t// in\n    tag_348:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7195:7208  r = b + _diff */\n      swap5\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7154:7223  if (_diff < _withdraw) {... */\n    tag_347:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6955:7233  if (b < r) {... */\n      pop\n      pop\n      pop\n    tag_334:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7266:7272  want() */\n      tag_349\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7266:7270  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7266:7272  want() */\n      jump\t// in\n    tag_349:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7243:7283  IWrappedNative(address(want())).withdraw */\n      and\n      0x2e1a7d4d\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7284:7285  r */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7243:7286  IWrappedNative(address(want())).withdraw(r) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_350\n      swap2\n        /* \"#utility.yul\":15672:15697   */\n      dup2\n      mstore\n        /* \"#utility.yul\":15660:15662   */\n      0x20\n        /* \"#utility.yul\":15645:15663   */\n      add\n      swap1\n        /* \"#utility.yul\":15627:15703   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7243:7286  IWrappedNative(address(want())).withdraw(r) */\n    tag_350:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_351\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_351:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_353\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_353:\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7296:7327  payable(msg.sender).transfer(r) */\n      mload(0x40)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7304:7314  msg.sender */\n      caller\n      swap3\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7296:7327  payable(msg.sender).transfer(r) */\n      dup5\n      iszero\n      0x08fc\n      mul\n      swap2\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7325:7326  r */\n      dup5\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7296:7327  payable(msg.sender).transfer(r) */\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7325:7326  r */\n      dup6\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7304:7314  msg.sender */\n      dup9\n        /* \"contracts/vaults/PlexusVaultNative.sol\":7296:7327  payable(msg.sender).transfer(r) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_355\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_355:\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6751:7334  function withdrawNative(uint256 _shares) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5566:5646  function withdrawAll() external {... */\n    tag_128:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5627:5637  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3851:3858  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3886  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:3895  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5608:5639  withdraw(balanceOf(msg.sender)) */\n      tag_258\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n      tag_77\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2727:2829  function symbol() public view virtual override returns (string memory) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2783:2796  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2815:2822  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2808:2822  return _symbol */\n      dup1\n      sload\n      tag_191\n      swap1\n      tag_192\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6933:7360  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_141:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7026:7030  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7026:7030  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7132  allowance(owner, spender) */\n      tag_368\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7124:7131  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7116  allowance */\n      tag_170\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7107:7132  allowance(owner, spender) */\n      jump\t// in\n    tag_368:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7080:7132  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7170:7185  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7150:7166  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7150:7185  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_369\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14962:14964   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14944:14965   */\n      mstore\n        /* \"#utility.yul\":15001:15003   */\n      0x25\n        /* \"#utility.yul\":14981:14999   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14974:15004   */\n      mstore\n        /* \"#utility.yul\":15040:15074   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":15020:15038   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15013:15075   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":15091:15109   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15084:15119   */\n      mstore\n        /* \"#utility.yul\":15136:15155   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_274\n        /* \"#utility.yul\":14934:15161   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7142:7227  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_369:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7321  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_213\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7270:7275  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7277:7284  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7305:7320  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7286:7302  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7286:7320  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7269  _approve */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7261:7321  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4287  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_151:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4177:4181  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4259  _transfer(owner, to, amount) */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4248:4250  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4252:4258  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4240  _transfer */\n      tag_214\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4259  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2612:2747  function balance() public view returns (uint) {... */\n    tag_155:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2719:2727  strategy */\n      sload(0xcb)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2709:2740  IStrategy(strategy).balanceOf() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x722713f7)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2652:2656  uint */\n      0x00\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2719:2727  strategy */\n      and\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2709:2738  IStrategy(strategy).balanceOf */\n      0x722713f7\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2709:2740  IStrategy(strategy).balanceOf() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2719:2727  strategy */\n      dup7\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2709:2740  IStrategy(strategy).balanceOf() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_377\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_377:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_379\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_379:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_380\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_380:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2681  want() */\n      tag_381\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2679  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2681  want() */\n      jump\t// in\n    tag_381:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2706  want().balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2700:2704  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2706  want().balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2691  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2706  want().balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_383\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_383:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_385\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_385:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_386\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_386:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":2675:2740  want().balanceOf(address(this)) + IStrategy(strategy).balanceOf() */\n      tag_207\n      swap2\n      swap1\n      tag_247\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3880:4417  function deposit(uint _amount) public nonReentrant {... */\n    tag_160:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2547  _nonReentrantBefore() */\n      tag_389\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2545  _nonReentrantBefore */\n      tag_390\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2547  _nonReentrantBefore() */\n      jump\t// in\n    tag_389:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3941:3949  strategy */\n      0xcb\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3941:3963  strategy.beforeDeposit */\n      and\n      0x573fef0a\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3941:3965  strategy.beforeDeposit() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_392\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_392:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_394\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_394:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3976:3989  uint256 _pool */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3992:4001  balance() */\n      tag_395\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3992:3999  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3992:4001  balance() */\n      jump\t// in\n    tag_395:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3976:4001  uint256 _pool = balance() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4070  want().safeTransferFrom(msg.sender, address(this), _amount) */\n      tag_396\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4035:4045  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4055:4059  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4062:4069  _amount */\n      dup5\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4017  want() */\n      tag_397\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4015  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4017  want() */\n      jump\t// in\n    tag_397:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4034  want().safeTransferFrom */\n      and\n      swap3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4070  want().safeTransferFrom(msg.sender, address(this), _amount) */\n      swap2\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4034  want().safeTransferFrom */\n      tag_398\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4011:4070  want().safeTransferFrom(msg.sender, address(this), _amount) */\n      jump\t// in\n    tag_396:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4080:4086  earn() */\n      tag_399\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4080:4084  earn */\n      tag_163\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4080:4086  earn() */\n      jump\t// in\n    tag_399:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4096:4110  uint256 _after */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4113:4122  balance() */\n      tag_400\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4113:4120  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4113:4122  balance() */\n      jump\t// in\n    tag_400:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4096:4122  uint256 _after = balance() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4142:4156  _after - _pool */\n      tag_401\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4151:4156  _pool */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4096:4122  uint256 _after = balance() */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4142:4156  _after - _pool */\n      tag_233\n      jump\t// in\n    tag_401:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4132:4156  _amount = _after - _pool */\n      swap3\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4210:4224  uint256 shares */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4242:4255  totalSupply() */\n      tag_402\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4242:4255  totalSupply() */\n    tag_402:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4238:4376  if (totalSupply() == 0) {... */\n      tag_403\n      jumpi\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4285:4292  _amount */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4238:4376  if (totalSupply() == 0) {... */\n      jump(tag_404)\n    tag_403:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4360:4365  _pool */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4343:4356  totalSupply() */\n      tag_405\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4343:4356  totalSupply() */\n    tag_405:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4333:4356  _amount * totalSupply() */\n      tag_406\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4333:4340  _amount */\n      dup7\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4333:4356  _amount * totalSupply() */\n      tag_219\n      jump\t// in\n    tag_406:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4332:4365  (_amount * totalSupply()) / _pool */\n      tag_407\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n    tag_407:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4323:4365  shares = (_amount * totalSupply()) / _pool */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4238:4376  if (totalSupply() == 0) {... */\n    tag_404:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4385:4410  _mint(msg.sender, shares) */\n      tag_408\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4391:4401  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4403:4409  shares */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4385:4390  _mint */\n      tag_409\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4385:4410  _mint(msg.sender, shares) */\n      jump\t// in\n    tag_408:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2557:2558  _ */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2568:2588  _nonReentrantAfter() */\n      tag_410\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1808:1809  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3081  _status */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3096  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2894:3103  function _nonReentrantAfter() private {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2568:2588  _nonReentrantAfter() */\n    tag_410:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3880:4417  function deposit(uint _amount) public nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5321:5466  function earn() public {... */\n    tag_163:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5354:5363  uint _bal */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5366:5377  available() */\n      tag_413\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5366:5375  available */\n      tag_93\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5366:5377  available() */\n      jump\t// in\n    tag_413:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5415:5423  strategy */\n      sload(0xcb)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5354:5377  uint _bal = available() */\n      swap1\n      swap2\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5387:5431  want().safeTransfer(address(strategy), _bal) */\n      tag_414\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5415:5423  strategy */\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5354:5377  uint _bal = available() */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5387:5393  want() */\n      tag_249\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5387:5391  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5387:5393  want() */\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5387:5431  want().safeTransfer(address(strategy), _bal) */\n    tag_414:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5441:5449  strategy */\n      0xcb\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5441:5457  strategy.deposit */\n      and\n      0xd0e30db0\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5441:5459  strategy.deposit() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_416\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_416:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_284\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4586:5160  function depositNative() public payable nonReentrant {... */\n    tag_165:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2547  _nonReentrantBefore() */\n      tag_420\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2545  _nonReentrantBefore */\n      tag_390\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2526:2547  _nonReentrantBefore() */\n      jump\t// in\n    tag_420:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4649:4657  strategy */\n      0xcb\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4649:4671  strategy.beforeDeposit */\n      and\n      0x573fef0a\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4649:4673  strategy.beforeDeposit() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_422\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_422:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_424\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_424:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4684:4697  uint256 _pool */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4700:4709  balance() */\n      tag_425\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4700:4707  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4700:4709  balance() */\n      jump\t// in\n    tag_425:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4684:4709  uint256 _pool = balance() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4737:4746  msg.value */\n      callvalue\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4779:4785  want() */\n      tag_426\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4779:4783  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4779:4785  want() */\n      jump\t// in\n    tag_426:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4756:4795  IWrappedNative(address(want())).deposit */\n      and\n      0xd0e30db0\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4803:4810  _amount */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4756:4813  IWrappedNative(address(want())).deposit{value: _amount}() */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_427\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_427:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_429\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_429:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4823:4829  earn() */\n      tag_430\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4823:4827  earn */\n      tag_163\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4823:4829  earn() */\n      jump\t// in\n    tag_430:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4839:4853  uint256 _after */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4856:4865  balance() */\n      tag_431\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4856:4863  balance */\n      tag_155\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4856:4865  balance() */\n      jump\t// in\n    tag_431:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4839:4865  uint256 _after = balance() */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4885:4899  _after - _pool */\n      tag_432\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4894:4899  _pool */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4839:4865  uint256 _after = balance() */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4885:4899  _after - _pool */\n      tag_233\n      jump\t// in\n    tag_432:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4875:4899  _amount = _after - _pool */\n      swap2\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4953:4967  uint256 shares */\n      0x00\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4985:4998  totalSupply() */\n      tag_433\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4985:4998  totalSupply() */\n    tag_433:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4981:5119  if (totalSupply() == 0) {... */\n      tag_434\n      jumpi\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5028:5035  _amount */\n      dup2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4981:5119  if (totalSupply() == 0) {... */\n      jump(tag_435)\n    tag_434:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5103:5108  _pool */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5086:5099  totalSupply() */\n      tag_436\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3700:3712  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3613:3719  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5086:5099  totalSupply() */\n    tag_436:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5076:5099  _amount * totalSupply() */\n      tag_437\n      swap1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5076:5083  _amount */\n      dup6\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5076:5099  _amount * totalSupply() */\n      tag_219\n      jump\t// in\n    tag_437:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5075:5108  (_amount * totalSupply()) / _pool */\n      tag_438\n      swap2\n      swap1\n      tag_221\n      jump\t// in\n    tag_438:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5066:5108  shares = (_amount * totalSupply()) / _pool */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":4981:5119  if (totalSupply() == 0) {... */\n    tag_435:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5128:5153  _mint(msg.sender, shares) */\n      tag_439\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5134:5144  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5146:5152  shares */\n      dup3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5128:5133  _mint */\n      tag_409\n        /* \"contracts/vaults/PlexusVaultNative.sol\":5128:5153  _mint(msg.sender, shares) */\n      jump\t// in\n    tag_439:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2557:2558  _ */\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2568:2588  _nonReentrantAfter() */\n      tag_258\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1808:1809  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3081  _status */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3096  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2894:3103  function _nonReentrantAfter() private {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4434:4441  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4471  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4478  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4460:4487  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4345:4494  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3599:3684  function depositAll() external {... */\n    tag_174:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3640:3677  deposit(want().balanceOf(msg.sender)) */\n      tag_258\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3654  want() */\n      tag_444\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3652  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3654  want() */\n      jump\t// in\n    tag_444:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3676  want().balanceOf(msg.sender) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3665:3675  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3676  want().balanceOf(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3664  want().balanceOf */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":3648:3676  want().balanceOf(msg.sender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_446\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_446:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_448\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_448:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_159\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8807:9079  function inCaseTokensGetStuck(address _token) external onlyOwner {... */\n    tag_178:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      tag_451\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1366  _checkOwner */\n      tag_289\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      jump\t// in\n    tag_451:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8908:8914  want() */\n      tag_453\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8908:8912  want */\n      tag_64\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8908:8914  want() */\n      jump\t// in\n    tag_453:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8890:8915  _token != address(want()) */\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8890:8896  _token */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8890:8915  _token != address(want()) */\n      and\n      eq\n      iszero\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8882:8926  require(_token != address(want()), \"!token\") */\n      tag_454\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10003:10005   */\n      0x20\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8882:8926  require(_token != address(want()), \"!token\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9985:10006   */\n      mstore\n        /* \"#utility.yul\":10042:10043   */\n      0x06\n        /* \"#utility.yul\":10022:10040   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10015:10044   */\n      mstore\n      shl(0xd1, 0x10ba37b5b2b7)\n        /* \"#utility.yul\":10060:10078   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10053:10089   */\n      mstore\n        /* \"#utility.yul\":10106:10124   */\n      0x64\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8882:8926  require(_token != address(want()), \"!token\") */\n      tag_274\n        /* \"#utility.yul\":9975:10130   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8882:8926  require(_token != address(want()), \"!token\") */\n    tag_454:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8954:9004  IERC20Upgradeable(_token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8998:9002  this */\n      address\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8954:9004  IERC20Upgradeable(_token).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4703:4754   */\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8937:8951  uint256 amount */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8954:8989  IERC20Upgradeable(_token).balanceOf */\n      dup4\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":4676:4694   */\n      0x24\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8954:9004  IERC20Upgradeable(_token).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_458\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_458:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_460\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_460:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_461\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_461:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8937:9004  uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":9014:9072  IERC20Upgradeable(_token).safeTransfer(msg.sender, amount) */\n      tag_462\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":9014:9052  IERC20Upgradeable(_token).safeTransfer */\n      dup4\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":9053:9063  msg.sender */\n      caller\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8937:9004  uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this)) */\n      dup4\n        /* \"contracts/vaults/PlexusVaultNative.sol\":9014:9052  IERC20Upgradeable(_token).safeTransfer */\n      tag_250\n        /* \"contracts/vaults/PlexusVaultNative.sol\":9014:9072  IERC20Upgradeable(_token).safeTransfer(msg.sender, amount) */\n      jump\t// in\n    tag_462:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1378:1379  _ */\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8807:9079  function inCaseTokensGetStuck(address _token) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8153:8664  function upgradeStrat() public onlyOwner {... */\n    tag_185:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      tag_464\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1366  _checkOwner */\n      tag_289\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      jump\t// in\n    tag_464:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8212:8226  stratCandidate */\n      0xc9\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8212:8241  stratCandidate.implementation */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8204:8281  require(stratCandidate.implementation != address(0), \"There is no candidate\") */\n      tag_466\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12666:12668   */\n      0x20\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8204:8281  require(stratCandidate.implementation != address(0), \"There is no candidate\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12648:12669   */\n      mstore\n        /* \"#utility.yul\":12705:12707   */\n      0x15\n        /* \"#utility.yul\":12685:12703   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12678:12708   */\n      mstore\n      shl(0x58, 0x5468657265206973206e6f2063616e646964617465)\n        /* \"#utility.yul\":12724:12742   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12717:12768   */\n      mstore\n        /* \"#utility.yul\":12785:12803   */\n      0x64\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8204:8281  require(stratCandidate.implementation != address(0), \"There is no candidate\") */\n      tag_274\n        /* \"#utility.yul\":12638:12809   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8204:8281  require(stratCandidate.implementation != address(0), \"There is no candidate\") */\n    tag_466:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8329:8342  approvalDelay */\n      sload(0xcc)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8299:8326  stratCandidate.proposedTime */\n      sload(0xca)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8345:8360  block.timestamp */\n      timestamp\n      swap2\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8299:8342  stratCandidate.proposedTime + approvalDelay */\n      tag_469\n      swap2\n      tag_247\n      jump\t// in\n    tag_469:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8299:8360  stratCandidate.proposedTime + approvalDelay < block.timestamp */\n      lt\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8291:8385  require(stratCandidate.proposedTime + approvalDelay < block.timestamp, \"Delay has not passed\") */\n      tag_470\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9654:9656   */\n      0x20\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8291:8385  require(stratCandidate.proposedTime + approvalDelay < block.timestamp, \"Delay has not passed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9636:9657   */\n      mstore\n        /* \"#utility.yul\":9693:9695   */\n      0x14\n        /* \"#utility.yul\":9673:9691   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9666:9696   */\n      mstore\n      shl(0x62, 0x11195b185e481a185cc81b9bdd081c185cdcd959)\n        /* \"#utility.yul\":9712:9730   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9705:9755   */\n      mstore\n        /* \"#utility.yul\":9772:9790   */\n      0x64\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8291:8385  require(stratCandidate.proposedTime + approvalDelay < block.timestamp, \"Delay has not passed\") */\n      tag_274\n        /* \"#utility.yul\":9626:9796   */\n      jump\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8291:8385  require(stratCandidate.proposedTime + approvalDelay < block.timestamp, \"Delay has not passed\") */\n    tag_470:\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8414:8428  stratCandidate */\n      0xc9\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8414:8443  stratCandidate.implementation */\n      sload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8401:8444  UpgradeStrat(stratCandidate.implementation) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8414:8443  stratCandidate.implementation */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4703:4754   */\n      dup2\n      mstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8401:8444  UpgradeStrat(stratCandidate.implementation) */\n      0x7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c\n      swap1\n        /* \"#utility.yul\":4691:4693   */\n      0x20\n        /* \"#utility.yul\":4676:4694   */\n      add\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8401:8444  UpgradeStrat(stratCandidate.implementation) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8455:8463  strategy */\n      0xcb\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8455:8475  strategy.retireStrat */\n      and\n      0xfb617787\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8455:8477  strategy.retireStrat() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_474\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_474:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_476\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_476:\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8508:8522  stratCandidate */\n      0xc9\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8508:8537  stratCandidate.implementation */\n      dup1\n      sload\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8487:8495  strategy */\n      0xcb\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8487:8538  strategy = IStrategy(stratCandidate.implementation) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8508:8537  stratCandidate.implementation */\n      dup5\n      and\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8487:8538  strategy = IStrategy(stratCandidate.implementation) */\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8548:8590  stratCandidate.implementation = address(0) */\n      and\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8630:8640  5000000000 */\n      0x012a05f200\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8600:8627  stratCandidate.proposedTime */\n      0xca\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8600:8640  stratCandidate.proposedTime = 5000000000 */\n      sstore\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8651:8657  earn() */\n      tag_258\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8651:8655  earn */\n      tag_163\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8651:8657  earn() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2335:2533  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_189:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      tag_479\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1366  _checkOwner */\n      tag_289\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1355:1368  _checkOwner() */\n      jump\t// in\n    tag_479:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2423:2445  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2415:2488  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_481\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7672:7674   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2415:2488  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7654:7675   */\n      mstore\n        /* \"#utility.yul\":7711:7713   */\n      0x26\n        /* \"#utility.yul\":7691:7709   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7684:7714   */\n      mstore\n        /* \"#utility.yul\":7750:7784   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":7730:7748   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7723:7785   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":7801:7819   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7794:7830   */\n      mstore\n        /* \"#utility.yul\":7847:7866   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2415:2488  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_274\n        /* \"#utility.yul\":7644:7872   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2415:2488  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_481:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2498:2526  _transferOwnership(newOwner) */\n      tag_410\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2517:2525  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2498:2516  _transferOwnership */\n      tag_313\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2498:2526  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10815:11155  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_201:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10916:10935  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_487\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13016:13018   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12998:13019   */\n      mstore\n        /* \"#utility.yul\":13055:13057   */\n      0x24\n        /* \"#utility.yul\":13035:13053   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":13028:13058   */\n      mstore\n        /* \"#utility.yul\":13094:13128   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":13074:13092   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13067:13129   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":13145:13163   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13138:13172   */\n      mstore\n        /* \"#utility.yul\":13189:13208   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_274\n        /* \"#utility.yul\":12988:13214   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10908:10976  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_487:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10994:11015  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_490\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8079:8081   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8061:8082   */\n      mstore\n        /* \"#utility.yul\":8118:8120   */\n      0x22\n        /* \"#utility.yul\":8098:8116   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8091:8121   */\n      mstore\n        /* \"#utility.yul\":8157:8191   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":8137:8155   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8130:8192   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":8208:8226   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8201:8233   */\n      mstore\n        /* \"#utility.yul\":8250:8269   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_274\n        /* \"#utility.yul\":8051:8275   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10986:11054  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_490:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11083  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11076  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11083  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11092  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11065:11101  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":15672:15697   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":15645:15663   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11116:11148  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10815:11155  function _approve(address owner, address spender, uint256 amount) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11436:11847  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {... */\n    tag_212:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11536:11560  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11588  allowance(owner, spender) */\n      tag_495\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11573:11578  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11580:11587  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11572  allowance */\n      tag_170\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11563:11588  allowance(owner, spender) */\n      jump\t// in\n    tag_495:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11536:11588  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11602:11618  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11602:11639  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11598:11841  if (currentAllowance != type(uint256).max) {... */\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11683:11689  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11679  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11689  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_497\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8482:8484   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8464:8485   */\n      mstore\n        /* \"#utility.yul\":8521:8523   */\n      0x1d\n        /* \"#utility.yul\":8501:8519   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8494:8524   */\n      mstore\n        /* \"#utility.yul\":8560:8591   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":8540:8558   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8533:8592   */\n      mstore\n        /* \"#utility.yul\":8609:8627   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_274\n        /* \"#utility.yul\":8454:8633   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11655:11723  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_497:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11816  _approve(owner, spender, currentAllowance - amount) */\n      tag_355\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11774:11779  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11781:11788  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11809:11815  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11790:11806  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11790:11815  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11773  _approve */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11765:11816  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7814:8602  function _transfer(address from, address to, uint256 amount) internal virtual {... */\n    tag_214:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7910:7928  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_502\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12260:12262   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12242:12263   */\n      mstore\n        /* \"#utility.yul\":12299:12301   */\n      0x25\n        /* \"#utility.yul\":12279:12297   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12272:12302   */\n      mstore\n        /* \"#utility.yul\":12338:12372   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":12318:12336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12311:12373   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":12389:12407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12382:12417   */\n      mstore\n        /* \"#utility.yul\":12434:12453   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_274\n        /* \"#utility.yul\":12232:12459   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7902:7970  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_502:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7988:8004  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_505\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6865:6867   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6847:6868   */\n      mstore\n        /* \"#utility.yul\":6904:6906   */\n      0x23\n        /* \"#utility.yul\":6884:6902   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6877:6907   */\n      mstore\n        /* \"#utility.yul\":6943:6977   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":6923:6941   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6916:6978   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":6994:7012   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6987:7020   */\n      mstore\n        /* \"#utility.yul\":7037:7056   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_274\n        /* \"#utility.yul\":6837:7062   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7980:8044  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_505:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8104:8123  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8135  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8126:8141  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8159:8180  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_510\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8840:8842   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8822:8843   */\n      mstore\n        /* \"#utility.yul\":8879:8881   */\n      0x26\n        /* \"#utility.yul\":8859:8877   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8852:8882   */\n      mstore\n        /* \"#utility.yul\":8918:8952   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":8898:8916   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8891:8953   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":8969:8987   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8962:8998   */\n      mstore\n        /* \"#utility.yul\":9015:9034   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_274\n        /* \"#utility.yul\":8812:9040   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8151:8223  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_510:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8272  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8266  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8272  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8295  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8257:8295  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8472:8485  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8472:8495  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8521:8547  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_513\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8289:8295  amount */\n      dup7\n        /* \"#utility.yul\":15672:15697   */\n      dup2\n      mstore\n        /* \"#utility.yul\":15660:15662   */\n      0x20\n        /* \"#utility.yul\":15645:15663   */\n      add\n      swap1\n        /* \"#utility.yul\":15627:15703   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8521:8547  Transfer(from, to, amount) */\n    tag_513:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8558:8595  _afterTokenTransfer(from, to, amount) */\n      tag_355\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9733:10392  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_223:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9816:9837  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9808:9875  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_517\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11858:11860   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9808:9875  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11840:11861   */\n      mstore\n        /* \"#utility.yul\":11897:11899   */\n      0x21\n        /* \"#utility.yul\":11877:11895   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11870:11900   */\n      mstore\n        /* \"#utility.yul\":11936:11970   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":11916:11934   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11909:11971   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":11987:12005   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11980:12011   */\n      mstore\n        /* \"#utility.yul\":12028:12047   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9808:9875  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_274\n        /* \"#utility.yul\":11830:12053   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9808:9875  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_517:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9971:9989  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9946:9968  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9971:9989  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9971:9980  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9971:9989  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10007:10031  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9999:10070  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_521\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7269:7271   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9999:10070  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7251:7272   */\n      mstore\n        /* \"#utility.yul\":7308:7310   */\n      0x22\n        /* \"#utility.yul\":7288:7306   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7281:7311   */\n      mstore\n        /* \"#utility.yul\":7347:7381   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":7327:7345   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7320:7382   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":7398:7416   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7391:7423   */\n      mstore\n        /* \"#utility.yul\":7440:7459   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9999:10070  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_274\n        /* \"#utility.yul\":7241:7465   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9999:10070  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_521:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10104:10122  _balances[account] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10104:10113  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10104:10122  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10125:10148  accountBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10104:10148  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10241:10253  _totalSupply */\n      0x35\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10241:10263  _totalSupply -= amount */\n      dup1\n      sload\n      dup8\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10289:10326  Transfer(account, address(0), amount) */\n      mload\n        /* \"#utility.yul\":15672:15697   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10104:10122  _balances[account] */\n      swap2\n      swap3\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10289:10326  Transfer(account, address(0), amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":15645:15663   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10289:10326  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/vaults/PlexusVaultNative.sol\":6071:6598  function withdraw(uint256 _shares) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":996:1182  function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {... */\n    tag_250:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1174  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5337:5369   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1174  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5319:5370   */\n      mstore\n        /* \"#utility.yul\":5386:5404   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":5379:5413   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1089:1175  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_248\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1109:1114  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1139:1162  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":5292:5310   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1174  abi.encodeWithSelector(token.transfer.selector, to, value) */\n    tag_528:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1089:1108  _callOptionalReturn */\n      tag_529\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1089:1175  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2139:2286  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_279:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_532\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n    tag_532:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2241:2279  __ERC20_init_unchained(name_, symbol_) */\n      tag_462\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2264:2269  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2278  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2241:2263  __ERC20_init_unchained */\n      tag_537\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2241:2279  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1024:1119  function __Ownable_init() internal onlyInitializing {... */\n    tag_281:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_539\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n    tag_539:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1086:1112  __Ownable_init_unchained() */\n      tag_258\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1086:1110  __Ownable_init_unchained */\n      tag_543\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1086:1112  __Ownable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1889:2000  function __ReentrancyGuard_init() internal onlyInitializing {... */\n    tag_283:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_545\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n    tag_545:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1959:1993  __ReentrancyGuard_init_unchained() */\n      tag_258\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1959:1991  __ReentrancyGuard_init_unchained */\n      tag_549\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1959:1993  __ReentrancyGuard_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1620:1750  function _checkOwner() internal view virtual {... */\n    tag_289:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1534:1540  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1683:1706  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1675:1743  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_258\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11497:11499   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1675:1743  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11479:11500   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":11516:11534   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11509:11539   */\n      mstore\n        /* \"#utility.yul\":11575:11609   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":11555:11573   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11548:11610   */\n      mstore\n        /* \"#utility.yul\":11627:11645   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1675:1743  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_274\n        /* \"#utility.yul\":11469:11651   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2687:2874  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_313:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2779:2785  _owner */\n      0x65\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2795:2812  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2827:2867  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2779:2785  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2795:2812  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2779:2785  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2827:2867  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2760:2776  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2827:2867  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2687:2874  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2601:2888  function _nonReentrantBefore() private {... */\n    tag_390:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1851:1852  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2733:2740  _status */\n      sload(0x97)\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2733:2752  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2725:2788  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_558\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14602:14604   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2725:2788  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14584:14605   */\n      mstore\n        /* \"#utility.yul\":14641:14643   */\n      0x1f\n        /* \"#utility.yul\":14621:14639   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14614:14644   */\n      mstore\n        /* \"#utility.yul\":14680:14713   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":14660:14678   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14653:14714   */\n      mstore\n        /* \"#utility.yul\":14731:14749   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2725:2788  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_274\n        /* \"#utility.yul\":14574:14755   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2725:2788  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_558:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1851:1852  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2863:2870  _status */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2863:2881  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2601:2888  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1421:1635  function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {... */\n    tag_398:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1559:1627  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5023:5038   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1559:1627  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":5005:5039   */\n      mstore\n        /* \"#utility.yul\":5075:5090   */\n      dup4\n      and\n        /* \"#utility.yul\":5055:5073   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5048:5091   */\n      mstore\n        /* \"#utility.yul\":5107:5125   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":5100:5134   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1532:1628  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_355\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1552:1557  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1582:1609  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":4940:4958   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1559:1627  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      tag_528\n        /* \"#utility.yul\":4922:5140   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8878:9413  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_409:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8961:8982  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8953:9018  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_566\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15368:15370   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8953:9018  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15350:15371   */\n      mstore\n        /* \"#utility.yul\":15407:15409   */\n      0x1f\n        /* \"#utility.yul\":15387:15405   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15380:15410   */\n      mstore\n        /* \"#utility.yul\":15446:15479   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":15426:15444   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15419:15480   */\n      mstore\n        /* \"#utility.yul\":15497:15515   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8953:9018  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_274\n        /* \"#utility.yul\":15340:15521   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8953:9018  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_566:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9105:9111  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9089:9101  _totalSupply */\n      0x35\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9089:9111  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_570\n      swap2\n      swap1\n      tag_247\n      jump\t// in\n    tag_570:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9257:9275  _balances[account] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9257:9266  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9257:9275  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9257:9285  _balances[account] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9310:9347  Transfer(address(0), account, amount) */\n      mload\n        /* \"#utility.yul\":15672:15697   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9310:9347  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":15645:15663   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9310:9347  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1378:1379  _ */\n      pop\n        /* \"contracts/vaults/PlexusVaultNative.sol\":8807:9079  function inCaseTokensGetStuck(address _token) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2894:3103  function _nonReentrantAfter() private {... */\n    tag_411:\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":1808:1809  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3081  _status */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":3074:3096  _status = _NOT_ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2894:3103  function _nonReentrantAfter() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5328:5981  function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {... */\n    tag_529:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5758:5781  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5784:5853  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_577\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5812:5816  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5784:5853  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5792:5797  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5784:5811  address(token).functionCall */\n      and\n      tag_578\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5784:5853  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_577:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5758:5853  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5871:5881  returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5871:5888  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5892:5893  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5871:5893  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5871:5927  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_580\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5908:5918  returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5897:5927  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_580\n      swap2\n      swap1\n      tag_581\n      jump\t// in\n    tag_580:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5863:5974  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_248\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14191:14193   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5863:5974  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14173:14194   */\n      mstore\n        /* \"#utility.yul\":14230:14232   */\n      0x2a\n        /* \"#utility.yul\":14210:14228   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14203:14233   */\n      mstore\n        /* \"#utility.yul\":14269:14303   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":14249:14267   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14242:14304   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":14320:14338   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14313:14353   */\n      mstore\n        /* \"#utility.yul\":14370:14389   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":5863:5974  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_274\n        /* \"#utility.yul\":14163:14395   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2292:2451  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_537:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_586\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n    tag_586:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2417  _name = name_ */\n      dup2\n      mload\n      tag_589\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2409  _name */\n      0x36\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2417  _name = name_ */\n      0x20\n      dup6\n      add\n      swap1\n      tag_590\n      jump\t// in\n    tag_589:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2427:2444  _symbol = symbol_ */\n      dup1\n      mload\n      tag_248\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2427:2434  _symbol */\n      0x37\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2427:2444  _symbol = symbol_ */\n      0x20\n      dup5\n      add\n      swap1\n      tag_590\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1125:1236  function __Ownable_init_unchained() internal onlyInitializing {... */\n    tag_543:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_593\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n    tag_593:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1197:1229  _transferOwnership(_msgSender()) */\n      tag_258\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":965:975  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1197:1215  _transferOwnership */\n      tag_313\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1197:1229  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":2006:2115  function __ReentrancyGuard_init_unchained() internal onlyInitializing {... */\n    tag_549:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5374:5387  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5366:5435  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_411\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap1\n      tag_534\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4119:4342  function functionCall(... */\n    tag_578:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4252:4264  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4283:4335  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_603\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4305:4311  target */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4313:4317  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4319:4320  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4322:4334  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4283:4304  functionCallWithValue */\n      tag_604\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4283:4335  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_603:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4276:4335  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4119:4342  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5176:5622  function functionCallWithValue(... */\n    tag_604:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5341:5353  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5398:5403  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5373:5394  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5373:5403  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5365:5446  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_606\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9247:9249   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5365:5446  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9229:9250   */\n      mstore\n        /* \"#utility.yul\":9286:9288   */\n      0x26\n        /* \"#utility.yul\":9266:9284   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9259:9289   */\n      mstore\n        /* \"#utility.yul\":9325:9359   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":9305:9323   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9298:9360   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":9376:9394   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9369:9405   */\n      mstore\n        /* \"#utility.yul\":9422:9441   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5365:5446  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_274\n        /* \"#utility.yul\":9219:9447   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5365:5446  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_606:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5457:5469  bool success */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5471:5494  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5498:5504  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5498:5509  target.call */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5517:5522  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5524:5528  data */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5498:5529  target.call{value: value}(data) */\n      mload(0x40)\n      tag_609\n      swap2\n      swap1\n      tag_610\n      jump\t// in\n    tag_609:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_613\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_612)\n    tag_613:\n      0x60\n      swap2\n      pop\n    tag_612:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5456:5529  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5546:5615  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_614\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5573:5579  target */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5581:5588  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5590:5600  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5602:5614  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5546:5572  verifyCallResultFromTarget */\n      tag_615\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5546:5615  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_614:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5539:5615  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5176:5622  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7682:8310  function verifyCallResultFromTarget(... */\n    tag_615:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7862:7874  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7890:7897  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7886:8304  if (success) {... */\n      iszero\n      tag_617\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7917:7934  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7913:8199  if (returndata.length == 0) {... */\n      tag_620\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1713:1732  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      tag_620\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13421:13423   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13403:13424   */\n      mstore\n        /* \"#utility.yul\":13460:13462   */\n      0x1d\n        /* \"#utility.yul\":13440:13458   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13433:13463   */\n      mstore\n        /* \"#utility.yul\":13499:13530   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":13479:13497   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13472:13531   */\n      mstore\n        /* \"#utility.yul\":13548:13566   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n      tag_274\n        /* \"#utility.yul\":13393:13572   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8124:8184  require(isContract(target), \"Address: call to non-contract\") */\n    tag_620:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8219:8229  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8212:8229  return returndata */\n      jump(tag_603)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7886:8304  if (success) {... */\n    tag_617:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8260:8293  _revert(returndata, errorMessage) */\n      tag_603\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8268:8278  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8280:8292  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8991:9008  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8991:9012  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":8987:9366  if (returndata.length > 0) {... */\n      tag_627\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9219:9229  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9213:9230  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9275:9290  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9262:9272  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9258:9260  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9254:9273  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9247:9291  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9172:9305  {... */\n    tag_627:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9342:9354  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":9335:9355  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_274\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_590:\n      dup3\n      dup1\n      sload\n      tag_630\n      swap1\n      tag_192\n      jump\t// in\n    tag_630:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_632\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_635)\n    tag_632:\n      dup3\n      0x1f\n      lt\n      tag_633\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_635)\n    tag_633:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_635\n      jumpi\n      swap2\n      dup3\n      add\n    tag_634:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_635\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_634)\n    tag_635:\n      pop\n      tag_636\n      swap3\n      swap2\n      pop\n      tag_637\n      jump\t// in\n    tag_636:\n      pop\n      swap1\n      jump\t// out\n    tag_637:\n    tag_638:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_636\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_638)\n        /* \"#utility.yul\":14:753   */\n    tag_641:\n        /* \"#utility.yul\":57:62   */\n      0x00\n        /* \"#utility.yul\":110:113   */\n      dup3\n        /* \"#utility.yul\":103:107   */\n      0x1f\n        /* \"#utility.yul\":95:101   */\n      dup4\n        /* \"#utility.yul\":91:108   */\n      add\n        /* \"#utility.yul\":87:114   */\n      slt\n        /* \"#utility.yul\":77:79   */\n      tag_643\n      jumpi\n        /* \"#utility.yul\":132:137   */\n      dup1\n        /* \"#utility.yul\":125:130   */\n      dup2\n        /* \"#utility.yul\":118:138   */\n      revert\n        /* \"#utility.yul\":77:79   */\n    tag_643:\n        /* \"#utility.yul\":172:178   */\n      dup2\n        /* \"#utility.yul\":159:179   */\n      calldataload\n        /* \"#utility.yul\":198:216   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":235:237   */\n      dup1\n        /* \"#utility.yul\":231:233   */\n      dup3\n        /* \"#utility.yul\":228:238   */\n      gt\n        /* \"#utility.yul\":225:227   */\n      iszero\n      tag_645\n      jumpi\n        /* \"#utility.yul\":241:259   */\n      tag_645\n      tag_646\n      jump\t// in\n    tag_645:\n        /* \"#utility.yul\":316:318   */\n      0x40\n        /* \"#utility.yul\":310:319   */\n      mload\n        /* \"#utility.yul\":284:286   */\n      0x1f\n        /* \"#utility.yul\":370:383   */\n      dup4\n      add\n      not(0x1f)\n        /* \"#utility.yul\":366:388   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":390:392   */\n      0x3f\n        /* \"#utility.yul\":362:393   */\n      add\n        /* \"#utility.yul\":358:398   */\n      and\n        /* \"#utility.yul\":346:399   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":414:432   */\n      dup3\n      dup3\n      gt\n        /* \"#utility.yul\":434:456   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":411:457   */\n      or\n        /* \"#utility.yul\":408:410   */\n      iszero\n      tag_648\n      jumpi\n        /* \"#utility.yul\":460:478   */\n      tag_648\n      tag_646\n      jump\t// in\n    tag_648:\n        /* \"#utility.yul\":500:510   */\n      dup2\n        /* \"#utility.yul\":496:498   */\n      0x40\n        /* \"#utility.yul\":489:511   */\n      mstore\n        /* \"#utility.yul\":535:537   */\n      dup4\n        /* \"#utility.yul\":527:533   */\n      dup2\n        /* \"#utility.yul\":520:538   */\n      mstore\n        /* \"#utility.yul\":581:584   */\n      dup7\n        /* \"#utility.yul\":574:578   */\n      0x20\n        /* \"#utility.yul\":569:571   */\n      dup6\n        /* \"#utility.yul\":561:567   */\n      dup9\n        /* \"#utility.yul\":557:572   */\n      add\n        /* \"#utility.yul\":553:579   */\n      add\n        /* \"#utility.yul\":550:585   */\n      gt\n        /* \"#utility.yul\":547:549   */\n      iszero\n      tag_649\n      jumpi\n        /* \"#utility.yul\":602:607   */\n      dup5\n        /* \"#utility.yul\":595:600   */\n      dup6\n        /* \"#utility.yul\":588:608   */\n      revert\n        /* \"#utility.yul\":547:549   */\n    tag_649:\n        /* \"#utility.yul\":670:672   */\n      dup4\n        /* \"#utility.yul\":663:667   */\n      0x20\n        /* \"#utility.yul\":655:661   */\n      dup8\n        /* \"#utility.yul\":651:668   */\n      add\n        /* \"#utility.yul\":644:648   */\n      0x20\n        /* \"#utility.yul\":636:642   */\n      dup4\n        /* \"#utility.yul\":632:649   */\n      add\n        /* \"#utility.yul\":619:673   */\n      calldatacopy\n        /* \"#utility.yul\":693:708   */\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":710:714   */\n      0x20\n        /* \"#utility.yul\":689:715   */\n      add\n        /* \"#utility.yul\":682:723   */\n      swap4\n      swap1\n      swap4\n      mstore\n      pop\n        /* \"#utility.yul\":697:703   */\n      swap4\n        /* \"#utility.yul\":67:753   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1015   */\n    tag_103:\n        /* \"#utility.yul\":817:823   */\n      0x00\n        /* \"#utility.yul\":870:872   */\n      0x20\n        /* \"#utility.yul\":858:867   */\n      dup3\n        /* \"#utility.yul\":849:856   */\n      dup5\n        /* \"#utility.yul\":845:868   */\n      sub\n        /* \"#utility.yul\":841:873   */\n      slt\n        /* \"#utility.yul\":838:840   */\n      iszero\n      tag_651\n      jumpi\n        /* \"#utility.yul\":891:897   */\n      dup1\n        /* \"#utility.yul\":883:889   */\n      dup2\n        /* \"#utility.yul\":876:898   */\n      revert\n        /* \"#utility.yul\":838:840   */\n    tag_651:\n        /* \"#utility.yul\":935:944   */\n      dup2\n        /* \"#utility.yul\":922:945   */\n      calldataload\n        /* \"#utility.yul\":954:985   */\n      tag_652\n        /* \"#utility.yul\":979:984   */\n      dup2\n        /* \"#utility.yul\":954:985   */\n      tag_653\n      jump\t// in\n    tag_652:\n        /* \"#utility.yul\":1004:1009   */\n      swap4\n        /* \"#utility.yul\":828:1015   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1020:1281   */\n    tag_295:\n        /* \"#utility.yul\":1090:1096   */\n      0x00\n        /* \"#utility.yul\":1143:1145   */\n      0x20\n        /* \"#utility.yul\":1131:1140   */\n      dup3\n        /* \"#utility.yul\":1122:1129   */\n      dup5\n        /* \"#utility.yul\":1118:1141   */\n      sub\n        /* \"#utility.yul\":1114:1146   */\n      slt\n        /* \"#utility.yul\":1111:1113   */\n      iszero\n      tag_655\n      jumpi\n        /* \"#utility.yul\":1164:1170   */\n      dup1\n        /* \"#utility.yul\":1156:1162   */\n      dup2\n        /* \"#utility.yul\":1149:1171   */\n      revert\n        /* \"#utility.yul\":1111:1113   */\n    tag_655:\n        /* \"#utility.yul\":1201:1210   */\n      dup2\n        /* \"#utility.yul\":1195:1211   */\n      mload\n        /* \"#utility.yul\":1220:1251   */\n      tag_652\n        /* \"#utility.yul\":1245:1250   */\n      dup2\n        /* \"#utility.yul\":1220:1251   */\n      tag_653\n      jump\t// in\n        /* \"#utility.yul\":1286:1684   */\n    tag_169:\n        /* \"#utility.yul\":1354:1360   */\n      0x00\n        /* \"#utility.yul\":1362:1368   */\n      dup1\n        /* \"#utility.yul\":1415:1417   */\n      0x40\n        /* \"#utility.yul\":1403:1412   */\n      dup4\n        /* \"#utility.yul\":1394:1401   */\n      dup6\n        /* \"#utility.yul\":1390:1413   */\n      sub\n        /* \"#utility.yul\":1386:1418   */\n      slt\n        /* \"#utility.yul\":1383:1385   */\n      iszero\n      tag_658\n      jumpi\n        /* \"#utility.yul\":1436:1442   */\n      dup1\n        /* \"#utility.yul\":1428:1434   */\n      dup2\n        /* \"#utility.yul\":1421:1443   */\n      revert\n        /* \"#utility.yul\":1383:1385   */\n    tag_658:\n        /* \"#utility.yul\":1480:1489   */\n      dup3\n        /* \"#utility.yul\":1467:1490   */\n      calldataload\n        /* \"#utility.yul\":1499:1530   */\n      tag_659\n        /* \"#utility.yul\":1524:1529   */\n      dup2\n        /* \"#utility.yul\":1499:1530   */\n      tag_653\n      jump\t// in\n    tag_659:\n        /* \"#utility.yul\":1549:1554   */\n      swap2\n      pop\n        /* \"#utility.yul\":1606:1608   */\n      0x20\n        /* \"#utility.yul\":1591:1609   */\n      dup4\n      add\n        /* \"#utility.yul\":1578:1610   */\n      calldataload\n        /* \"#utility.yul\":1619:1652   */\n      tag_660\n        /* \"#utility.yul\":1578:1610   */\n      dup2\n        /* \"#utility.yul\":1619:1652   */\n      tag_653\n      jump\t// in\n    tag_660:\n        /* \"#utility.yul\":1671:1678   */\n      dup1\n        /* \"#utility.yul\":1661:1678   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1373:1684   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1689:2155   */\n    tag_70:\n        /* \"#utility.yul\":1766:1772   */\n      0x00\n        /* \"#utility.yul\":1774:1780   */\n      dup1\n        /* \"#utility.yul\":1782:1788   */\n      0x00\n        /* \"#utility.yul\":1835:1837   */\n      0x60\n        /* \"#utility.yul\":1823:1832   */\n      dup5\n        /* \"#utility.yul\":1814:1821   */\n      dup7\n        /* \"#utility.yul\":1810:1833   */\n      sub\n        /* \"#utility.yul\":1806:1838   */\n      slt\n        /* \"#utility.yul\":1803:1805   */\n      iszero\n      tag_662\n      jumpi\n        /* \"#utility.yul\":1856:1862   */\n      dup1\n        /* \"#utility.yul\":1848:1854   */\n      dup2\n        /* \"#utility.yul\":1841:1863   */\n      revert\n        /* \"#utility.yul\":1803:1805   */\n    tag_662:\n        /* \"#utility.yul\":1900:1909   */\n      dup4\n        /* \"#utility.yul\":1887:1910   */\n      calldataload\n        /* \"#utility.yul\":1919:1950   */\n      tag_663\n        /* \"#utility.yul\":1944:1949   */\n      dup2\n        /* \"#utility.yul\":1919:1950   */\n      tag_653\n      jump\t// in\n    tag_663:\n        /* \"#utility.yul\":1969:1974   */\n      swap3\n      pop\n        /* \"#utility.yul\":2026:2028   */\n      0x20\n        /* \"#utility.yul\":2011:2029   */\n      dup5\n      add\n        /* \"#utility.yul\":1998:2030   */\n      calldataload\n        /* \"#utility.yul\":2039:2072   */\n      tag_664\n        /* \"#utility.yul\":1998:2030   */\n      dup2\n        /* \"#utility.yul\":2039:2072   */\n      tag_653\n      jump\t// in\n    tag_664:\n        /* \"#utility.yul\":1793:2155   */\n      swap3\n      swap6\n        /* \"#utility.yul\":2091:2098   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2145:2147   */\n      0x40\n        /* \"#utility.yul\":2130:2148   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2117:2149   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1793:2155   */\n      jump\t// out\n        /* \"#utility.yul\":2160:2485   */\n    tag_53:\n        /* \"#utility.yul\":2228:2234   */\n      0x00\n        /* \"#utility.yul\":2236:2242   */\n      dup1\n        /* \"#utility.yul\":2289:2291   */\n      0x40\n        /* \"#utility.yul\":2277:2286   */\n      dup4\n        /* \"#utility.yul\":2268:2275   */\n      dup6\n        /* \"#utility.yul\":2264:2287   */\n      sub\n        /* \"#utility.yul\":2260:2292   */\n      slt\n        /* \"#utility.yul\":2257:2259   */\n      iszero\n      tag_666\n      jumpi\n        /* \"#utility.yul\":2310:2316   */\n      dup2\n        /* \"#utility.yul\":2302:2308   */\n      dup3\n        /* \"#utility.yul\":2295:2317   */\n      revert\n        /* \"#utility.yul\":2257:2259   */\n    tag_666:\n        /* \"#utility.yul\":2354:2363   */\n      dup3\n        /* \"#utility.yul\":2341:2364   */\n      calldataload\n        /* \"#utility.yul\":2373:2404   */\n      tag_667\n        /* \"#utility.yul\":2398:2403   */\n      dup2\n        /* \"#utility.yul\":2373:2404   */\n      tag_653\n      jump\t// in\n    tag_667:\n        /* \"#utility.yul\":2423:2428   */\n      swap5\n        /* \"#utility.yul\":2475:2477   */\n      0x20\n        /* \"#utility.yul\":2460:2478   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2447:2479   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2247:2485   */\n      jump\t// out\n        /* \"#utility.yul\":2490:2787   */\n    tag_581:\n        /* \"#utility.yul\":2557:2563   */\n      0x00\n        /* \"#utility.yul\":2610:2612   */\n      0x20\n        /* \"#utility.yul\":2598:2607   */\n      dup3\n        /* \"#utility.yul\":2589:2596   */\n      dup5\n        /* \"#utility.yul\":2585:2608   */\n      sub\n        /* \"#utility.yul\":2581:2613   */\n      slt\n        /* \"#utility.yul\":2578:2580   */\n      iszero\n      tag_669\n      jumpi\n        /* \"#utility.yul\":2631:2637   */\n      dup1\n        /* \"#utility.yul\":2623:2629   */\n      dup2\n        /* \"#utility.yul\":2616:2638   */\n      revert\n        /* \"#utility.yul\":2578:2580   */\n    tag_669:\n        /* \"#utility.yul\":2668:2677   */\n      dup2\n        /* \"#utility.yul\":2662:2678   */\n      mload\n        /* \"#utility.yul\":2721:2726   */\n      dup1\n        /* \"#utility.yul\":2714:2727   */\n      iszero\n        /* \"#utility.yul\":2707:2728   */\n      iszero\n        /* \"#utility.yul\":2700:2705   */\n      dup2\n        /* \"#utility.yul\":2697:2729   */\n      eq\n        /* \"#utility.yul\":2687:2689   */\n      tag_652\n      jumpi\n        /* \"#utility.yul\":2748:2754   */\n      dup2\n        /* \"#utility.yul\":2740:2746   */\n      dup3\n        /* \"#utility.yul\":2733:2755   */\n      revert\n        /* \"#utility.yul\":3084:3879   */\n    tag_98:\n        /* \"#utility.yul\":3208:3214   */\n      0x00\n        /* \"#utility.yul\":3216:3222   */\n      dup1\n        /* \"#utility.yul\":3224:3230   */\n      0x00\n        /* \"#utility.yul\":3232:3238   */\n      dup1\n        /* \"#utility.yul\":3285:3288   */\n      0x80\n        /* \"#utility.yul\":3273:3282   */\n      dup6\n        /* \"#utility.yul\":3264:3271   */\n      dup8\n        /* \"#utility.yul\":3260:3283   */\n      sub\n        /* \"#utility.yul\":3256:3289   */\n      slt\n        /* \"#utility.yul\":3253:3255   */\n      iszero\n      tag_675\n      jumpi\n        /* \"#utility.yul\":3307:3313   */\n      dup1\n        /* \"#utility.yul\":3299:3305   */\n      dup2\n        /* \"#utility.yul\":3292:3314   */\n      revert\n        /* \"#utility.yul\":3253:3255   */\n    tag_675:\n        /* \"#utility.yul\":3351:3360   */\n      dup5\n        /* \"#utility.yul\":3338:3361   */\n      calldataload\n        /* \"#utility.yul\":3370:3401   */\n      tag_676\n        /* \"#utility.yul\":3395:3400   */\n      dup2\n        /* \"#utility.yul\":3370:3401   */\n      tag_653\n      jump\t// in\n    tag_676:\n        /* \"#utility.yul\":3420:3425   */\n      swap4\n      pop\n        /* \"#utility.yul\":3476:3478   */\n      0x20\n        /* \"#utility.yul\":3461:3479   */\n      dup6\n      add\n        /* \"#utility.yul\":3448:3480   */\n      calldataload\n        /* \"#utility.yul\":3499:3517   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3529:3543   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3526:3528   */\n      iszero\n      tag_677\n      jumpi\n        /* \"#utility.yul\":3561:3567   */\n      dup3\n        /* \"#utility.yul\":3553:3559   */\n      dup4\n        /* \"#utility.yul\":3546:3568   */\n      revert\n        /* \"#utility.yul\":3526:3528   */\n    tag_677:\n        /* \"#utility.yul\":3589:3639   */\n      tag_678\n        /* \"#utility.yul\":3631:3638   */\n      dup9\n        /* \"#utility.yul\":3622:3628   */\n      dup4\n        /* \"#utility.yul\":3611:3620   */\n      dup10\n        /* \"#utility.yul\":3607:3629   */\n      add\n        /* \"#utility.yul\":3589:3639   */\n      tag_641\n      jump\t// in\n    tag_678:\n        /* \"#utility.yul\":3579:3639   */\n      swap5\n      pop\n        /* \"#utility.yul\":3692:3694   */\n      0x40\n        /* \"#utility.yul\":3681:3690   */\n      dup8\n        /* \"#utility.yul\":3677:3695   */\n      add\n        /* \"#utility.yul\":3664:3696   */\n      calldataload\n        /* \"#utility.yul\":3648:3696   */\n      swap2\n      pop\n        /* \"#utility.yul\":3721:3723   */\n      dup1\n        /* \"#utility.yul\":3711:3719   */\n      dup3\n        /* \"#utility.yul\":3708:3724   */\n      gt\n        /* \"#utility.yul\":3705:3707   */\n      iszero\n      tag_679\n      jumpi\n        /* \"#utility.yul\":3742:3748   */\n      dup3\n        /* \"#utility.yul\":3734:3740   */\n      dup4\n        /* \"#utility.yul\":3727:3749   */\n      revert\n        /* \"#utility.yul\":3705:3707   */\n    tag_679:\n      pop\n        /* \"#utility.yul\":3770:3822   */\n      tag_680\n        /* \"#utility.yul\":3814:3821   */\n      dup8\n        /* \"#utility.yul\":3803:3811   */\n      dup3\n        /* \"#utility.yul\":3792:3801   */\n      dup9\n        /* \"#utility.yul\":3788:3812   */\n      add\n        /* \"#utility.yul\":3770:3822   */\n      tag_641\n      jump\t// in\n    tag_680:\n        /* \"#utility.yul\":3243:3879   */\n      swap5\n      swap8\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":3760:3822   */\n      swap4\n      swap5\n        /* \"#utility.yul\":3869:3871   */\n      0x60\n        /* \"#utility.yul\":3854:3872   */\n      add\n        /* \"#utility.yul\":3841:3873   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3243:3879   */\n      jump\t// out\n        /* \"#utility.yul\":3884:4074   */\n    tag_76:\n        /* \"#utility.yul\":3943:3949   */\n      0x00\n        /* \"#utility.yul\":3996:3998   */\n      0x20\n        /* \"#utility.yul\":3984:3993   */\n      dup3\n        /* \"#utility.yul\":3975:3982   */\n      dup5\n        /* \"#utility.yul\":3971:3994   */\n      sub\n        /* \"#utility.yul\":3967:3999   */\n      slt\n        /* \"#utility.yul\":3964:3966   */\n      iszero\n      tag_682\n      jumpi\n        /* \"#utility.yul\":4017:4023   */\n      dup1\n        /* \"#utility.yul\":4009:4015   */\n      dup2\n        /* \"#utility.yul\":4002:4024   */\n      revert\n        /* \"#utility.yul\":3964:3966   */\n    tag_682:\n      pop\n        /* \"#utility.yul\":4045:4068   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3954:4074   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4079:4273   */\n    tag_230:\n        /* \"#utility.yul\":4149:4155   */\n      0x00\n        /* \"#utility.yul\":4202:4204   */\n      0x20\n        /* \"#utility.yul\":4190:4199   */\n      dup3\n        /* \"#utility.yul\":4181:4188   */\n      dup5\n        /* \"#utility.yul\":4177:4200   */\n      sub\n        /* \"#utility.yul\":4173:4205   */\n      slt\n        /* \"#utility.yul\":4170:4172   */\n      iszero\n      tag_684\n      jumpi\n        /* \"#utility.yul\":4223:4229   */\n      dup1\n        /* \"#utility.yul\":4215:4221   */\n      dup2\n        /* \"#utility.yul\":4208:4230   */\n      revert\n        /* \"#utility.yul\":4170:4172   */\n    tag_684:\n      pop\n        /* \"#utility.yul\":4251:4267   */\n      mload\n      swap2\n        /* \"#utility.yul\":4160:4273   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4278:4552   */\n    tag_610:\n        /* \"#utility.yul\":4407:4410   */\n      0x00\n        /* \"#utility.yul\":4445:4451   */\n      dup3\n        /* \"#utility.yul\":4439:4452   */\n      mload\n        /* \"#utility.yul\":4461:4514   */\n      tag_686\n        /* \"#utility.yul\":4507:4513   */\n      dup2\n        /* \"#utility.yul\":4502:4505   */\n      dup5\n        /* \"#utility.yul\":4495:4499   */\n      0x20\n        /* \"#utility.yul\":4487:4493   */\n      dup8\n        /* \"#utility.yul\":4483:4500   */\n      add\n        /* \"#utility.yul\":4461:4514   */\n      tag_687\n      jump\t// in\n    tag_686:\n        /* \"#utility.yul\":4530:4546   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":4415:4552   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6275:6658   */\n    tag_49:\n        /* \"#utility.yul\":6424:6426   */\n      0x20\n        /* \"#utility.yul\":6413:6422   */\n      dup2\n        /* \"#utility.yul\":6406:6427   */\n      mstore\n        /* \"#utility.yul\":6387:6391   */\n      0x00\n        /* \"#utility.yul\":6456:6462   */\n      dup3\n        /* \"#utility.yul\":6450:6463   */\n      mload\n        /* \"#utility.yul\":6499:6505   */\n      dup1\n        /* \"#utility.yul\":6494:6496   */\n      0x20\n        /* \"#utility.yul\":6483:6492   */\n      dup5\n        /* \"#utility.yul\":6479:6497   */\n      add\n        /* \"#utility.yul\":6472:6506   */\n      mstore\n        /* \"#utility.yul\":6515:6581   */\n      tag_696\n        /* \"#utility.yul\":6574:6580   */\n      dup2\n        /* \"#utility.yul\":6569:6571   */\n      0x40\n        /* \"#utility.yul\":6558:6567   */\n      dup6\n        /* \"#utility.yul\":6554:6572   */\n      add\n        /* \"#utility.yul\":6549:6551   */\n      0x20\n        /* \"#utility.yul\":6541:6547   */\n      dup8\n        /* \"#utility.yul\":6537:6552   */\n      add\n        /* \"#utility.yul\":6515:6581   */\n      tag_687\n      jump\t// in\n    tag_696:\n        /* \"#utility.yul\":6642:6644   */\n      0x1f\n        /* \"#utility.yul\":6621:6636   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":6617:6646   */\n      and\n        /* \"#utility.yul\":6602:6647   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":6649:6651   */\n      0x40\n        /* \"#utility.yul\":6598:6652   */\n      add\n      swap3\n        /* \"#utility.yul\":6396:6658   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13577:13984   */\n    tag_534:\n        /* \"#utility.yul\":13779:13781   */\n      0x20\n        /* \"#utility.yul\":13761:13782   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":13818:13820   */\n      0x2b\n        /* \"#utility.yul\":13798:13816   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":13791:13821   */\n      mstore\n        /* \"#utility.yul\":13857:13891   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":13852:13854   */\n      0x40\n        /* \"#utility.yul\":13837:13855   */\n      dup3\n      add\n        /* \"#utility.yul\":13830:13892   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":13923:13925   */\n      0x60\n        /* \"#utility.yul\":13908:13926   */\n      dup3\n      add\n        /* \"#utility.yul\":13901:13942   */\n      mstore\n        /* \"#utility.yul\":13974:13977   */\n      0x80\n        /* \"#utility.yul\":13959:13978   */\n      add\n      swap1\n        /* \"#utility.yul\":13751:13984   */\n      jump\t// out\n        /* \"#utility.yul\":15897:16025   */\n    tag_247:\n        /* \"#utility.yul\":15937:15940   */\n      0x00\n        /* \"#utility.yul\":15968:15969   */\n      dup3\n        /* \"#utility.yul\":15964:15970   */\n      not\n        /* \"#utility.yul\":15961:15962   */\n      dup3\n        /* \"#utility.yul\":15958:15971   */\n      gt\n        /* \"#utility.yul\":15955:15957   */\n      iszero\n      tag_724\n      jumpi\n        /* \"#utility.yul\":15974:15992   */\n      tag_724\n      tag_725\n      jump\t// in\n    tag_724:\n      pop\n        /* \"#utility.yul\":16010:16019   */\n      add\n      swap1\n        /* \"#utility.yul\":15945:16025   */\n      jump\t// out\n        /* \"#utility.yul\":16030:16247   */\n    tag_221:\n        /* \"#utility.yul\":16070:16071   */\n      0x00\n        /* \"#utility.yul\":16096:16097   */\n      dup3\n        /* \"#utility.yul\":16086:16088   */\n      tag_727\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":16121:16152   */\n      dup2\n      mstore\n        /* \"#utility.yul\":16175:16179   */\n      0x12\n        /* \"#utility.yul\":16172:16173   */\n      0x04\n        /* \"#utility.yul\":16165:16180   */\n      mstore\n        /* \"#utility.yul\":16203:16207   */\n      0x24\n        /* \"#utility.yul\":16128:16129   */\n      dup2\n        /* \"#utility.yul\":16193:16208   */\n      revert\n        /* \"#utility.yul\":16086:16088   */\n    tag_727:\n      pop\n        /* \"#utility.yul\":16232:16241   */\n      div\n      swap1\n        /* \"#utility.yul\":16076:16247   */\n      jump\t// out\n        /* \"#utility.yul\":16252:16420   */\n    tag_219:\n        /* \"#utility.yul\":16292:16299   */\n      0x00\n        /* \"#utility.yul\":16358:16359   */\n      dup2\n        /* \"#utility.yul\":16354:16355   */\n      0x00\n        /* \"#utility.yul\":16350:16356   */\n      not\n        /* \"#utility.yul\":16346:16360   */\n      div\n        /* \"#utility.yul\":16343:16344   */\n      dup4\n        /* \"#utility.yul\":16340:16361   */\n      gt\n        /* \"#utility.yul\":16335:16336   */\n      dup3\n        /* \"#utility.yul\":16328:16337   */\n      iszero\n        /* \"#utility.yul\":16321:16338   */\n      iszero\n        /* \"#utility.yul\":16317:16362   */\n      and\n        /* \"#utility.yul\":16314:16316   */\n      iszero\n      tag_730\n      jumpi\n        /* \"#utility.yul\":16365:16383   */\n      tag_730\n      tag_725\n      jump\t// in\n    tag_730:\n      pop\n        /* \"#utility.yul\":16405:16414   */\n      mul\n      swap1\n        /* \"#utility.yul\":16304:16420   */\n      jump\t// out\n        /* \"#utility.yul\":16425:16550   */\n    tag_233:\n        /* \"#utility.yul\":16465:16469   */\n      0x00\n        /* \"#utility.yul\":16493:16494   */\n      dup3\n        /* \"#utility.yul\":16490:16491   */\n      dup3\n        /* \"#utility.yul\":16487:16495   */\n      lt\n        /* \"#utility.yul\":16484:16486   */\n      iszero\n      tag_733\n      jumpi\n        /* \"#utility.yul\":16498:16516   */\n      tag_733\n      tag_725\n      jump\t// in\n    tag_733:\n      pop\n        /* \"#utility.yul\":16535:16544   */\n      sub\n      swap1\n        /* \"#utility.yul\":16474:16550   */\n      jump\t// out\n        /* \"#utility.yul\":16555:16813   */\n    tag_687:\n        /* \"#utility.yul\":16627:16628   */\n      0x00\n        /* \"#utility.yul\":16637:16750   */\n    tag_735:\n        /* \"#utility.yul\":16651:16657   */\n      dup4\n        /* \"#utility.yul\":16648:16649   */\n      dup2\n        /* \"#utility.yul\":16645:16658   */\n      lt\n        /* \"#utility.yul\":16637:16750   */\n      iszero\n      tag_737\n      jumpi\n        /* \"#utility.yul\":16727:16738   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":16721:16739   */\n      mload\n        /* \"#utility.yul\":16708:16719   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":16701:16740   */\n      mstore\n        /* \"#utility.yul\":16673:16675   */\n      0x20\n        /* \"#utility.yul\":16666:16676   */\n      add\n        /* \"#utility.yul\":16637:16750   */\n      jump(tag_735)\n    tag_737:\n        /* \"#utility.yul\":16768:16774   */\n      dup4\n        /* \"#utility.yul\":16765:16766   */\n      dup2\n        /* \"#utility.yul\":16762:16775   */\n      gt\n        /* \"#utility.yul\":16759:16761   */\n      iszero\n      tag_355\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":16803:16804   */\n      0x00\n        /* \"#utility.yul\":16785:16801   */\n      swap2\n      add\n        /* \"#utility.yul\":16778:16805   */\n      mstore\n        /* \"#utility.yul\":16608:16813   */\n      jump\t// out\n        /* \"#utility.yul\":16818:17198   */\n    tag_192:\n        /* \"#utility.yul\":16897:16898   */\n      0x01\n        /* \"#utility.yul\":16893:16905   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":16940:16952   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":16961:16963   */\n      tag_740\n      jumpi\n        /* \"#utility.yul\":17015:17019   */\n      0x7f\n        /* \"#utility.yul\":17007:17013   */\n      dup3\n        /* \"#utility.yul\":17003:17020   */\n      and\n        /* \"#utility.yul\":16993:17020   */\n      swap2\n      pop\n        /* \"#utility.yul\":16961:16963   */\n    tag_740:\n        /* \"#utility.yul\":17068:17070   */\n      0x20\n        /* \"#utility.yul\":17060:17066   */\n      dup3\n        /* \"#utility.yul\":17057:17071   */\n      lt\n        /* \"#utility.yul\":17037:17055   */\n      dup2\n        /* \"#utility.yul\":17034:17072   */\n      eq\n        /* \"#utility.yul\":17031:17033   */\n      iszero\n      tag_741\n      jumpi\n        /* \"#utility.yul\":17114:17124   */\n      0x4e487b71\n        /* \"#utility.yul\":17109:17112   */\n      0xe0\n        /* \"#utility.yul\":17105:17125   */\n      shl\n        /* \"#utility.yul\":17102:17103   */\n      0x00\n        /* \"#utility.yul\":17095:17126   */\n      mstore\n        /* \"#utility.yul\":17149:17153   */\n      0x22\n        /* \"#utility.yul\":17146:17147   */\n      0x04\n        /* \"#utility.yul\":17139:17154   */\n      mstore\n        /* \"#utility.yul\":17177:17181   */\n      0x24\n        /* \"#utility.yul\":17174:17175   */\n      0x00\n        /* \"#utility.yul\":17167:17182   */\n      revert\n        /* \"#utility.yul\":17031:17033   */\n    tag_741:\n      pop\n        /* \"#utility.yul\":16873:17198   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17203:17330   */\n    tag_725:\n        /* \"#utility.yul\":17264:17274   */\n      0x4e487b71\n        /* \"#utility.yul\":17259:17262   */\n      0xe0\n        /* \"#utility.yul\":17255:17275   */\n      shl\n        /* \"#utility.yul\":17252:17253   */\n      0x00\n        /* \"#utility.yul\":17245:17276   */\n      mstore\n        /* \"#utility.yul\":17295:17299   */\n      0x11\n        /* \"#utility.yul\":17292:17293   */\n      0x04\n        /* \"#utility.yul\":17285:17300   */\n      mstore\n        /* \"#utility.yul\":17319:17323   */\n      0x24\n        /* \"#utility.yul\":17316:17317   */\n      0x00\n        /* \"#utility.yul\":17309:17324   */\n      revert\n        /* \"#utility.yul\":17335:17462   */\n    tag_646:\n        /* \"#utility.yul\":17396:17406   */\n      0x4e487b71\n        /* \"#utility.yul\":17391:17394   */\n      0xe0\n        /* \"#utility.yul\":17387:17407   */\n      shl\n        /* \"#utility.yul\":17384:17385   */\n      0x00\n        /* \"#utility.yul\":17377:17408   */\n      mstore\n        /* \"#utility.yul\":17427:17431   */\n      0x41\n        /* \"#utility.yul\":17424:17425   */\n      0x04\n        /* \"#utility.yul\":17417:17432   */\n      mstore\n        /* \"#utility.yul\":17451:17455   */\n      0x24\n        /* \"#utility.yul\":17448:17449   */\n      0x00\n        /* \"#utility.yul\":17441:17456   */\n      revert\n        /* \"#utility.yul\":17467:17598   */\n    tag_653:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":17542:17573   */\n      dup2\n      and\n        /* \"#utility.yul\":17532:17574   */\n      dup2\n      eq\n        /* \"#utility.yul\":17522:17524   */\n      tag_410\n      jumpi\n        /* \"#utility.yul\":17588:17589   */\n      0x00\n        /* \"#utility.yul\":17585:17586   */\n      dup1\n        /* \"#utility.yul\":17578:17590   */\n      revert\n\n    auxdata: 0xa2646970667358221220ac267001eb9a172aebdd86e5e4489fe96e16d560eb3511147be4c85755b4cdf264736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50612778806100206000396000f3fe6080604052600436106101f25760003560e01c806384276d811161010d578063b6b55f25116100a0578063de5f62681161006f578063de5f62681461056a578063def68a9c1461057f578063e2d1e75c1461059f578063e6685244146105b5578063f2fde38b146105ca57600080fd5b8063b6b55f251461050d578063d389800f1461052d578063db6b524614610542578063dd62ed3e1461054a57600080fd5b8063a457c2d7116100dc578063a457c2d714610498578063a8c62e76146104b8578063a9059cbb146104d8578063b69ef8a8146104f857600080fd5b806384276d8114610430578063853828b6146104505780638da5cb5b1461046557806395d89b411461048357600080fd5b8063482fe0241161018557806370a082311161015457806370a082311461038d578063715018a6146103c357806376dfabb8146103d857806377c7b8fc1461041b57600080fd5b8063482fe0241461032357806348a0d754146103385780634d12d4b61461034d5780635b12ff9b1461036d57600080fd5b806323b872dd116101c157806323b872dd146102a55780632e1a7d4d146102c5578063313ce567146102e7578063395093511461030357600080fd5b806306fdde03146101fe578063095ea7b31461022957806318160ddd146102595780631f1fcd511461027857600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b506102136105ea565b60405161022091906125ae565b60405180910390f35b34801561023557600080fd5b5061024961024436600461249c565b61067c565b6040519015158152602001610220565b34801561026557600080fd5b506035545b604051908152602001610220565b34801561028457600080fd5b5061028d610694565b6040516001600160a01b039091168152602001610220565b3480156102b157600080fd5b506102496102c036600461245c565b610716565b3480156102d157600080fd5b506102e56102e0366004612562565b61073a565b005b3480156102f357600080fd5b5060405160128152602001610220565b34801561030f57600080fd5b5061024961031e36600461249c565b610934565b34801561032f57600080fd5b506102e5610956565b34801561034457600080fd5b5061026a610971565b34801561035957600080fd5b506102e56103683660046124e7565b6109f4565b34801561037957600080fd5b506102e56103883660046123e5565b610b40565b34801561039957600080fd5b5061026a6103a83660046123e5565b6001600160a01b031660009081526033602052604090205490565b3480156103cf57600080fd5b506102e5610d53565b3480156103e457600080fd5b5060c95460ca546103fc916001600160a01b03169082565b604080516001600160a01b039093168352602083019190915201610220565b34801561042757600080fd5b5061026a610d65565b34801561043c57600080fd5b506102e561044b366004612562565b610da9565b34801561045c57600080fd5b506102e561101b565b34801561047157600080fd5b506065546001600160a01b031661028d565b34801561048f57600080fd5b50610213611034565b3480156104a457600080fd5b506102496104b336600461249c565b611043565b3480156104c457600080fd5b5060cb5461028d906001600160a01b031681565b3480156104e457600080fd5b506102496104f336600461249c565b6110be565b34801561050457600080fd5b5061026a6110cc565b34801561051957600080fd5b506102e5610528366004612562565b6111d4565b34801561053957600080fd5b506102e56112e0565b6102e561136a565b34801561055657600080fd5b5061026a610565366004612424565b6114b1565b34801561057657600080fd5b506102e56114dc565b34801561058b57600080fd5b506102e561059a3660046123e5565b611560565b3480156105ab57600080fd5b5061026a60cc5481565b3480156105c157600080fd5b506102e561164e565b3480156105d657600080fd5b506102e56105e53660046123e5565b6117d9565b6060603680546105f9906126c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906126c6565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050905090565b60003361068a81858561184f565b5060019392505050565b60cb5460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd51916004808301926020929190829003018186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190612408565b905090565b600033610724858285611973565b61072f8585856119e7565b506001949350505050565b600061074560355490565b8261074e6110cc565b6107589190612664565b6107629190612644565b905061076e3383611b92565b6000610778610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f1919061257a565b9050818110156109125760006108078284612683565b60cb54604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b505050506000610870610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061257a565b905060006108f78483612683565b90508281101561090e5761090b818561262c565b94505b5050505b61092f338361091f610694565b6001600160a01b03169190611cc6565b505050565b60003361068a81858561094783836114b1565b610951919061262c565b61184f565b3360009081526033602052604090205461096f90610da9565b565b600061097b610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610711919061257a565b600054610100900460ff1615808015610a145750600054600160ff909116105b80610a2e5750303b158015610a2e575060005460ff166001145b610a965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610ab9576000805461ff0019166101001790555b610ac38484611d29565b610acb611d5a565b610ad3611d89565b60cb80546001600160a01b0319166001600160a01b03871617905560cc8290558015610b39576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610b48611db8565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190612408565b6001600160a01b0316306001600160a01b031614610c235760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c6044820152601d60fa1b6064820152608401610a8d565b806001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190612408565b6001600160a01b0316610ca5610694565b6001600160a01b031614610cec5760405162461bcd60e51b815260206004820152600e60248201526d111a5999995c995b9d081dd85b9d60921b6044820152606401610a8d565b6040805180820182526001600160a01b03831680825242602092830181905260c980546001600160a01b0319168317905560ca5591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b610d5b611db8565b61096f6000611e12565b6000610d7060355490565b15610d9c57603554610d806110cc565b610d9290670de0b6b3a7640000612664565b6107119190612644565b50670de0b6b3a764000090565b6000610db460355490565b82610dbd6110cc565b610dc79190612664565b610dd19190612644565b9050610ddd3383611b92565b6000610de7610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e60919061257a565b905081811015610f81576000610e768284612683565b60cb54604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610ebd57600080fd5b505af1158015610ed1573d6000803e3d6000fd5b505050506000610edf610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f58919061257a565b90506000610f668483612683565b905082811015610f7d57610f7a818561262c565b94505b5050505b610f89610694565b6001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b8152600401610fb691815260200190565b600060405180830381600087803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b505060405133925084156108fc02915084906000818181858888f19350505050158015611015573d6000803e3d6000fd5b50505050565b3360009081526033602052604090205461096f9061073a565b6060603780546105f9906126c6565b6000338161105182866114b1565b9050838110156110b15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a8d565b61072f828686840361184f565b60003361068a8185856119e7565b60cb546040805163722713f760e01b815290516000926001600160a01b03169163722713f7916004808301926020929190829003018186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061257a565b611151610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561119257600080fd5b505afa1580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca919061257a565b610711919061262c565b6111dc611e64565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b50505050600061124e6110cc565b905061126f33308461125e610694565b6001600160a01b0316929190611ebe565b6112776112e0565b60006112816110cc565b905061128d8282612683565b9250600061129a60355490565b6112a55750826112c6565b826112af60355490565b6112b99086612664565b6112c39190612644565b90505b6112d03382611ef6565b5050506112dd6001609755565b50565b60006112ea610971565b60cb54909150611306906001600160a01b03168261091f610694565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561135657600080fd5b505af1158015610b39573d6000803e3d6000fd5b611372611e64565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b5050505060006113e46110cc565b9050346113ef610694565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561142957600080fd5b505af115801561143d573d6000803e3d6000fd5b505050505061144a6112e0565b60006114546110cc565b90506114608382612683565b9150600061146d60355490565b611478575081611499565b8361148260355490565b61148c9085612664565b6114969190612644565b90505b6114a33382611ef6565b5050505061096f6001609755565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61096f6114e7610694565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561152857600080fd5b505afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610528919061257a565b611568611db8565b611570610694565b6001600160a01b0316816001600160a01b031614156115ba5760405162461bcd60e51b815260206004820152600660248201526510ba37b5b2b760d11b6044820152606401610a8d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611634919061257a565b905061164a6001600160a01b0383163383611cc6565b5050565b611656611db8565b60c9546001600160a01b03166116a65760405162461bcd60e51b81526020600482015260156024820152745468657265206973206e6f2063616e64696461746560581b6044820152606401610a8d565b60cc5460ca5442916116b79161262c565b106116fb5760405162461bcd60e51b815260206004820152601460248201527311195b185e481a185cc81b9bdd081c185cdcd95960621b6044820152606401610a8d565b60c9546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a160cb60009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505060c9805460cb80546001600160a01b03199081166001600160a01b03841617909155169055505064012a05f20060ca5561096f6112e0565b6117e1611db8565b6001600160a01b0381166118465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a8d565b6112dd81611e12565b6001600160a01b0383166118b15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a8d565b6001600160a01b0382166119125760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a8d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061197f84846114b1565b9050600019811461101557818110156119da5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a8d565b611015848484840361184f565b6001600160a01b038316611a4b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a8d565b6001600160a01b038216611aad5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a8d565b6001600160a01b03831660009081526033602052604090205481811015611b255760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a8d565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b859086815260200190565b60405180910390a3611015565b6001600160a01b038216611bf25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a8d565b6001600160a01b03821660009081526033602052604090205481811015611c665760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a8d565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261092f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fbe565b600054610100900460ff16611d505760405162461bcd60e51b8152600401610a8d906125e1565b61164a8282612093565b600054610100900460ff16611d815760405162461bcd60e51b8152600401610a8d906125e1565b61096f6120e1565b600054610100900460ff16611db05760405162461bcd60e51b8152600401610a8d906125e1565b61096f612111565b6065546001600160a01b0316331461096f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a8d565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026097541415611eb75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a8d565b6002609755565b6040516001600160a01b03808516602483015283166044820152606481018290526110159085906323b872dd60e01b90608401611cf2565b6001600160a01b038216611f4c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a8d565b8060356000828254611f5e919061262c565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001609755565b6000612013826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121389092919063ffffffff16565b905080516000148061203457508080602001905181019061203491906124c7565b61092f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a8d565b600054610100900460ff166120ba5760405162461bcd60e51b8152600401610a8d906125e1565b81516120cd9060369060208501906122c5565b50805161092f9060379060208401906122c5565b600054610100900460ff166121085760405162461bcd60e51b8152600401610a8d906125e1565b61096f33611e12565b600054610100900460ff16611fb75760405162461bcd60e51b8152600401610a8d906125e1565b6060612147848460008561214f565b949350505050565b6060824710156121b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a8d565b600080866001600160a01b031685876040516121cc9190612592565b60006040518083038185875af1925050503d8060008114612209576040519150601f19603f3d011682016040523d82523d6000602084013e61220e565b606091505b509150915061221f8783838761222a565b979650505050505050565b6060831561229657825161228f576001600160a01b0385163b61228f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a8d565b5081612147565b61214783838151156122ab5781518083602001fd5b8060405162461bcd60e51b8152600401610a8d91906125ae565b8280546122d1906126c6565b90600052602060002090601f0160209004810192826122f35760008555612339565b82601f1061230c57805160ff1916838001178555612339565b82800160010185558215612339579182015b8281111561233957825182559160200191906001019061231e565b50612345929150612349565b5090565b5b80821115612345576000815560010161234a565b600082601f83011261236e578081fd5b813567ffffffffffffffff8082111561238957612389612717565b604051601f8301601f19908116603f011681019082821181831017156123b1576123b1612717565b816040528381528660208588010111156123c9578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156123f6578081fd5b81356124018161272d565b9392505050565b600060208284031215612419578081fd5b81516124018161272d565b60008060408385031215612436578081fd5b82356124418161272d565b915060208301356124518161272d565b809150509250929050565b600080600060608486031215612470578081fd5b833561247b8161272d565b9250602084013561248b8161272d565b929592945050506040919091013590565b600080604083850312156124ae578182fd5b82356124b98161272d565b946020939093013593505050565b6000602082840312156124d8578081fd5b81518015158114612401578182fd5b600080600080608085870312156124fc578081fd5b84356125078161272d565b9350602085013567ffffffffffffffff80821115612523578283fd5b61252f8883890161235e565b94506040870135915080821115612544578283fd5b506125518782880161235e565b949793965093946060013593505050565b600060208284031215612573578081fd5b5035919050565b60006020828403121561258b578081fd5b5051919050565b600082516125a481846020870161269a565b9190910192915050565b60208152600082518060208401526125cd81604085016020870161269a565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561263f5761263f612701565b500190565b60008261265f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561267e5761267e612701565b500290565b60008282101561269557612695612701565b500390565b60005b838110156126b557818101518382015260200161269d565b838111156110155750506000910152565b600181811c908216806126da57607f821691505b602082108114156126fb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112dd57600080fdfea2646970667358221220ac267001eb9a172aebdd86e5e4489fe96e16d560eb3511147be4c85755b4cdf264736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2778 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1F2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x84276D81 GT PUSH2 0x10D JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xDE5F6268 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDE5F6268 EQ PUSH2 0x56A JUMPI DUP1 PUSH4 0xDEF68A9C EQ PUSH2 0x57F JUMPI DUP1 PUSH4 0xE2D1E75C EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xE6685244 EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x50D JUMPI DUP1 PUSH4 0xD389800F EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0xDB6B5246 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xA8C62E76 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D8 JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x84276D81 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x853828B6 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x465 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x482FE024 GT PUSH2 0x185 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x154 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x76DFABB8 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x77C7B8FC EQ PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x482FE024 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x48A0D754 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0x4D12D4B6 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x5B12FF9B EQ PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x1F1FCD51 EQ PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1F9 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x213 PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x245C JUMP JUMPDEST PUSH2 0x716 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x956 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x971 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x9F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0xB40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0xD53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH1 0xCA SLOAD PUSH2 0x3FC SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0xD65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0xDA9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x101B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x213 PUSH2 0x1034 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x1043 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCB SLOAD PUSH2 0x28D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x10BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x10CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x136A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x14B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x14DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0x1560 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0xCC SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x164E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x5E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x5F9 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x625 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x672 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x647 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x672 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x655 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x184F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x1F1FCD51 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x1F1FCD51 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x724 DUP6 DUP3 DUP6 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x72F DUP6 DUP6 DUP6 PUSH2 0x19E7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x745 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST DUP3 PUSH2 0x74E PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x758 SWAP2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP PUSH2 0x76E CALLER DUP4 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x778 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F1 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 PUSH2 0x807 DUP3 DUP5 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x862 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x870 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E9 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F7 DUP5 DUP4 PUSH2 0x2683 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x90E JUMPI PUSH2 0x90B DUP2 DUP6 PUSH2 0x262C JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH2 0x92F CALLER DUP4 PUSH2 0x91F PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x947 DUP4 DUP4 PUSH2 0x14B1 JUMP JUMPDEST PUSH2 0x951 SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH2 0x184F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x96F SWAP1 PUSH2 0xDA9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97B PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xA14 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xA2E JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xA96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xAB9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAC3 DUP5 DUP5 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0xACB PUSH2 0x1D5A JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0x1D89 JUMP JUMPDEST PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND OR SWAP1 SSTORE PUSH1 0xCC DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xB39 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB48 PUSH2 0x1DB8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F706F73616C206E6F742076616C696420666F722074686973205661756C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F1FCD51 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC94 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x111A5999995C995B9D081DD85B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP3 MSTORE TIMESTAMP PUSH1 0x20 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0xCA SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x1AAE2EC5647DB56DA2D513DE40528BA3565C6057525637050660C4323BBAC7DF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD5B PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0x96F PUSH1 0x0 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD70 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD9C JUMPI PUSH1 0x35 SLOAD PUSH2 0xD80 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0xD92 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB4 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST DUP3 PUSH2 0xDBD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0xDD1 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP PUSH2 0xDDD CALLER DUP4 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE7 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE60 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 PUSH2 0xE76 DUP3 DUP5 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xED1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xEDF PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF58 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF66 DUP5 DUP4 PUSH2 0x2683 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH2 0xF7A DUP2 DUP6 PUSH2 0x262C JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH2 0xF89 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB6 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1015 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x96F SWAP1 PUSH2 0x73A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x5F9 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1051 DUP3 DUP7 PUSH2 0x14B1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x72F DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x184F JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x722713F7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x722713F7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1125 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1149 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x1151 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH2 0x11DC PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x573FEF0A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x122C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1240 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x124E PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x126F CALLER ADDRESS DUP5 PUSH2 0x125E PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH2 0x1277 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x128D DUP3 DUP3 PUSH2 0x2683 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH2 0x129A PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12A5 JUMPI POP DUP3 PUSH2 0x12C6 JUMP JUMPDEST DUP3 PUSH2 0x12AF PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12B9 SWAP1 DUP7 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x12C3 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x12D0 CALLER DUP3 PUSH2 0x1EF6 JUMP JUMPDEST POP POP POP PUSH2 0x12DD PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12EA PUSH2 0x971 JUMP JUMPDEST PUSH1 0xCB SLOAD SWAP1 SWAP2 POP PUSH2 0x1306 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH2 0x91F PUSH2 0x694 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1372 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x573FEF0A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x13E4 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x13EF PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x143D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x144A PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1454 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x1460 DUP4 DUP3 PUSH2 0x2683 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x146D PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1478 JUMPI POP DUP2 PUSH2 0x1499 JUMP JUMPDEST DUP4 PUSH2 0x1482 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x148C SWAP1 DUP6 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x1496 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x14A3 CALLER DUP3 PUSH2 0x1EF6 JUMP JUMPDEST POP POP POP POP PUSH2 0x96F PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x14E7 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x528 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x1568 PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0x1570 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x10BA37B5B2B7 PUSH1 0xD1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1610 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1634 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH2 0x164A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x1CC6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1656 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5468657265206973206E6F2063616E646964617465 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0xCC SLOAD PUSH1 0xCA SLOAD TIMESTAMP SWAP2 PUSH2 0x16B7 SWAP2 PUSH2 0x262C JUMP JUMPDEST LT PUSH2 0x16FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x11195B185E481A185CC81B9BDD081C185CDCD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH32 0x7F37D440E85ABA7FBF641C4BDA5CA4EF669A80BFFAACDE2AA8D9FEB1B048C82C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB617787 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x178B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x179F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0xC9 DUP1 SLOAD PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE POP POP PUSH5 0x12A05F200 PUSH1 0xCA SSTORE PUSH2 0x96F PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x17E1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x12DD DUP2 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1912 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197F DUP5 DUP5 PUSH2 0x14B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1015 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x19DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x1015 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x184F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1B25 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1B85 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1BF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1C66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x92F SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1FBE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x164A DUP3 DUP3 PUSH2 0x2093 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x20E1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x2111 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x96F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x97 SLOAD EQ ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1015 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1F4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1F5E SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2013 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2138 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x2034 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2034 SWAP2 SWAP1 PUSH2 0x24C7 JUMP JUMPDEST PUSH2 0x92F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x20CD SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x22C5 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x92F SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x22C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2108 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F CALLER PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2147 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x214F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x21B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x21CC SWAP2 SWAP1 PUSH2 0x2592 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2209 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x220E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x221F DUP8 DUP4 DUP4 DUP8 PUSH2 0x222A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2296 JUMPI DUP3 MLOAD PUSH2 0x228F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x228F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST POP DUP2 PUSH2 0x2147 JUMP JUMPDEST PUSH2 0x2147 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x22AB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x22D1 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x22F3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2339 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x230C JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2339 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2339 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2339 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x231E JUMP JUMPDEST POP PUSH2 0x2345 SWAP3 SWAP2 POP PUSH2 0x2349 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2345 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x234A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x236E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2389 JUMPI PUSH2 0x2389 PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x23B1 JUMPI PUSH2 0x23B1 PUSH2 0x2717 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x23C9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2401 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2419 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2401 DUP2 PUSH2 0x272D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2436 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2441 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2451 DUP2 PUSH2 0x272D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2470 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x247B DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x248B DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24AE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24B9 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2401 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x24FC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2507 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2523 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x252F DUP9 DUP4 DUP10 ADD PUSH2 0x235E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2544 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2551 DUP8 DUP3 DUP9 ADD PUSH2 0x235E JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2573 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x258B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25A4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x269A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x25CD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x269A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x263F JUMPI PUSH2 0x263F PUSH2 0x2701 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x265F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x267E JUMPI PUSH2 0x267E PUSH2 0x2701 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2695 JUMPI PUSH2 0x2695 PUSH2 0x2701 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x269D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1015 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x26DA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x26FB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0x26 PUSH17 0x1EB9A172AEBDD86E5E4489FE96E16D560 0xEB CALLDATALOAD GT EQ PUSH28 0xE4C85755B4CDF264736F6C6343000804003300000000000000000000 ",
							"sourceMap": "735:8381:12:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17600:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "67:686:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "116:24:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "125:5:13"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "132:5:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "118:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "118:20:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "118:20:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "95:6:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "103:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "91:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "91:17:13"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "110:3:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "87:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "87:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "80:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "80:35:13"
															},
															"nodeType": "YulIf",
															"src": "77:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "149:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "172:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "159:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "159:20:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "153:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "188:28:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "198:18:13",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "192:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "239:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "241:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "241:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "241:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "231:2:13"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "235:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "228:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "228:10:13"
															},
															"nodeType": "YulIf",
															"src": "225:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "270:17:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "284:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "280:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "280:7:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "274:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "296:23:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "316:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "310:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:9:13"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "300:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "328:71:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "350:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "374:2:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "378:4:13",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "370:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "370:13:13"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "385:2:13"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "366:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "366:22:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "390:2:13",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "362:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "362:31:13"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "395:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "358:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "358:40:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "346:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "346:53:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "332:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "458:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "460:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "460:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "460:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "417:10:13"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "429:2:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "414:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "414:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "437:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "449:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "434:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "434:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "411:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "411:46:13"
															},
															"nodeType": "YulIf",
															"src": "408:2:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "496:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "500:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "489:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "489:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "489:22:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "527:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "535:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "520:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "520:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "520:18:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:24:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "595:5:13"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "602:5:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "588:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:20:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:20:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "561:6:13"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "569:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "557:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "557:15:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "574:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "553:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "553:26:13"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "581:3:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "550:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "550:35:13"
															},
															"nodeType": "YulIf",
															"src": "547:2:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "636:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "644:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "632:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "632:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "655:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "663:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "651:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "651:17:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "670:2:13"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "619:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:54:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "619:54:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "697:6:13"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "705:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "693:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "693:15:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "710:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "689:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "689:26:13"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "717:5:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "682:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "682:41:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "732:15:13",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "741:6:13"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "732:5:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "41:6:13",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "49:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "57:5:13",
														"type": ""
													}
												],
												"src": "14:739:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "828:187:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "874:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "883:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "891:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "876:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "876:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "876:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "849:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "858:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "845:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "845:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "870:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "841:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "841:32:13"
															},
															"nodeType": "YulIf",
															"src": "838:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "909:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "935:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "922:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "922:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "913:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "979:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "954:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "954:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "954:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "994:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1004:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "994:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "794:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "805:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "817:6:13",
														"type": ""
													}
												],
												"src": "758:257:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1101:180:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1147:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1156:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1164:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1149:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1149:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1149:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1122:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1131:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1118:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1118:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1143:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1114:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1114:32:13"
															},
															"nodeType": "YulIf",
															"src": "1111:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1182:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1201:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1195:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1195:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1186:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1245:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1220:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1220:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1220:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1260:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1270:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1260:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1067:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1078:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1090:6:13",
														"type": ""
													}
												],
												"src": "1020:261:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1373:311:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1419:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1428:6:13"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1436:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1421:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1421:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1421:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1394:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1403:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1390:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1390:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1415:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1386:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1386:32:13"
															},
															"nodeType": "YulIf",
															"src": "1383:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1454:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1480:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1467:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1467:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1458:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1524:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1499:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1499:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1539:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1549:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1539:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1563:47:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1595:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1606:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1591:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1591:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1578:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1578:32:13"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1567:7:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1644:7:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1619:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1619:33:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1619:33:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1661:17:13",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1671:7:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1661:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1331:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1342:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1354:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1362:6:13",
														"type": ""
													}
												],
												"src": "1286:398:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1793:362:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1839:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1848:6:13"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1856:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1841:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1841:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1841:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1814:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1823:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1810:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1810:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1835:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1806:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1806:32:13"
															},
															"nodeType": "YulIf",
															"src": "1803:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1874:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1900:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1887:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1887:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1878:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1944:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1919:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1919:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1919:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1959:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1969:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1959:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1983:47:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2015:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2026:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2011:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2011:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1998:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1998:32:13"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1987:7:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2064:7:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2039:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2039:33:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2039:33:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2081:17:13",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2091:7:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2081:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2107:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2134:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2145:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2130:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2130:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2117:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2117:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2107:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1743:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1754:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1766:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1774:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1782:6:13",
														"type": ""
													}
												],
												"src": "1689:466:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2247:238:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2293:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2302:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2310:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2295:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2295:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2295:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2268:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2277:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2264:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2264:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2289:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2260:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2260:32:13"
															},
															"nodeType": "YulIf",
															"src": "2257:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2328:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2354:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2341:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2341:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2332:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2398:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2373:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2373:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2373:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2413:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2423:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2413:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2437:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2464:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2475:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2460:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2460:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2447:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2447:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2437:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2205:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2216:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2228:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2236:6:13",
														"type": ""
													}
												],
												"src": "2160:325:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2568:219:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2614:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2623:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2631:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2616:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2616:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2616:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2589:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2598:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2585:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2585:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2610:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2581:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2581:32:13"
															},
															"nodeType": "YulIf",
															"src": "2578:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2649:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2668:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2662:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2653:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2731:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2740:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2748:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2733:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2733:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2733:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2700:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2721:5:13"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2714:6:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2714:13:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2707:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2707:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2697:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2697:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2690:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2690:40:13"
															},
															"nodeType": "YulIf",
															"src": "2687:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2766:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2776:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2766:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2534:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2545:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2557:6:13",
														"type": ""
													}
												],
												"src": "2490:297:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2899:180:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2945:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2954:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2962:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2947:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2947:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2947:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2920:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2929:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2916:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2916:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2941:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2912:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2912:32:13"
															},
															"nodeType": "YulIf",
															"src": "2909:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2980:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2999:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2993:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2993:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2984:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3043:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3018:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3018:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3018:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3058:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3068:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3058:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC20Upgradeable_$1077_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2865:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2876:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2888:6:13",
														"type": ""
													}
												],
												"src": "2792:287:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3243:636:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3290:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3299:6:13"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3307:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3292:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3292:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3292:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3264:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3273:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3260:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3260:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3285:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3256:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3256:33:13"
															},
															"nodeType": "YulIf",
															"src": "3253:2:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3325:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3351:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3338:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3338:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3329:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3395:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3370:24:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3370:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3370:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3410:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3420:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3410:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3434:46:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3465:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3476:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3461:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3461:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3448:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3448:32:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3438:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3489:28:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3499:18:13",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3493:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3544:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3553:6:13"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3561:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3546:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3546:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3546:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3532:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3540:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3529:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3529:14:13"
															},
															"nodeType": "YulIf",
															"src": "3526:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3579:60:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3611:9:13"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3622:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3607:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3607:22:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3631:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3589:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3589:50:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3579:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3648:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3681:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3692:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3677:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3677:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3664:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3664:32:13"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "3652:8:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3725:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3734:6:13"
																				},
																				{
																					"name": "value3",
																					"nodeType": "YulIdentifier",
																					"src": "3742:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3727:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3727:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3727:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "3711:8:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3721:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3708:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3708:16:13"
															},
															"nodeType": "YulIf",
															"src": "3705:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3760:62:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3792:9:13"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "3803:8:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3788:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3788:24:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3814:7:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3770:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3770:52:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3760:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3831:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3858:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3869:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3854:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3854:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3841:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:32:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3831:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IStrategy_$1972t_string_memory_ptrt_string_memory_ptrt_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3185:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3196:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3208:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3216:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3224:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3232:6:13",
														"type": ""
													}
												],
												"src": "3084:795:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3954:120:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4000:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4009:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4017:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4002:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4002:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4002:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3975:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3984:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3971:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3971:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3996:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3967:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3967:32:13"
															},
															"nodeType": "YulIf",
															"src": "3964:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4035:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4058:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4045:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4035:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3920:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3931:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3943:6:13",
														"type": ""
													}
												],
												"src": "3884:190:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4160:113:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4206:26:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4215:6:13"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4223:6:13"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4208:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4208:22:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4208:22:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4181:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4190:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4177:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4177:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4202:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4173:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4173:32:13"
															},
															"nodeType": "YulIf",
															"src": "4170:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4241:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4257:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4251:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4251:16:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4241:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4126:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4137:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4149:6:13",
														"type": ""
													}
												],
												"src": "4079:194:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4415:137:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4425:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4445:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4439:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4439:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4429:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4487:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4495:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4483:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4483:17:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4502:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4507:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4461:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4461:53:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4461:53:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4523:23:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4534:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4539:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4530:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4530:16:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4523:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4391:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4396:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4407:3:13",
														"type": ""
													}
												],
												"src": "4278:274:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4658:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4668:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4680:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4691:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4676:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4676:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4668:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4710:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4725:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4741:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4746:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4737:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4737:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4750:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4733:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4733:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4721:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4721:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4703:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4703:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4703:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4627:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4638:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4649:4:13",
														"type": ""
													}
												],
												"src": "4557:203:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4922:218:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4932:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4944:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4955:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4940:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4940:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4932:4:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4967:29:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4985:3:13",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4990:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4981:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4981:11:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4994:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4977:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4977:19:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4971:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5012:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5027:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5035:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5023:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5023:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5005:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5005:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5005:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5059:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5070:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5055:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5055:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5079:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5087:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5075:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5075:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5048:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5048:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5048:43:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5111:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5122:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5107:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5107:18:13"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5127:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5100:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5100:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5100:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4875:9:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4886:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4894:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4902:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4913:4:13",
														"type": ""
													}
												],
												"src": "4765:375:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5274:145:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5284:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5296:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5307:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5292:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5292:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5284:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5326:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5341:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5357:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5362:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5353:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5353:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5366:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5349:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5349:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5337:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5337:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5319:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5319:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5319:51:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5390:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5401:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5386:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5386:18:13"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5406:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5379:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5379:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5379:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5235:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5246:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5254:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5265:4:13",
														"type": ""
													}
												],
												"src": "5145:274:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5519:92:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5529:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5541:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5552:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5537:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5537:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5529:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5571:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "5596:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5589:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5589:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5582:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5582:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5564:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5564:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5564:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5488:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5499:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5510:4:13",
														"type": ""
													}
												],
												"src": "5424:187:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5743:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5753:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5765:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5776:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5761:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5761:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5753:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5795:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5810:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5826:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5831:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5822:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5822:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5835:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5818:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5818:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5806:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5806:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5788:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5788:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5788:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20Upgradeable_$1077__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5712:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5723:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5734:4:13",
														"type": ""
													}
												],
												"src": "5616:229:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5969:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5979:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5991:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6002:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5987:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5987:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5979:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6021:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6036:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6052:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6057:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6048:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6048:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6061:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6044:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6044:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6032:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6032:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6014:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6014:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6014:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IStrategy_$1972__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5938:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5949:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5960:4:13",
														"type": ""
													}
												],
												"src": "5850:221:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6183:87:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6193:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6205:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6216:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6201:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6201:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6193:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6235:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6250:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6258:4:13",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6246:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6246:17:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6228:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6228:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6228:36:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6152:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6163:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6174:4:13",
														"type": ""
													}
												],
												"src": "6076:194:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6396:262:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6413:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6424:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6406:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6406:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6406:21:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6436:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6456:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6450:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6450:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6440:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6483:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6494:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6479:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6479:18:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6499:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6472:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6472:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6472:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6541:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6549:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6537:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6537:15:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6558:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6569:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6554:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6554:18:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6574:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6515:21:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6515:66:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6515:66:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6590:62:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6606:9:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "6625:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6633:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6621:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6621:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6642:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "6638:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6638:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "6617:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6617:29:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6602:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6602:45:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6649:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6598:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6598:54:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6590:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6365:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6376:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6387:4:13",
														"type": ""
													}
												],
												"src": "6275:383:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6837:225:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6854:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6865:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6847:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6847:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6847:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6888:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6899:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6884:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6884:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6904:2:13",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6877:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6877:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6877:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6927:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6938:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6923:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6923:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6943:34:13",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6916:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6916:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6916:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6998:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7009:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6994:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6994:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7014:5:13",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6987:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6987:33:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6987:33:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7029:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7041:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7052:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7037:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7029:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6814:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6828:4:13",
														"type": ""
													}
												],
												"src": "6663:399:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7241:224:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7258:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7269:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7251:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7251:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7251:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7292:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7303:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7288:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7288:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7308:2:13",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7281:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7281:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7281:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7331:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7342:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7327:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7327:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7347:34:13",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7320:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7320:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7320:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7402:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7413:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7398:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7398:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7418:4:13",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7391:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7391:32:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7391:32:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7432:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7444:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7455:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7440:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7440:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7432:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7218:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7232:4:13",
														"type": ""
													}
												],
												"src": "7067:398:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7644:228:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7661:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7672:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7654:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7654:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7654:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7695:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7706:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7691:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7691:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7711:2:13",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7684:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7684:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7684:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7734:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7745:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7730:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7730:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7750:34:13",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7723:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7723:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7723:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7805:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7816:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7801:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7801:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7821:8:13",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7794:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7794:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7794:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7839:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7851:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7862:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7847:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7847:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7839:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7621:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7635:4:13",
														"type": ""
													}
												],
												"src": "7470:402:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8051:224:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8068:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8079:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8061:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8061:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8061:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8102:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8113:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8098:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8098:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8118:2:13",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8091:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8091:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8091:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8141:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8152:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8137:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8137:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8157:34:13",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8130:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8130:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8130:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8212:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8223:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8208:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8208:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8228:4:13",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8201:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8201:32:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8201:32:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8242:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8254:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8265:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8250:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8250:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8242:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8028:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8042:4:13",
														"type": ""
													}
												],
												"src": "7877:398:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8454:179:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8471:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8482:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8464:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8464:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8464:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8505:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8516:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8501:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8501:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8521:2:13",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8494:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8494:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8494:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8544:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8555:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8540:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8540:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8560:31:13",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8533:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8533:59:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8533:59:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8601:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8613:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8624:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8609:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8609:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8601:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8431:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8445:4:13",
														"type": ""
													}
												],
												"src": "8280:353:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8812:228:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8829:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8840:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8822:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8822:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8822:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8863:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8874:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8859:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8859:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8879:2:13",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8852:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8852:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8852:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8902:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8913:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8898:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8898:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8918:34:13",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8891:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8891:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8891:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8973:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8984:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8969:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8969:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8989:8:13",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8962:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "8962:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8962:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9007:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9019:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9030:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9015:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9015:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9007:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8789:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8803:4:13",
														"type": ""
													}
												],
												"src": "8638:402:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9219:228:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9236:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9247:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9229:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9229:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9229:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9270:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9281:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9266:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9266:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9286:2:13",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9259:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9259:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9259:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9309:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9320:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9305:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9305:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9325:34:13",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9298:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9298:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9298:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9380:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9391:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9376:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9376:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9396:8:13",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9369:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9369:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9369:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9414:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9426:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9437:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9422:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9422:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9414:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9196:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9210:4:13",
														"type": ""
													}
												],
												"src": "9045:402:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9626:170:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9643:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9654:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9636:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9636:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9677:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9688:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9673:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9673:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9693:2:13",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9666:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9666:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9666:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9716:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9727:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9712:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9712:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9732:22:13",
																		"type": "",
																		"value": "Delay has not passed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9705:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9705:50:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9705:50:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9764:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9776:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9787:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9772:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9772:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9764:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68d78fa197bf0b20149fd726ff33ff5aa05819c7985dd8bf3f524bc84a6e33c8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9603:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9617:4:13",
														"type": ""
													}
												],
												"src": "9452:344:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9975:155:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9992:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10003:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9985:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "9985:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9985:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10026:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10037:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10022:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10022:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10042:1:13",
																		"type": "",
																		"value": "6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10015:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10015:29:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10015:29:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10064:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10075:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10060:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10060:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10080:8:13",
																		"type": "",
																		"value": "!token"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10053:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10053:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10053:36:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10098:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10110:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10121:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10106:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10106:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10098:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6b08df48b67a8acda5828e85af8c62865fe7bd53995164d29920fdc8d1b5e5d9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9952:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9966:4:13",
														"type": ""
													}
												],
												"src": "9801:329:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10309:223:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10326:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10337:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10319:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10319:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10319:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10360:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10371:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10356:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10356:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10376:2:13",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10349:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10349:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10349:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10399:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10410:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10395:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10395:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10415:34:13",
																		"type": "",
																		"value": "Proposal not valid for this Vaul"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10388:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10388:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10388:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10470:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10481:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10466:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10466:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10486:3:13",
																		"type": "",
																		"value": "t"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10459:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10459:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10459:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10499:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10511:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10522:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10507:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10507:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10499:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6d06d9f1cf1cb47b4c164a82a99136bb279d51ecac86ea5fd348be592f7bfe2e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10286:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10300:4:13",
														"type": ""
													}
												],
												"src": "10135:397:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10711:236:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10728:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10739:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10721:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10721:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10721:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10762:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10773:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10758:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10758:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10778:2:13",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10751:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10751:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10751:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10801:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10812:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10797:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10797:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10817:34:13",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10790:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10790:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10790:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10872:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10883:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10868:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10868:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10888:16:13",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10861:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10861:44:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10861:44:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10914:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10926:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10937:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10922:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "10922:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10914:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10688:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10702:4:13",
														"type": ""
													}
												],
												"src": "10537:410:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11126:164:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11143:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11154:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11136:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11136:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11136:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11177:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11188:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11173:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11173:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11193:2:13",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11166:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11166:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11166:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11216:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11227:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11212:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11212:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11232:16:13",
																		"type": "",
																		"value": "Different want"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11205:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11205:44:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11205:44:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11258:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11270:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11281:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11266:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11266:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11258:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_84be5580ebe4458c333a4fbd253aad4689f1822f27fa0ce035cf3715b9d65a16__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11103:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11117:4:13",
														"type": ""
													}
												],
												"src": "10952:338:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11469:182:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11486:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11497:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11479:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11479:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11479:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11520:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11531:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11516:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11516:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11536:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11509:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11509:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11509:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11559:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11570:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11555:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11555:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11575:34:13",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11548:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11548:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11548:62:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11619:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11631:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11642:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11627:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11627:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11619:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11446:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11460:4:13",
														"type": ""
													}
												],
												"src": "11295:356:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11830:223:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11847:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11858:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11840:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11840:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11840:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11881:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11892:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11877:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11877:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11897:2:13",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11870:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11870:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11870:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11920:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11931:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11916:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11916:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11936:34:13",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11909:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11909:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11909:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11991:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12002:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11987:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11987:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12007:3:13",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11980:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "11980:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11980:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12020:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12032:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12043:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12028:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12028:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12020:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11807:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11821:4:13",
														"type": ""
													}
												],
												"src": "11656:397:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12232:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12249:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12260:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12242:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12242:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12242:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12283:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12294:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12279:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12279:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12299:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12272:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12272:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12272:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12322:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12333:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12318:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12318:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12338:34:13",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12311:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12311:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12311:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12393:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12404:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12389:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12389:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12409:7:13",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12382:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12382:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12382:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12426:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12438:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12449:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12434:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12434:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12426:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12209:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12223:4:13",
														"type": ""
													}
												],
												"src": "12058:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12638:171:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12655:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12666:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12648:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12648:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12648:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12689:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12700:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12685:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12685:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12705:2:13",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12678:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12678:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12678:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12728:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12739:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12724:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12724:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12744:23:13",
																		"type": "",
																		"value": "There is no candidate"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12717:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12717:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12717:51:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12777:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12789:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12800:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12785:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12785:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12777:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bd89e0da76576d0c02b1731f203bfb3440dbeacfaecd99d6f04131a27cd8ca1b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12615:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12629:4:13",
														"type": ""
													}
												],
												"src": "12464:345:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12988:226:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13005:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13016:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12998:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "12998:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12998:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13039:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13050:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13035:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13035:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13055:2:13",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13028:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13028:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13028:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13078:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13089:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13074:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13074:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13094:34:13",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13067:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13067:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13067:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13149:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13160:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13145:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13145:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13165:6:13",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13138:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13138:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13138:34:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13181:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13193:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13204:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13189:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13189:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13181:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12965:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12979:4:13",
														"type": ""
													}
												],
												"src": "12814:400:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13393:179:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13410:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13421:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13403:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13403:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13403:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13444:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13455:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13440:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13440:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13460:2:13",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13433:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13433:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13433:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13483:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13494:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13479:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13479:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13499:31:13",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13472:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13472:59:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13472:59:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13540:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13552:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13563:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13548:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13548:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13540:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13370:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13384:4:13",
														"type": ""
													}
												],
												"src": "13219:353:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13751:233:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13768:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13779:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13761:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13761:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13761:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13802:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13813:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13798:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13798:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13818:2:13",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13791:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13791:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13791:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13841:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13852:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13837:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13837:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13857:34:13",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13830:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13830:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13830:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13912:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13923:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13908:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13908:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13928:13:13",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13901:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13901:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13901:41:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13951:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13963:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13974:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13959:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "13959:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13951:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13728:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13742:4:13",
														"type": ""
													}
												],
												"src": "13577:407:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14163:232:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14180:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14191:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14173:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14173:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14173:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14214:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14225:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14210:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14210:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14230:2:13",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14203:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14203:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14203:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14253:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14264:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14249:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14249:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14269:34:13",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14242:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14242:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14242:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14324:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14335:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14320:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14320:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14340:12:13",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14313:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14313:40:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14313:40:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14362:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14374:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14385:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14370:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14370:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14362:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14140:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14154:4:13",
														"type": ""
													}
												],
												"src": "13989:406:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14574:181:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14591:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14602:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14584:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14584:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14584:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14625:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14636:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14621:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14621:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14641:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14614:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14614:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14614:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14664:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14675:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14660:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14660:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14680:33:13",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14653:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14653:61:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14653:61:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14723:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14735:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14746:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14731:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14731:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14723:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14551:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14565:4:13",
														"type": ""
													}
												],
												"src": "14400:355:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14934:227:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14951:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14962:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14944:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14944:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14944:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14985:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14996:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14981:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14981:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15001:2:13",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14974:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "14974:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14974:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15024:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15035:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15020:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15020:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15040:34:13",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15013:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15013:62:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15013:62:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15095:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15106:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15091:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15091:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15111:7:13",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15084:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15084:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15084:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15128:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15140:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15151:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15136:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15136:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15128:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14911:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14925:4:13",
														"type": ""
													}
												],
												"src": "14760:401:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15340:181:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15357:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15368:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15350:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15350:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15350:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15391:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15402:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15387:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15387:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15407:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15380:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15380:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15380:30:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15430:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15441:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15426:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15426:18:13"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15446:33:13",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15419:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15419:61:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15419:61:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15489:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15501:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15512:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15497:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15497:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15489:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15317:9:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15331:4:13",
														"type": ""
													}
												],
												"src": "15166:355:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15627:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15637:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15649:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15660:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15645:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15645:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15637:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15679:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15690:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15672:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15672:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15672:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15596:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15607:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15618:4:13",
														"type": ""
													}
												],
												"src": "15526:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15805:87:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15815:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15827:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15838:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15823:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15823:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15815:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15857:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "15872:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15880:4:13",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "15868:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15868:17:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15850:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15850:36:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15850:36:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15774:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15785:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15796:4:13",
														"type": ""
													}
												],
												"src": "15708:184:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15945:80:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15972:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "15974:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15974:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15974:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15961:1:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "15968:1:13"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "15964:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15964:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "15958:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "15958:13:13"
															},
															"nodeType": "YulIf",
															"src": "15955:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16003:16:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16014:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16017:1:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16010:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16010:9:13"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "16003:3:13"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15928:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15931:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "15937:3:13",
														"type": ""
													}
												],
												"src": "15897:128:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16076:171:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16107:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "16128:1:13"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "16135:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "16140:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "16131:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16131:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16121:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16121:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16121:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16172:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16175:4:13",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16165:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16165:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16165:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "16200:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16203:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "16193:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16193:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16193:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16096:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "16089:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16089:9:13"
															},
															"nodeType": "YulIf",
															"src": "16086:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16227:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16236:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16239:1:13"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "16232:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16232:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "16227:1:13"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16061:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16064:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "16070:1:13",
														"type": ""
													}
												],
												"src": "16030:217:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16304:116:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16363:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16365:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16365:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16365:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "16335:1:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "16328:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16328:9:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "16321:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16321:17:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "16343:1:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "16354:1:13",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "16350:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "16350:6:13"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "16358:1:13"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "16346:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16346:14:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "16340:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16340:21:13"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "16317:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16317:45:13"
															},
															"nodeType": "YulIf",
															"src": "16314:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16394:20:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16409:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16412:1:13"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "16405:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16405:9:13"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "16394:7:13"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16283:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16286:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "16292:7:13",
														"type": ""
													}
												],
												"src": "16252:168:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16474:76:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16496:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16498:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16498:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16498:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16490:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16493:1:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16487:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16487:8:13"
															},
															"nodeType": "YulIf",
															"src": "16484:2:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16527:17:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16539:1:13"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16542:1:13"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "16535:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16535:9:13"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "16527:4:13"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16456:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16459:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "16465:4:13",
														"type": ""
													}
												],
												"src": "16425:125:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16608:205:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16618:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16627:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "16622:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16687:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16712:3:13"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "16717:1:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16708:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16708:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "16731:3:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "16736:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16727:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16727:11:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "16721:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16721:18:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16701:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16701:39:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16701:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16648:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16651:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16645:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16645:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16659:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16661:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "16670:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16673:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16666:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16666:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "16661:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16641:3:13",
																"statements": []
															},
															"src": "16637:113:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16776:31:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16789:3:13"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "16794:6:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16785:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16785:16:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16803:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16778:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16778:27:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16778:27:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16765:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16768:6:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16762:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16762:13:13"
															},
															"nodeType": "YulIf",
															"src": "16759:2:13"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "16586:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "16591:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16596:6:13",
														"type": ""
													}
												],
												"src": "16555:258:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16873:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16883:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16897:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "16900:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "16893:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16893:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "16883:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16914:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "16944:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16950:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "16940:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16940:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "16918:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16991:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16993:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "17007:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17015:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "17003:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17003:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "16993:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "16971:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "16964:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "16964:26:13"
															},
															"nodeType": "YulIf",
															"src": "16961:2:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17081:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17102:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17109:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "17114:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "17105:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17105:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "17095:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17095:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17095:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17146:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17149:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "17139:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17139:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17139:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17174:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17177:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "17167:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17167:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17167:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "17037:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "17060:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17068:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "17057:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17057:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "17034:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17034:38:13"
															},
															"nodeType": "YulIf",
															"src": "17031:2:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "16853:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16862:6:13",
														"type": ""
													}
												],
												"src": "16818:380:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17235:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17252:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17259:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17264:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "17255:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17255:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17245:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17245:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17245:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17292:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17295:4:13",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17285:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17285:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17285:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17316:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17319:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "17309:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17309:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17309:15:13"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "17203:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17367:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17384:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17391:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17396:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "17387:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17387:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17377:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17377:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17377:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17424:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17427:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17417:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17417:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17417:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17448:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17451:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "17441:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17441:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17441:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "17335:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17512:86:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17576:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17585:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17588:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "17578:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17578:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17578:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17535:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "17546:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "17561:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "17566:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "17557:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17557:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "17570:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "17553:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "17553:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "17542:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17542:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "17532:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17532:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "17525:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "17525:50:13"
															},
															"nodeType": "YulIf",
															"src": "17522:2:13"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17501:5:13",
														"type": ""
													}
												],
												"src": "17467:131:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), array)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20Upgradeable_$1077_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IStrategy_$1972t_string_memory_ptrt_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value3, value3) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(value3, value3) }\n        value2 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20Upgradeable_$1077__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IStrategy_$1972__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68d78fa197bf0b20149fd726ff33ff5aa05819c7985dd8bf3f524bc84a6e33c8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Delay has not passed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6b08df48b67a8acda5828e85af8c62865fe7bd53995164d29920fdc8d1b5e5d9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"!token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d06d9f1cf1cb47b4c164a82a99136bb279d51ecac86ea5fd348be592f7bfe2e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Proposal not valid for this Vaul\")\n        mstore(add(headStart, 96), \"t\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_84be5580ebe4458c333a4fbd253aad4689f1822f27fa0ce035cf3715b9d65a16__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Different want\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_bd89e0da76576d0c02b1731f203bfb3440dbeacfaecd99d6f04131a27cd8ca1b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"There is no candidate\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106101f25760003560e01c806384276d811161010d578063b6b55f25116100a0578063de5f62681161006f578063de5f62681461056a578063def68a9c1461057f578063e2d1e75c1461059f578063e6685244146105b5578063f2fde38b146105ca57600080fd5b8063b6b55f251461050d578063d389800f1461052d578063db6b524614610542578063dd62ed3e1461054a57600080fd5b8063a457c2d7116100dc578063a457c2d714610498578063a8c62e76146104b8578063a9059cbb146104d8578063b69ef8a8146104f857600080fd5b806384276d8114610430578063853828b6146104505780638da5cb5b1461046557806395d89b411461048357600080fd5b8063482fe0241161018557806370a082311161015457806370a082311461038d578063715018a6146103c357806376dfabb8146103d857806377c7b8fc1461041b57600080fd5b8063482fe0241461032357806348a0d754146103385780634d12d4b61461034d5780635b12ff9b1461036d57600080fd5b806323b872dd116101c157806323b872dd146102a55780632e1a7d4d146102c5578063313ce567146102e7578063395093511461030357600080fd5b806306fdde03146101fe578063095ea7b31461022957806318160ddd146102595780631f1fcd511461027857600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b506102136105ea565b60405161022091906125ae565b60405180910390f35b34801561023557600080fd5b5061024961024436600461249c565b61067c565b6040519015158152602001610220565b34801561026557600080fd5b506035545b604051908152602001610220565b34801561028457600080fd5b5061028d610694565b6040516001600160a01b039091168152602001610220565b3480156102b157600080fd5b506102496102c036600461245c565b610716565b3480156102d157600080fd5b506102e56102e0366004612562565b61073a565b005b3480156102f357600080fd5b5060405160128152602001610220565b34801561030f57600080fd5b5061024961031e36600461249c565b610934565b34801561032f57600080fd5b506102e5610956565b34801561034457600080fd5b5061026a610971565b34801561035957600080fd5b506102e56103683660046124e7565b6109f4565b34801561037957600080fd5b506102e56103883660046123e5565b610b40565b34801561039957600080fd5b5061026a6103a83660046123e5565b6001600160a01b031660009081526033602052604090205490565b3480156103cf57600080fd5b506102e5610d53565b3480156103e457600080fd5b5060c95460ca546103fc916001600160a01b03169082565b604080516001600160a01b039093168352602083019190915201610220565b34801561042757600080fd5b5061026a610d65565b34801561043c57600080fd5b506102e561044b366004612562565b610da9565b34801561045c57600080fd5b506102e561101b565b34801561047157600080fd5b506065546001600160a01b031661028d565b34801561048f57600080fd5b50610213611034565b3480156104a457600080fd5b506102496104b336600461249c565b611043565b3480156104c457600080fd5b5060cb5461028d906001600160a01b031681565b3480156104e457600080fd5b506102496104f336600461249c565b6110be565b34801561050457600080fd5b5061026a6110cc565b34801561051957600080fd5b506102e5610528366004612562565b6111d4565b34801561053957600080fd5b506102e56112e0565b6102e561136a565b34801561055657600080fd5b5061026a610565366004612424565b6114b1565b34801561057657600080fd5b506102e56114dc565b34801561058b57600080fd5b506102e561059a3660046123e5565b611560565b3480156105ab57600080fd5b5061026a60cc5481565b3480156105c157600080fd5b506102e561164e565b3480156105d657600080fd5b506102e56105e53660046123e5565b6117d9565b6060603680546105f9906126c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906126c6565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050905090565b60003361068a81858561184f565b5060019392505050565b60cb5460408051631f1fcd5160e01b815290516000926001600160a01b031691631f1fcd51916004808301926020929190829003018186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190612408565b905090565b600033610724858285611973565b61072f8585856119e7565b506001949350505050565b600061074560355490565b8261074e6110cc565b6107589190612664565b6107629190612644565b905061076e3383611b92565b6000610778610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f1919061257a565b9050818110156109125760006108078284612683565b60cb54604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b505050506000610870610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061257a565b905060006108f78483612683565b90508281101561090e5761090b818561262c565b94505b5050505b61092f338361091f610694565b6001600160a01b03169190611cc6565b505050565b60003361068a81858561094783836114b1565b610951919061262c565b61184f565b3360009081526033602052604090205461096f90610da9565b565b600061097b610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610711919061257a565b600054610100900460ff1615808015610a145750600054600160ff909116105b80610a2e5750303b158015610a2e575060005460ff166001145b610a965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610ab9576000805461ff0019166101001790555b610ac38484611d29565b610acb611d5a565b610ad3611d89565b60cb80546001600160a01b0319166001600160a01b03871617905560cc8290558015610b39576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610b48611db8565b806001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190612408565b6001600160a01b0316306001600160a01b031614610c235760405162461bcd60e51b815260206004820152602160248201527f50726f706f73616c206e6f742076616c696420666f722074686973205661756c6044820152601d60fa1b6064820152608401610a8d565b806001600160a01b0316631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190612408565b6001600160a01b0316610ca5610694565b6001600160a01b031614610cec5760405162461bcd60e51b815260206004820152600e60248201526d111a5999995c995b9d081dd85b9d60921b6044820152606401610a8d565b6040805180820182526001600160a01b03831680825242602092830181905260c980546001600160a01b0319168317905560ca5591519182527f1aae2ec5647db56da2d513de40528ba3565c6057525637050660c4323bbac7df910160405180910390a150565b610d5b611db8565b61096f6000611e12565b6000610d7060355490565b15610d9c57603554610d806110cc565b610d9290670de0b6b3a7640000612664565b6107119190612644565b50670de0b6b3a764000090565b6000610db460355490565b82610dbd6110cc565b610dc79190612664565b610dd19190612644565b9050610ddd3383611b92565b6000610de7610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610e2857600080fd5b505afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e60919061257a565b905081811015610f81576000610e768284612683565b60cb54604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015610ebd57600080fd5b505af1158015610ed1573d6000803e3d6000fd5b505050506000610edf610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f58919061257a565b90506000610f668483612683565b905082811015610f7d57610f7a818561262c565b94505b5050505b610f89610694565b6001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b8152600401610fb691815260200190565b600060405180830381600087803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b505060405133925084156108fc02915084906000818181858888f19350505050158015611015573d6000803e3d6000fd5b50505050565b3360009081526033602052604090205461096f9061073a565b6060603780546105f9906126c6565b6000338161105182866114b1565b9050838110156110b15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a8d565b61072f828686840361184f565b60003361068a8185856119e7565b60cb546040805163722713f760e01b815290516000926001600160a01b03169163722713f7916004808301926020929190829003018186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061257a565b611151610694565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561119257600080fd5b505afa1580156111a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca919061257a565b610711919061262c565b6111dc611e64565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b50505050600061124e6110cc565b905061126f33308461125e610694565b6001600160a01b0316929190611ebe565b6112776112e0565b60006112816110cc565b905061128d8282612683565b9250600061129a60355490565b6112a55750826112c6565b826112af60355490565b6112b99086612664565b6112c39190612644565b90505b6112d03382611ef6565b5050506112dd6001609755565b50565b60006112ea610971565b60cb54909150611306906001600160a01b03168261091f610694565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561135657600080fd5b505af1158015610b39573d6000803e3d6000fd5b611372611e64565b60cb60009054906101000a90046001600160a01b03166001600160a01b031663573fef0a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b5050505060006113e46110cc565b9050346113ef610694565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561142957600080fd5b505af115801561143d573d6000803e3d6000fd5b505050505061144a6112e0565b60006114546110cc565b90506114608382612683565b9150600061146d60355490565b611478575081611499565b8361148260355490565b61148c9085612664565b6114969190612644565b90505b6114a33382611ef6565b5050505061096f6001609755565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61096f6114e7610694565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561152857600080fd5b505afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610528919061257a565b611568611db8565b611570610694565b6001600160a01b0316816001600160a01b031614156115ba5760405162461bcd60e51b815260206004820152600660248201526510ba37b5b2b760d11b6044820152606401610a8d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611634919061257a565b905061164a6001600160a01b0383163383611cc6565b5050565b611656611db8565b60c9546001600160a01b03166116a65760405162461bcd60e51b81526020600482015260156024820152745468657265206973206e6f2063616e64696461746560581b6044820152606401610a8d565b60cc5460ca5442916116b79161262c565b106116fb5760405162461bcd60e51b815260206004820152601460248201527311195b185e481a185cc81b9bdd081c185cdcd95960621b6044820152606401610a8d565b60c9546040516001600160a01b0390911681527f7f37d440e85aba7fbf641c4bda5ca4ef669a80bffaacde2aa8d9feb1b048c82c9060200160405180910390a160cb60009054906101000a90046001600160a01b03166001600160a01b031663fb6177876040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561178b57600080fd5b505af115801561179f573d6000803e3d6000fd5b505060c9805460cb80546001600160a01b03199081166001600160a01b03841617909155169055505064012a05f20060ca5561096f6112e0565b6117e1611db8565b6001600160a01b0381166118465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a8d565b6112dd81611e12565b6001600160a01b0383166118b15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a8d565b6001600160a01b0382166119125760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a8d565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061197f84846114b1565b9050600019811461101557818110156119da5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a8d565b611015848484840361184f565b6001600160a01b038316611a4b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a8d565b6001600160a01b038216611aad5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a8d565b6001600160a01b03831660009081526033602052604090205481811015611b255760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a8d565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b859086815260200190565b60405180910390a3611015565b6001600160a01b038216611bf25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a8d565b6001600160a01b03821660009081526033602052604090205481811015611c665760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a8d565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261092f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fbe565b600054610100900460ff16611d505760405162461bcd60e51b8152600401610a8d906125e1565b61164a8282612093565b600054610100900460ff16611d815760405162461bcd60e51b8152600401610a8d906125e1565b61096f6120e1565b600054610100900460ff16611db05760405162461bcd60e51b8152600401610a8d906125e1565b61096f612111565b6065546001600160a01b0316331461096f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a8d565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026097541415611eb75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a8d565b6002609755565b6040516001600160a01b03808516602483015283166044820152606481018290526110159085906323b872dd60e01b90608401611cf2565b6001600160a01b038216611f4c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a8d565b8060356000828254611f5e919061262c565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001609755565b6000612013826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121389092919063ffffffff16565b905080516000148061203457508080602001905181019061203491906124c7565b61092f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a8d565b600054610100900460ff166120ba5760405162461bcd60e51b8152600401610a8d906125e1565b81516120cd9060369060208501906122c5565b50805161092f9060379060208401906122c5565b600054610100900460ff166121085760405162461bcd60e51b8152600401610a8d906125e1565b61096f33611e12565b600054610100900460ff16611fb75760405162461bcd60e51b8152600401610a8d906125e1565b6060612147848460008561214f565b949350505050565b6060824710156121b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a8d565b600080866001600160a01b031685876040516121cc9190612592565b60006040518083038185875af1925050503d8060008114612209576040519150601f19603f3d011682016040523d82523d6000602084013e61220e565b606091505b509150915061221f8783838761222a565b979650505050505050565b6060831561229657825161228f576001600160a01b0385163b61228f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a8d565b5081612147565b61214783838151156122ab5781518083602001fd5b8060405162461bcd60e51b8152600401610a8d91906125ae565b8280546122d1906126c6565b90600052602060002090601f0160209004810192826122f35760008555612339565b82601f1061230c57805160ff1916838001178555612339565b82800160010185558215612339579182015b8281111561233957825182559160200191906001019061231e565b50612345929150612349565b5090565b5b80821115612345576000815560010161234a565b600082601f83011261236e578081fd5b813567ffffffffffffffff8082111561238957612389612717565b604051601f8301601f19908116603f011681019082821181831017156123b1576123b1612717565b816040528381528660208588010111156123c9578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156123f6578081fd5b81356124018161272d565b9392505050565b600060208284031215612419578081fd5b81516124018161272d565b60008060408385031215612436578081fd5b82356124418161272d565b915060208301356124518161272d565b809150509250929050565b600080600060608486031215612470578081fd5b833561247b8161272d565b9250602084013561248b8161272d565b929592945050506040919091013590565b600080604083850312156124ae578182fd5b82356124b98161272d565b946020939093013593505050565b6000602082840312156124d8578081fd5b81518015158114612401578182fd5b600080600080608085870312156124fc578081fd5b84356125078161272d565b9350602085013567ffffffffffffffff80821115612523578283fd5b61252f8883890161235e565b94506040870135915080821115612544578283fd5b506125518782880161235e565b949793965093946060013593505050565b600060208284031215612573578081fd5b5035919050565b60006020828403121561258b578081fd5b5051919050565b600082516125a481846020870161269a565b9190910192915050565b60208152600082518060208401526125cd81604085016020870161269a565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111561263f5761263f612701565b500190565b60008261265f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561267e5761267e612701565b500290565b60008282101561269557612695612701565b500390565b60005b838110156126b557818101518382015260200161269d565b838111156110155750506000910152565b600181811c908216806126da57607f821691505b602082108114156126fb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112dd57600080fdfea2646970667358221220ac267001eb9a172aebdd86e5e4489fe96e16d560eb3511147be4c85755b4cdf264736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1F2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x84276D81 GT PUSH2 0x10D JUMPI DUP1 PUSH4 0xB6B55F25 GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xDE5F6268 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDE5F6268 EQ PUSH2 0x56A JUMPI DUP1 PUSH4 0xDEF68A9C EQ PUSH2 0x57F JUMPI DUP1 PUSH4 0xE2D1E75C EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xE6685244 EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x50D JUMPI DUP1 PUSH4 0xD389800F EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0xDB6B5246 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xA8C62E76 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D8 JUMPI DUP1 PUSH4 0xB69EF8A8 EQ PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x84276D81 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x853828B6 EQ PUSH2 0x450 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x465 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x482FE024 GT PUSH2 0x185 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x154 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x76DFABB8 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x77C7B8FC EQ PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x482FE024 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x48A0D754 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0x4D12D4B6 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0x5B12FF9B EQ PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x1F1FCD51 EQ PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1F9 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x213 PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x220 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x67C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x245C JUMP JUMPDEST PUSH2 0x716 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x934 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x956 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x971 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x9F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0xB40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x3A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0xD53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH1 0xCA SLOAD PUSH2 0x3FC SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x220 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0xD65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0xDA9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x101B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x28D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x213 PUSH2 0x1034 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x1043 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCB SLOAD PUSH2 0x28D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x4F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x10BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x10CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x11D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x136A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x14B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x14DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0x1560 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0xCC SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x164E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x5E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x23E5 JUMP JUMPDEST PUSH2 0x17D9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x5F9 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x625 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x672 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x647 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x672 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x655 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x184F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x1F1FCD51 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x1F1FCD51 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x724 DUP6 DUP3 DUP6 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x72F DUP6 DUP6 DUP6 PUSH2 0x19E7 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x745 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST DUP3 PUSH2 0x74E PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x758 SWAP2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP PUSH2 0x76E CALLER DUP4 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x778 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F1 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 PUSH2 0x807 DUP3 DUP5 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x862 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x870 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E9 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8F7 DUP5 DUP4 PUSH2 0x2683 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x90E JUMPI PUSH2 0x90B DUP2 DUP6 PUSH2 0x262C JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH2 0x92F CALLER DUP4 PUSH2 0x91F PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x1CC6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x947 DUP4 DUP4 PUSH2 0x14B1 JUMP JUMPDEST PUSH2 0x951 SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH2 0x184F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x96F SWAP1 PUSH2 0xDA9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97B PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0xA14 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0xA2E JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA2E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xA96 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xAB9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xAC3 DUP5 DUP5 PUSH2 0x1D29 JUMP JUMPDEST PUSH2 0xACB PUSH2 0x1D5A JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0x1D89 JUMP JUMPDEST PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND OR SWAP1 SSTORE PUSH1 0xCC DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xB39 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB48 PUSH2 0x1DB8 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB95 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F706F73616C206E6F742076616C696420666F722074686973205661756C PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F1FCD51 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC94 SWAP2 SWAP1 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCA5 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x111A5999995C995B9D081DD85B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP3 MSTORE TIMESTAMP PUSH1 0x20 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0xCA SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x1AAE2EC5647DB56DA2D513DE40528BA3565C6057525637050660C4323BBAC7DF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD5B PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0x96F PUSH1 0x0 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD70 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD9C JUMPI PUSH1 0x35 SLOAD PUSH2 0xD80 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0xD92 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB4 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST DUP3 PUSH2 0xDBD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0xDD1 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP PUSH2 0xDDD CALLER DUP4 PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE7 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE60 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 PUSH2 0xE76 DUP3 DUP5 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xED1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xEDF PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF58 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF66 DUP5 DUP4 PUSH2 0x2683 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xF7D JUMPI PUSH2 0xF7A DUP2 DUP6 PUSH2 0x262C JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH2 0xF89 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFB6 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFE4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD CALLER SWAP3 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP2 POP DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1015 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x96F SWAP1 PUSH2 0x73A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x5F9 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x1051 DUP3 DUP7 PUSH2 0x14B1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x72F DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x184F JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x68A DUP2 DUP6 DUP6 PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x722713F7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x722713F7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1125 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1149 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x1151 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x711 SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH2 0x11DC PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x573FEF0A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x122C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1240 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x124E PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x126F CALLER ADDRESS DUP5 PUSH2 0x125E PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 SWAP1 PUSH2 0x1EBE JUMP JUMPDEST PUSH2 0x1277 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x128D DUP3 DUP3 PUSH2 0x2683 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH2 0x129A PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12A5 JUMPI POP DUP3 PUSH2 0x12C6 JUMP JUMPDEST DUP3 PUSH2 0x12AF PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12B9 SWAP1 DUP7 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x12C3 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x12D0 CALLER DUP3 PUSH2 0x1EF6 JUMP JUMPDEST POP POP POP PUSH2 0x12DD PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12EA PUSH2 0x971 JUMP JUMPDEST PUSH1 0xCB SLOAD SWAP1 SWAP2 POP PUSH2 0x1306 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH2 0x91F PUSH2 0x694 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1372 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x573FEF0A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x13E4 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x13EF PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x143D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x144A PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1454 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP PUSH2 0x1460 DUP4 DUP3 PUSH2 0x2683 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x146D PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1478 JUMPI POP DUP2 PUSH2 0x1499 JUMP JUMPDEST DUP4 PUSH2 0x1482 PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x148C SWAP1 DUP6 PUSH2 0x2664 JUMP JUMPDEST PUSH2 0x1496 SWAP2 SWAP1 PUSH2 0x2644 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x14A3 CALLER DUP3 PUSH2 0x1EF6 JUMP JUMPDEST POP POP POP POP PUSH2 0x96F PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x14E7 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x153C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x528 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST PUSH2 0x1568 PUSH2 0x1DB8 JUMP JUMPDEST PUSH2 0x1570 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x15BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x10BA37B5B2B7 PUSH1 0xD1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1610 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1634 SWAP2 SWAP1 PUSH2 0x257A JUMP JUMPDEST SWAP1 POP PUSH2 0x164A PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND CALLER DUP4 PUSH2 0x1CC6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1656 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x16A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x5468657265206973206E6F2063616E646964617465 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0xCC SLOAD PUSH1 0xCA SLOAD TIMESTAMP SWAP2 PUSH2 0x16B7 SWAP2 PUSH2 0x262C JUMP JUMPDEST LT PUSH2 0x16FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x11195B185E481A185CC81B9BDD081C185CDCD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH32 0x7F37D440E85ABA7FBF641C4BDA5CA4EF669A80BFFAACDE2AA8D9FEB1B048C82C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xCB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB617787 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x178B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x179F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0xC9 DUP1 SLOAD PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE POP POP PUSH5 0x12A05F200 PUSH1 0xCA SSTORE PUSH2 0x96F PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x17E1 PUSH2 0x1DB8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x12DD DUP2 PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1912 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197F DUP5 DUP5 PUSH2 0x14B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1015 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x19DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH2 0x1015 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x184F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1B25 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1B85 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1BF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1C66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x92F SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1FBE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D50 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x164A DUP3 DUP3 PUSH2 0x2093 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x20E1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F PUSH2 0x2111 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x96F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x97 SLOAD EQ ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x2 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1015 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1F4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1F5E SWAP2 SWAP1 PUSH2 0x262C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x97 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2013 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2138 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x2034 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2034 SWAP2 SWAP1 PUSH2 0x24C7 JUMP JUMPDEST PUSH2 0x92F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x20CD SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x22C5 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x92F SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x22C5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2108 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH2 0x96F CALLER PUSH2 0x1E12 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FB7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2147 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x214F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x21B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA8D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x21CC SWAP2 SWAP1 PUSH2 0x2592 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2209 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x220E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x221F DUP8 DUP4 DUP4 DUP8 PUSH2 0x222A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2296 JUMPI DUP3 MLOAD PUSH2 0x228F JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x228F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA8D JUMP JUMPDEST POP DUP2 PUSH2 0x2147 JUMP JUMPDEST PUSH2 0x2147 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x22AB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA8D SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x22D1 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x22F3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2339 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x230C JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2339 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2339 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2339 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x231E JUMP JUMPDEST POP PUSH2 0x2345 SWAP3 SWAP2 POP PUSH2 0x2349 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2345 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x234A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x236E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2389 JUMPI PUSH2 0x2389 PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x23B1 JUMPI PUSH2 0x23B1 PUSH2 0x2717 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x23C9 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2401 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2419 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2401 DUP2 PUSH2 0x272D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2436 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2441 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2451 DUP2 PUSH2 0x272D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2470 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x247B DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x248B DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24AE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24B9 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2401 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x24FC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2507 DUP2 PUSH2 0x272D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2523 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x252F DUP9 DUP4 DUP10 ADD PUSH2 0x235E JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2544 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x2551 DUP8 DUP3 DUP9 ADD PUSH2 0x235E JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2573 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x258B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25A4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x269A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x25CD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x269A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x263F JUMPI PUSH2 0x263F PUSH2 0x2701 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x265F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x267E JUMPI PUSH2 0x267E PUSH2 0x2701 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2695 JUMPI PUSH2 0x2695 PUSH2 0x2701 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26B5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x269D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1015 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x26DA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x26FB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12DD JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0x26 PUSH17 0x1EB9A172AEBDD86E5E4489FE96E16D560 0xEB CALLDATALOAD GT EQ PUSH28 0xE4C85755B4CDF264736F6C6343000804003300000000000000000000 ",
							"sourceMap": "735:8381:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4802:197;;;;;;;;;;-1:-1:-1;4802:197:3;;;;;:::i;:::-;;:::i;:::-;;;5589:14:13;;5582:22;5564:41;;5552:2;5537:18;4802:197:3;5519:92:13;3613:106:3;;;;;;;;;;-1:-1:-1;3700:12:3;;3613:106;;;15672:25:13;;;15660:2;15645:18;3613:106:3;15627:76:13;2228:114:12;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;4721:32:13;;;4703:51;;4691:2;4676:18;2228:114:12;4658:102:13;5561:256:3;;;;;;;;;;-1:-1:-1;5561:256:3;;;;;:::i;:::-;;:::i;6071:527:12:-;;;;;;;;;;-1:-1:-1;6071:527:12;;;;;:::i;:::-;;:::i;:::-;;3462:91:3;;;;;;;;;;-1:-1:-1;3462:91:3;;3544:2;6228:36:13;;6216:2;6201:18;3462:91:3;6183:87:13;6212:234:3;;;;;;;;;;-1:-1:-1;6212:234:3;;;;;:::i;:::-;;:::i;5748:92:12:-;;;;;;;;;;;;;:::i;3030:106::-;;;;;;;;;;;;;:::i;1919:303::-;;;;;;;;;;-1:-1:-1;1919:303:12;;;;;:::i;:::-;;:::i;7498:415::-;;;;;;;;;;-1:-1:-1;7498:415:12;;;;;:::i;:::-;;:::i;3777:125:3:-;;;;;;;;;;-1:-1:-1;3777:125:3;;;;;:::i;:::-;-1:-1:-1;;;;;3877:18:3;3851:7;3877:18;;;:9;:18;;;;;;;3777:125;2085:101:0;;;;;;;;;;;;;:::i;1033:36:12:-;;;;;;;;;;-1:-1:-1;1033:36:12;;;;;;-1:-1:-1;;;;;1033:36:12;;;;;;;;-1:-1:-1;;;;;5337:32:13;;;5319:51;;5401:2;5386:18;;5379:34;;;;5292:18;1033:36:12;5274:145:13;3352:148:12;;;;;;;;;;;;;:::i;6751:583::-;;;;;;;;;;-1:-1:-1;6751:583:12;;;;;:::i;:::-;;:::i;5566:80::-;;;;;;;;;;;;;:::i;1462:85:0:-;;;;;;;;;;-1:-1:-1;1534:6:0;;-1:-1:-1;;;;;1534:6:0;1462:85;;2727:102:3;;;;;;;;;;;;;:::i;6933:427::-;;;;;;;;;;-1:-1:-1;6933:427:3;;;;;:::i;:::-;;:::i;1126:25:12:-;;;;;;;;;;-1:-1:-1;1126:25:12;;;;-1:-1:-1;;;;;1126:25:12;;;4098:189:3;;;;;;;;;;-1:-1:-1;4098:189:3;;;;;:::i;:::-;;:::i;2612:135:12:-;;;;;;;;;;;;;:::i;3880:537::-;;;;;;;;;;-1:-1:-1;3880:537:12;;;;;:::i;:::-;;:::i;5321:145::-;;;;;;;;;;;;;:::i;4586:574::-;;;:::i;4345:149:3:-;;;;;;;;;;-1:-1:-1;4345:149:3;;;;;:::i;:::-;;:::i;3599:85:12:-;;;;;;;;;;;;;:::i;8807:272::-;;;;;;;;;;-1:-1:-1;8807:272:12;;;;;:::i;:::-;;:::i;1238:28::-;;;;;;;;;;;;;;;;8153:511;;;;;;;;;;;;;:::i;2335:198:0:-;;;;;;;;;;-1:-1:-1;2335:198:0;;;;;:::i;:::-;;:::i;2516:98:3:-;2570:13;2602:5;2595:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:98;:::o;4802:197::-;4885:4;965:10:9;4939:32:3;965:10:9;4955:7:3;4964:6;4939:8;:32::i;:::-;-1:-1:-1;4988:4:3;;4802:197;-1:-1:-1;;;4802:197:3:o;2228:114:12:-;2319:8;;:15;;;-1:-1:-1;;;2319:15:12;;;;2265:17;;-1:-1:-1;;;;;2319:8:12;;:13;;:15;;;;;;;;;;;;;;:8;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2294:41;;2228:114;:::o;5561:256:3:-;5658:4;965:10:9;5714:38:3;5730:4;965:10:9;5745:6:3;5714:15;:38::i;:::-;5762:27;5772:4;5778:2;5782:6;5762:9;:27::i;:::-;-1:-1:-1;5806:4:3;;5561:256;-1:-1:-1;;;;5561:256:3:o;6071:527:12:-;6123:9;6159:13;3700:12:3;;;3613:106;6159:13:12;6148:7;6136:9;:7;:9::i;:::-;:19;;;;:::i;:::-;6135:37;;;;:::i;:::-;6123:49;;6182:26;6188:10;6200:7;6182:5;:26::i;:::-;6219:6;6228;:4;:6::i;:::-;:31;;-1:-1:-1;;;6228:31:12;;6253:4;6228:31;;;4703:51:13;-1:-1:-1;;;;;6228:16:12;;;;;;;4676:18:13;;6228:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6219:40;;6277:1;6273;:5;6269:278;;;6294:14;6311:5;6315:1;6311;:5;:::i;:::-;6330:8;;:28;;-1:-1:-1;;;6330:28:12;;;;;15672:25:13;;;6294:22:12;;-1:-1:-1;;;;;;6330:8:12;;:17;;15645:18:13;;6330:28:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6372:11;6386:6;:4;:6::i;:::-;:31;;-1:-1:-1;;;6386:31:12;;6411:4;6386:31;;;4703:51:13;-1:-1:-1;;;;;6386:16:12;;;;;;;4676:18:13;;6386:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6372:45;-1:-1:-1;6431:10:12;6444;6453:1;6372:45;6444:10;:::i;:::-;6431:23;;6480:9;6472:5;:17;6468:69;;;6513:9;6517:5;6513:1;:9;:::i;:::-;6509:13;;6468:69;6269:278;;;;6557:34;6577:10;6589:1;6557:6;:4;:6::i;:::-;-1:-1:-1;;;;;6557:19:12;;:34;:19;:34::i;:::-;6071:527;;;:::o;6212:234:3:-;6300:4;965:10:9;6354:64:3;965:10:9;6370:7:3;6407:10;6379:25;965:10:9;6370:7:3;6379:9;:25::i;:::-;:38;;;;:::i;:::-;6354:8;:64::i;5748:92:12:-;5821:10;3851:7:3;3877:18;;;:9;:18;;;;;;5796:37:12;;6751:583;:::i;5796:37::-;5748:92::o;3030:106::-;3072:7;3098:6;:4;:6::i;:::-;:31;;-1:-1:-1;;;3098:31:12;;3123:4;3098:31;;;4703:51:13;-1:-1:-1;;;;;3098:16:12;;;;;;;4676:18:13;;3098:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1919:303::-;3279:19:1;3302:13;;;;;;3301:14;;3347:34;;;;-1:-1:-1;3365:12:1;;3380:1;3365:12;;;;:16;3347:34;3346:108;;;-1:-1:-1;3426:4:1;1713:19:8;:23;;;3387:66:1;;-1:-1:-1;3436:12:1;;;;;:17;3387:66;3325:201;;;;-1:-1:-1;;;3325:201:1;;10739:2:13;3325:201:1;;;10721:21:13;10778:2;10758:18;;;10751:30;10817:34;10797:18;;;10790:62;-1:-1:-1;;;10868:18:13;;;10861:44;10922:19;;3325:201:1;;;;;;;;;3536:12;:16;;-1:-1:-1;;3536:16:1;3551:1;3536:16;;;3562:65;;;;3596:13;:20;;-1:-1:-1;;3596:20:1;;;;;3562:65;2057:28:12::1;2070:5;2077:7;2057:12;:28::i;:::-;2095:16;:14;:16::i;:::-;2121:24;:22;:24::i;:::-;2155:8;:20:::0;;-1:-1:-1;;;;;;2155:20:12::1;-1:-1:-1::0;;;;;2155:20:12;::::1;;::::0;;2185:13:::1;:30:::0;;;3647:99:1;;;;3697:5;3681:21;;-1:-1:-1;;3681:21:1;;;3721:14;;-1:-1:-1;6228:36:13;;3721:14:1;;6216:2:13;6201:18;3721:14:1;;;;;;;3647:99;1919:303:12;;;;;:::o;7498:415::-;1355:13:0;:11;:13::i;:::-;7607:15:12::1;-1:-1:-1::0;;;;;7597:32:12::1;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;7580:51:12::1;7588:4;-1:-1:-1::0;;;;;7580:51:12::1;;7572:97;;;::::0;-1:-1:-1;;;7572:97:12;;10337:2:13;7572:97:12::1;::::0;::::1;10319:21:13::0;10376:2;10356:18;;;10349:30;10415:34;10395:18;;;10388:62;-1:-1:-1;;;10466:18:13;;;10459:31;10507:19;;7572:97:12::1;10309:223:13::0;7572:97:12::1;7707:15;-1:-1:-1::0;;;;;7697:31:12::1;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;7687:43:12::1;:6;:4;:6::i;:::-;-1:-1:-1::0;;;;;7687:43:12::1;;7679:70;;;::::0;-1:-1:-1;;;7679:70:12;;11154:2:13;7679:70:12::1;::::0;::::1;11136:21:13::0;11193:2;11173:18;;;11166:30;-1:-1:-1;;;11212:18:13;;;11205:44;11266:18;;7679:70:12::1;11126:164:13::0;7679:70:12::1;7776:80;::::0;;;;::::1;::::0;;-1:-1:-1;;;;;7776:80:12;::::1;::::0;;;7839:15:::1;7776:80;::::0;;::::1;::::0;;;7759:14:::1;:97:::0;;-1:-1:-1;;;;;;7759:97:12::1;::::0;::::1;::::0;;;;7872:34;;4703:51:13;;;7872:34:12::1;::::0;4676:18:13;7872:34:12::1;;;;;;;7498:415:::0;:::o;2085:101:0:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;3352:148:12:-:0;3405:7;3431:13;3700:12:3;;;3613:106;3431:13:12;:18;:62;;3700:12:3;;3460:9:12;:7;:9::i;:::-;:16;;3472:4;3460:16;:::i;:::-;3459:34;;;;:::i;3431:62::-;-1:-1:-1;3452:4:12;;3352:148::o;6751:583::-;6809:9;6845:13;3700:12:3;;;3613:106;6845:13:12;6834:7;6822:9;:7;:9::i;:::-;:19;;;;:::i;:::-;6821:37;;;;:::i;:::-;6809:49;;6868:26;6874:10;6886:7;6868:5;:26::i;:::-;6905:6;6914;:4;:6::i;:::-;:31;;-1:-1:-1;;;6914:31:12;;6939:4;6914:31;;;4703:51:13;-1:-1:-1;;;;;6914:16:12;;;;;;;4676:18:13;;6914:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6905:40;;6963:1;6959;:5;6955:278;;;6980:14;6997:5;7001:1;6997;:5;:::i;:::-;7016:8;;:28;;-1:-1:-1;;;7016:28:12;;;;;15672:25:13;;;6980:22:12;;-1:-1:-1;;;;;;7016:8:12;;:17;;15645:18:13;;7016:28:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7058:11;7072:6;:4;:6::i;:::-;:31;;-1:-1:-1;;;7072:31:12;;7097:4;7072:31;;;4703:51:13;-1:-1:-1;;;;;7072:16:12;;;;;;;4676:18:13;;7072:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7058:45;-1:-1:-1;7117:10:12;7130;7139:1;7058:45;7130:10;:::i;:::-;7117:23;;7166:9;7158:5;:17;7154:69;;;7199:9;7203:5;7199:1;:9;:::i;:::-;7195:13;;7154:69;6955:278;;;;7266:6;:4;:6::i;:::-;-1:-1:-1;;;;;7243:40:12;;7284:1;7243:43;;;;;;;;;;;;;15672:25:13;;15660:2;15645:18;;15627:76;7243:43:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7296:31:12;;7304:10;;-1:-1:-1;7296:31:12;;;;;-1:-1:-1;7325:1:12;;7296:31;;;;7325:1;7304:10;7296:31;;;;;;;;;;;;;;;;;;;;;6751:583;;;:::o;5566:80::-;5627:10;3851:7:3;3877:18;;;:9;:18;;;;;;5608:31:12;;6071:527;:::i;2727:102:3:-;2783:13;2815:7;2808:14;;;;;:::i;6933:427::-;7026:4;965:10:9;7026:4:3;7107:25;965:10:9;7124:7:3;7107:9;:25::i;:::-;7080:52;;7170:15;7150:16;:35;;7142:85;;;;-1:-1:-1;;;7142:85:3;;14962:2:13;7142:85:3;;;14944:21:13;15001:2;14981:18;;;14974:30;15040:34;15020:18;;;15013:62;-1:-1:-1;;;15091:18:13;;;15084:35;15136:19;;7142:85:3;14934:227:13;7142:85:3;7261:60;7270:5;7277:7;7305:15;7286:16;:34;7261:8;:60::i;4098:189::-;4177:4;965:10:9;4231:28:3;965:10:9;4248:2:3;4252:6;4231:9;:28::i;2612:135:12:-;2719:8;;2709:31;;;-1:-1:-1;;;2709:31:12;;;;2652:4;;-1:-1:-1;;;;;2719:8:12;;2709:29;;:31;;;;;;;;;;;;;;2719:8;2709:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2675:6;:4;:6::i;:::-;:31;;-1:-1:-1;;;2675:31:12;;2700:4;2675:31;;;4703:51:13;-1:-1:-1;;;;;2675:16:12;;;;;;;4676:18:13;;2675:31:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:65;;;;:::i;3880:537::-;2526:21:2;:19;:21::i;:::-;3941:8:12::1;;;;;;;;;-1:-1:-1::0;;;;;3941:8:12::1;-1:-1:-1::0;;;;;3941:22:12::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3976:13;3992:9;:7;:9::i;:::-;3976:25;;4011:59;4035:10;4055:4;4062:7;4011:6;:4;:6::i;:::-;-1:-1:-1::0;;;;;4011:23:12::1;::::0;:59;;:23:::1;:59::i;:::-;4080:6;:4;:6::i;:::-;4096:14;4113:9;:7;:9::i;:::-;4096:26:::0;-1:-1:-1;4142:14:12::1;4151:5:::0;4096:26;4142:14:::1;:::i;:::-;4132:24;;4210:14;4242:13;3700:12:3::0;;;3613:106;4242:13:12::1;4238:138;;-1:-1:-1::0;4285:7:12;4238:138:::1;;;4360:5;4343:13;3700:12:3::0;;;3613:106;4343:13:12::1;4333:23;::::0;:7;:23:::1;:::i;:::-;4332:33;;;;:::i;:::-;4323:42;;4238:138;4385:25;4391:10;4403:6;4385:5;:25::i;:::-;2557:1:2;;;2568:20:::0;1808:1;3074:7;:22;2894:209;2568:20;3880:537:12;:::o;5321:145::-;5354:9;5366:11;:9;:11::i;:::-;5415:8;;5354:23;;-1:-1:-1;5387:44:12;;-1:-1:-1;;;;;5415:8:12;5354:23;5387:6;:4;:6::i;:44::-;5441:8;;;;;;;;;-1:-1:-1;;;;;5441:8:12;-1:-1:-1;;;;;5441:16:12;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4586:574;2526:21:2;:19;:21::i;:::-;4649:8:12::1;;;;;;;;;-1:-1:-1::0;;;;;4649:8:12::1;-1:-1:-1::0;;;;;4649:22:12::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4684:13;4700:9;:7;:9::i;:::-;4684:25:::0;-1:-1:-1;4737:9:12::1;4779:6;:4;:6::i;:::-;-1:-1:-1::0;;;;;4756:39:12::1;;4803:7;4756:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;4823:6;:4;:6::i;:::-;4839:14;4856:9;:7;:9::i;:::-;4839:26:::0;-1:-1:-1;4885:14:12::1;4894:5:::0;4839:26;4885:14:::1;:::i;:::-;4875:24;;4953:14;4985:13;3700:12:3::0;;;3613:106;4985:13:12::1;4981:138;;-1:-1:-1::0;5028:7:12;4981:138:::1;;;5103:5;5086:13;3700:12:3::0;;;3613:106;5086:13:12::1;5076:23;::::0;:7;:23:::1;:::i;:::-;5075:33;;;;:::i;:::-;5066:42;;4981:138;5128:25;5134:10;5146:6;5128:5;:25::i;:::-;2557:1:2;;;;2568:20:::0;1808:1;3074:7;:22;2894:209;4345:149:3;-1:-1:-1;;;;;4460:18:3;;;4434:7;4460:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4345:149::o;3599:85:12:-;3640:37;3648:6;:4;:6::i;:::-;:28;;-1:-1:-1;;;3648:28:12;;3665:10;3648:28;;;4703:51:13;-1:-1:-1;;;;;3648:16:12;;;;;;;4676:18:13;;3648:28:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;8807:272::-;1355:13:0;:11;:13::i;:::-;8908:6:12::1;:4;:6::i;:::-;-1:-1:-1::0;;;;;8890:25:12::1;:6;-1:-1:-1::0;;;;;8890:25:12::1;;;8882:44;;;::::0;-1:-1:-1;;;8882:44:12;;10003:2:13;8882:44:12::1;::::0;::::1;9985:21:13::0;10042:1;10022:18;;;10015:29;-1:-1:-1;;;10060:18:13;;;10053:36;10106:18;;8882:44:12::1;9975:155:13::0;8882:44:12::1;8954:50;::::0;-1:-1:-1;;;8954:50:12;;8998:4:::1;8954:50;::::0;::::1;4703:51:13::0;8937:14:12::1;::::0;-1:-1:-1;;;;;8954:35:12;::::1;::::0;::::1;::::0;4676:18:13;;8954:50:12::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8937:67:::0;-1:-1:-1;9014:58:12::1;-1:-1:-1::0;;;;;9014:38:12;::::1;9053:10;8937:67:::0;9014:38:::1;:58::i;:::-;1378:1:0;8807:272:12::0;:::o;8153:511::-;1355:13:0;:11;:13::i;:::-;8212:14:12::1;:29:::0;-1:-1:-1;;;;;8212:29:12::1;8204:77;;;::::0;-1:-1:-1;;;8204:77:12;;12666:2:13;8204:77:12::1;::::0;::::1;12648:21:13::0;12705:2;12685:18;;;12678:30;-1:-1:-1;;;12724:18:13;;;12717:51;12785:18;;8204:77:12::1;12638:171:13::0;8204:77:12::1;8329:13;::::0;8299:27;;8345:15:::1;::::0;8299:43:::1;::::0;::::1;:::i;:::-;:61;8291:94;;;::::0;-1:-1:-1;;;8291:94:12;;9654:2:13;8291:94:12::1;::::0;::::1;9636:21:13::0;9693:2;9673:18;;;9666:30;-1:-1:-1;;;9712:18:13;;;9705:50;9772:18;;8291:94:12::1;9626:170:13::0;8291:94:12::1;8414:14;:29:::0;8401:43:::1;::::0;-1:-1:-1;;;;;8414:29:12;;::::1;4703:51:13::0;;8401:43:12::1;::::0;4691:2:13;4676:18;8401:43:12::1;;;;;;;8455:8;;;;;;;;;-1:-1:-1::0;;;;;8455:8:12::1;-1:-1:-1::0;;;;;8455:20:12::1;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;8508:14:12::1;:29:::0;;8487:8:::1;:51:::0;;-1:-1:-1;;;;;;8487:51:12;;::::1;-1:-1:-1::0;;;;;8508:29:12;::::1;8487:51;::::0;;;8548:42:::1;::::0;;-1:-1:-1;;8630:10:12::1;8600:27:::0;:40;8651:6:::1;:4;:6::i;2335:198:0:-:0;1355:13;:11;:13::i;:::-;-1:-1:-1;;;;;2423:22:0;::::1;2415:73;;;::::0;-1:-1:-1;;;2415:73:0;;7672:2:13;2415:73:0::1;::::0;::::1;7654:21:13::0;7711:2;7691:18;;;7684:30;7750:34;7730:18;;;7723:62;-1:-1:-1;;;7801:18:13;;;7794:36;7847:19;;2415:73:0::1;7644:228:13::0;2415:73:0::1;2498:28;2517:8;2498:18;:28::i;10815:340:3:-:0;-1:-1:-1;;;;;10916:19:3;;10908:68;;;;-1:-1:-1;;;10908:68:3;;13016:2:13;10908:68:3;;;12998:21:13;13055:2;13035:18;;;13028:30;13094:34;13074:18;;;13067:62;-1:-1:-1;;;13145:18:13;;;13138:34;13189:19;;10908:68:3;12988:226:13;10908:68:3;-1:-1:-1;;;;;10994:21:3;;10986:68;;;;-1:-1:-1;;;10986:68:3;;8079:2:13;10986:68:3;;;8061:21:13;8118:2;8098:18;;;8091:30;8157:34;8137:18;;;8130:62;-1:-1:-1;;;8208:18:13;;;8201:32;8250:19;;10986:68:3;8051:224:13;10986:68:3;-1:-1:-1;;;;;11065:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11116:32;;15672:25:13;;;11116:32:3;;15645:18:13;11116:32:3;;;;;;;10815:340;;;:::o;11436:411::-;11536:24;11563:25;11573:5;11580:7;11563:9;:25::i;:::-;11536:52;;-1:-1:-1;;11602:16:3;:37;11598:243;;11683:6;11663:16;:26;;11655:68;;;;-1:-1:-1;;;11655:68:3;;8482:2:13;11655:68:3;;;8464:21:13;8521:2;8501:18;;;8494:30;8560:31;8540:18;;;8533:59;8609:18;;11655:68:3;8454:179:13;11655:68:3;11765:51;11774:5;11781:7;11809:6;11790:16;:25;11765:8;:51::i;7814:788::-;-1:-1:-1;;;;;7910:18:3;;7902:68;;;;-1:-1:-1;;;7902:68:3;;12260:2:13;7902:68:3;;;12242:21:13;12299:2;12279:18;;;12272:30;12338:34;12318:18;;;12311:62;-1:-1:-1;;;12389:18:13;;;12382:35;12434:19;;7902:68:3;12232:227:13;7902:68:3;-1:-1:-1;;;;;7988:16:3;;7980:64;;;;-1:-1:-1;;;7980:64:3;;6865:2:13;7980:64:3;;;6847:21:13;6904:2;6884:18;;;6877:30;6943:34;6923:18;;;6916:62;-1:-1:-1;;;6994:18:13;;;6987:33;7037:19;;7980:64:3;6837:225:13;7980:64:3;-1:-1:-1;;;;;8126:15:3;;8104:19;8126:15;;;:9;:15;;;;;;8159:21;;;;8151:72;;;;-1:-1:-1;;;8151:72:3;;8840:2:13;8151:72:3;;;8822:21:13;8879:2;8859:18;;;8852:30;8918:34;8898:18;;;8891:62;-1:-1:-1;;;8969:18:13;;;8962:36;9015:19;;8151:72:3;8812:228:13;8151:72:3;-1:-1:-1;;;;;8257:15:3;;;;;;;:9;:15;;;;;;8275:20;;;8257:38;;8472:13;;;;;;;;;;:23;;;;;;8521:26;;;;;;8289:6;15672:25:13;;15660:2;15645:18;;15627:76;8521:26:3;;;;;;;;8558:37;6071:527:12;9733:659:3;-1:-1:-1;;;;;9816:21:3;;9808:67;;;;-1:-1:-1;;;9808:67:3;;11858:2:13;9808:67:3;;;11840:21:13;11897:2;11877:18;;;11870:30;11936:34;11916:18;;;11909:62;-1:-1:-1;;;11987:18:13;;;11980:31;12028:19;;9808:67:3;11830:223:13;9808:67:3;-1:-1:-1;;;;;9971:18:3;;9946:22;9971:18;;;:9;:18;;;;;;10007:24;;;;9999:71;;;;-1:-1:-1;;;9999:71:3;;7269:2:13;9999:71:3;;;7251:21:13;7308:2;7288:18;;;7281:30;7347:34;7327:18;;;7320:62;-1:-1:-1;;;7398:18:13;;;7391:32;7440:19;;9999:71:3;7241:224:13;9999:71:3;-1:-1:-1;;;;;10104:18:3;;;;;;:9;:18;;;;;;;;10125:23;;;10104:44;;10241:12;:22;;;;;;;10289:37;15672:25:13;;;10104:18:3;;;10289:37;;15645:18:13;10289:37:3;;;;;;;6071:527:12;;;:::o;996:186:7:-;1116:58;;-1:-1:-1;;;;;5337:32:13;;1116:58:7;;;5319:51:13;5386:18;;;5379:34;;;1089:86:7;;1109:5;;-1:-1:-1;;;1139:23:7;5292:18:13;;1116:58:7;;;;-1:-1:-1;;1116:58:7;;;;;;;;;;;;;;-1:-1:-1;;;;;1116:58:7;-1:-1:-1;;;;;;1116:58:7;;;;;;;;;;1089:19;:86::i;2139:147:3:-;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;2241:38:3::1;2264:5;2271:7;2241:22;:38::i;1024:95:0:-:0;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;1086:26:0::1;:24;:26::i;1889:111:2:-:0;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;1959:34:2::1;:32;:34::i;1620:130:0:-:0;1534:6;;-1:-1:-1;;;;;1534:6:0;965:10:9;1683:23:0;1675:68;;;;-1:-1:-1;;;1675:68:0;;11497:2:13;1675:68:0;;;11479:21:13;;;11516:18;;;11509:30;11575:34;11555:18;;;11548:62;11627:18;;1675:68:0;11469:182:13;2687:187:0;2779:6;;;-1:-1:-1;;;;;2795:17:0;;;-1:-1:-1;;;;;;2795:17:0;;;;;;;2827:40;;2779:6;;;2795:17;2779:6;;2827:40;;2760:16;;2827:40;2687:187;;:::o;2601:287:2:-;1851:1;2733:7;;:19;;2725:63;;;;-1:-1:-1;;;2725:63:2;;14602:2:13;2725:63:2;;;14584:21:13;14641:2;14621:18;;;14614:30;14680:33;14660:18;;;14653:61;14731:18;;2725:63:2;14574:181:13;2725:63:2;1851:1;2863:7;:18;2601:287::o;1421:214:7:-;1559:68;;-1:-1:-1;;;;;5023:15:13;;;1559:68:7;;;5005:34:13;5075:15;;5055:18;;;5048:43;5107:18;;;5100:34;;;1532:96:7;;1552:5;;-1:-1:-1;;;1582:27:7;4940:18:13;;1559:68:7;4922:218:13;8878:535:3;-1:-1:-1;;;;;8961:21:3;;8953:65;;;;-1:-1:-1;;;8953:65:3;;15368:2:13;8953:65:3;;;15350:21:13;15407:2;15387:18;;;15380:30;15446:33;15426:18;;;15419:61;15497:18;;8953:65:3;15340:181:13;8953:65:3;9105:6;9089:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9257:18:3;;;;;;:9;:18;;;;;;;;:28;;;;;;9310:37;15672:25:13;;;9310:37:3;;15645:18:13;9310:37:3;;;;;;;1378:1:0::1;8807:272:12::0;:::o;2894:209:2:-;1808:1;3074:7;:22;2894:209::o;5328:653:7:-;5758:23;5784:69;5812:4;5784:69;;;;;;;;;;;;;;;;;5792:5;-1:-1:-1;;;;;5784:27:7;;;:69;;;;;:::i;:::-;5758:95;;5871:10;:17;5892:1;5871:22;:56;;;;5908:10;5897:30;;;;;;;;;;;;:::i;:::-;5863:111;;;;-1:-1:-1;;;5863:111:7;;14191:2:13;5863:111:7;;;14173:21:13;14230:2;14210:18;;;14203:30;14269:34;14249:18;;;14242:62;-1:-1:-1;;;14320:18:13;;;14313:40;14370:19;;5863:111:7;14163:232:13;2292:159:3;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;2404:13:3;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2427:17:3;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;1125:111:0:-:0;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;:::-;1197:32:0::1;965:10:9::0;1197:18:0::1;:32::i;2006:109:2:-:0;5374:13:1;;;;;;;5366:69;;;;-1:-1:-1;;;5366:69:1;;;;;;;:::i;4119:223:8:-;4252:12;4283:52;4305:6;4313:4;4319:1;4322:12;4283:21;:52::i;:::-;4276:59;4119:223;-1:-1:-1;;;;4119:223:8:o;5176:446::-;5341:12;5398:5;5373:21;:30;;5365:81;;;;-1:-1:-1;;;5365:81:8;;9247:2:13;5365:81:8;;;9229:21:13;9286:2;9266:18;;;9259:30;9325:34;9305:18;;;9298:62;-1:-1:-1;;;9376:18:13;;;9369:36;9422:19;;5365:81:8;9219:228:13;5365:81:8;5457:12;5471:23;5498:6;-1:-1:-1;;;;;5498:11:8;5517:5;5524:4;5498:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5456:73;;;;5546:69;5573:6;5581:7;5590:10;5602:12;5546:26;:69::i;:::-;5539:76;5176:446;-1:-1:-1;;;;;;;5176:446:8:o;7682:628::-;7862:12;7890:7;7886:418;;;7917:17;;7913:286;;-1:-1:-1;;;;;1713:19:8;;;8124:60;;;;-1:-1:-1;;;8124:60:8;;13421:2:13;8124:60:8;;;13403:21:13;13460:2;13440:18;;;13433:30;13499:31;13479:18;;;13472:59;13548:18;;8124:60:8;13393:179:13;8124:60:8;-1:-1:-1;8219:10:8;8212:17;;7886:418;8260:33;8268:10;8280:12;8991:17;;:21;8987:379;;9219:10;9213:17;9275:15;9262:10;9258:2;9254:19;9247:44;9172:133;9342:12;9335:20;;-1:-1:-1;;;9335:20:8;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:739:13;57:5;110:3;103:4;95:6;91:17;87:27;77:2;;132:5;125;118:20;77:2;172:6;159:20;198:18;235:2;231;228:10;225:2;;;241:18;;:::i;:::-;316:2;310:9;284:2;370:13;;-1:-1:-1;;366:22:13;;;390:2;362:31;358:40;346:53;;;414:18;;;434:22;;;411:46;408:2;;;460:18;;:::i;:::-;500:10;496:2;489:22;535:2;527:6;520:18;581:3;574:4;569:2;561:6;557:15;553:26;550:35;547:2;;;602:5;595;588:20;547:2;670;663:4;655:6;651:17;644:4;636:6;632:17;619:54;693:15;;;710:4;689:26;682:41;;;;-1:-1:-1;697:6:13;67:686;-1:-1:-1;;;67:686:13:o;758:257::-;817:6;870:2;858:9;849:7;845:23;841:32;838:2;;;891:6;883;876:22;838:2;935:9;922:23;954:31;979:5;954:31;:::i;:::-;1004:5;828:187;-1:-1:-1;;;828:187:13:o;1020:261::-;1090:6;1143:2;1131:9;1122:7;1118:23;1114:32;1111:2;;;1164:6;1156;1149:22;1111:2;1201:9;1195:16;1220:31;1245:5;1220:31;:::i;1286:398::-;1354:6;1362;1415:2;1403:9;1394:7;1390:23;1386:32;1383:2;;;1436:6;1428;1421:22;1383:2;1480:9;1467:23;1499:31;1524:5;1499:31;:::i;:::-;1549:5;-1:-1:-1;1606:2:13;1591:18;;1578:32;1619:33;1578:32;1619:33;:::i;:::-;1671:7;1661:17;;;1373:311;;;;;:::o;1689:466::-;1766:6;1774;1782;1835:2;1823:9;1814:7;1810:23;1806:32;1803:2;;;1856:6;1848;1841:22;1803:2;1900:9;1887:23;1919:31;1944:5;1919:31;:::i;:::-;1969:5;-1:-1:-1;2026:2:13;2011:18;;1998:32;2039:33;1998:32;2039:33;:::i;:::-;1793:362;;2091:7;;-1:-1:-1;;;2145:2:13;2130:18;;;;2117:32;;1793:362::o;2160:325::-;2228:6;2236;2289:2;2277:9;2268:7;2264:23;2260:32;2257:2;;;2310:6;2302;2295:22;2257:2;2354:9;2341:23;2373:31;2398:5;2373:31;:::i;:::-;2423:5;2475:2;2460:18;;;;2447:32;;-1:-1:-1;;;2247:238:13:o;2490:297::-;2557:6;2610:2;2598:9;2589:7;2585:23;2581:32;2578:2;;;2631:6;2623;2616:22;2578:2;2668:9;2662:16;2721:5;2714:13;2707:21;2700:5;2697:32;2687:2;;2748:6;2740;2733:22;3084:795;3208:6;3216;3224;3232;3285:3;3273:9;3264:7;3260:23;3256:33;3253:2;;;3307:6;3299;3292:22;3253:2;3351:9;3338:23;3370:31;3395:5;3370:31;:::i;:::-;3420:5;-1:-1:-1;3476:2:13;3461:18;;3448:32;3499:18;3529:14;;;3526:2;;;3561:6;3553;3546:22;3526:2;3589:50;3631:7;3622:6;3611:9;3607:22;3589:50;:::i;:::-;3579:60;;3692:2;3681:9;3677:18;3664:32;3648:48;;3721:2;3711:8;3708:16;3705:2;;;3742:6;3734;3727:22;3705:2;;3770:52;3814:7;3803:8;3792:9;3788:24;3770:52;:::i;:::-;3243:636;;;;-1:-1:-1;3760:62:13;;3869:2;3854:18;3841:32;;-1:-1:-1;;;3243:636:13:o;3884:190::-;3943:6;3996:2;3984:9;3975:7;3971:23;3967:32;3964:2;;;4017:6;4009;4002:22;3964:2;-1:-1:-1;4045:23:13;;3954:120;-1:-1:-1;3954:120:13:o;4079:194::-;4149:6;4202:2;4190:9;4181:7;4177:23;4173:32;4170:2;;;4223:6;4215;4208:22;4170:2;-1:-1:-1;4251:16:13;;4160:113;-1:-1:-1;4160:113:13:o;4278:274::-;4407:3;4445:6;4439:13;4461:53;4507:6;4502:3;4495:4;4487:6;4483:17;4461:53;:::i;:::-;4530:16;;;;;4415:137;-1:-1:-1;;4415:137:13:o;6275:383::-;6424:2;6413:9;6406:21;6387:4;6456:6;6450:13;6499:6;6494:2;6483:9;6479:18;6472:34;6515:66;6574:6;6569:2;6558:9;6554:18;6549:2;6541:6;6537:15;6515:66;:::i;:::-;6642:2;6621:15;-1:-1:-1;;6617:29:13;6602:45;;;;6649:2;6598:54;;6396:262;-1:-1:-1;;6396:262:13:o;13577:407::-;13779:2;13761:21;;;13818:2;13798:18;;;13791:30;13857:34;13852:2;13837:18;;13830:62;-1:-1:-1;;;13923:2:13;13908:18;;13901:41;13974:3;13959:19;;13751:233::o;15897:128::-;15937:3;15968:1;15964:6;15961:1;15958:13;15955:2;;;15974:18;;:::i;:::-;-1:-1:-1;16010:9:13;;15945:80::o;16030:217::-;16070:1;16096;16086:2;;-1:-1:-1;;;16121:31:13;;16175:4;16172:1;16165:15;16203:4;16128:1;16193:15;16086:2;-1:-1:-1;16232:9:13;;16076:171::o;16252:168::-;16292:7;16358:1;16354;16350:6;16346:14;16343:1;16340:21;16335:1;16328:9;16321:17;16317:45;16314:2;;;16365:18;;:::i;:::-;-1:-1:-1;16405:9:13;;16304:116::o;16425:125::-;16465:4;16493:1;16490;16487:8;16484:2;;;16498:18;;:::i;:::-;-1:-1:-1;16535:9:13;;16474:76::o;16555:258::-;16627:1;16637:113;16651:6;16648:1;16645:13;16637:113;;;16727:11;;;16721:18;16708:11;;;16701:39;16673:2;16666:10;16637:113;;;16768:6;16765:1;16762:13;16759:2;;;-1:-1:-1;;16803:1:13;16785:16;;16778:27;16608:205::o;16818:380::-;16897:1;16893:12;;;;16940;;;16961:2;;17015:4;17007:6;17003:17;16993:27;;16961:2;17068;17060:6;17057:14;17037:18;17034:38;17031:2;;;17114:10;17109:3;17105:20;17102:1;17095:31;17149:4;17146:1;17139:15;17177:4;17174:1;17167:15;17031:2;;16873:325;;;:::o;17203:127::-;17264:10;17259:3;17255:20;17252:1;17245:31;17295:4;17292:1;17285:15;17319:4;17316:1;17309:15;17335:127;17396:10;17391:3;17387:20;17384:1;17377:31;17427:4;17424:1;17417:15;17451:4;17448:1;17441:15;17467:131;-1:-1:-1;;;;;17542:31:13;;17532:42;;17522:2;;17588:1;17585;17578:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2020800",
								"executionCost": "2142",
								"totalCost": "2022942"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approvalDelay()": "1083",
								"approve(address,uint256)": "22564",
								"available()": "infinite",
								"balance()": "infinite",
								"balanceOf(address)": "1276",
								"decimals()": "267",
								"decreaseAllowance(address,uint256)": "23589",
								"deposit(uint256)": "infinite",
								"depositAll()": "infinite",
								"depositNative()": "infinite",
								"earn()": "infinite",
								"getPricePerFullShare()": "infinite",
								"inCaseTokensGetStuck(address)": "infinite",
								"increaseAllowance(address,uint256)": "23684",
								"initialize(address,string,string,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "1121",
								"proposeStrat(address)": "infinite",
								"renounceOwnership()": "infinite",
								"stratCandidate()": "1956",
								"strategy()": "1104",
								"symbol()": "infinite",
								"totalSupply()": "1072",
								"transfer(address,uint256)": "44338",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"upgradeStrat()": "infinite",
								"want()": "infinite",
								"withdraw(uint256)": "infinite",
								"withdrawAll()": "infinite",
								"withdrawAllNative()": "infinite",
								"withdrawNative(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 735,
									"end": 9116,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ac267001eb9a172aebdd86e5e4489fe96e16d560eb3511147be4c85755b4cdf264736f6c63430008040033",
									".code": [
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "84276D81"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "B6B55F25"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "DE5F6268"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "DE5F6268"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "DEF68A9C"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "E2D1E75C"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "E6685244"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "F2FDE38B"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "38"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "B6B55F25"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "D389800F"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "DB6B5246"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "DD62ED3E"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "A457C2D7"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "A457C2D7"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "A8C62E76"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "A9059CBB"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "B69EF8A8"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "84276D81"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "853828B6"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "8DA5CB5B"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "95D89B41"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "482FE024"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "715018A6"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "76DFABB8"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "77C7B8FC"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "482FE024"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "48A0D754"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "4D12D4B6"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "5B12FF9B"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "23B872DD"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "2E1A7D4D"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "313CE567"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "39509351"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "42"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "6FDDE03"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "95EA7B3"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "18160DDD"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "1F1FCD51"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 735,
											"end": 9116,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5589,
											"end": 5603,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5589,
											"end": 5603,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5582,
											"end": 5604,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5564,
											"end": 5605,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5564,
											"end": 5605,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5552,
											"end": 5554,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5537,
											"end": 5555,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 5519,
											"end": 5611,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15660,
											"end": 15662,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 15627,
											"end": 15703,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "tag",
											"source": 12,
											"value": "62"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "tag",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4721,
											"end": 4753,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4721,
											"end": 4753,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4721,
											"end": 4753,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4691,
											"end": 4693,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 4658,
											"end": 4760,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "tag",
											"source": 12,
											"value": "73"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "75"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "tag",
											"source": 12,
											"value": "75"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3544,
											"end": 3546,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 6228,
											"end": 6264,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6228,
											"end": 6264,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6216,
											"end": 6218,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6201,
											"end": 6219,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3462,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 6183,
											"end": 6270,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "tag",
											"source": 12,
											"value": "88"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "tag",
											"source": 12,
											"value": "95"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "tag",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "tag",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "103"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3851,
											"end": 3858,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3886,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3902,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "tag",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH",
											"source": 12,
											"value": "C9"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH",
											"source": 12,
											"value": "CA"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "tag",
											"source": 12,
											"value": "114"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5337,
											"end": 5369,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5337,
											"end": 5369,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 5337,
											"end": 5369,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5319,
											"end": 5370,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5319,
											"end": 5370,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5401,
											"end": 5403,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5292,
											"end": 5310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1033,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "48"
										},
										{
											"begin": 5274,
											"end": 5419,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "tag",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "tag",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "tag",
											"source": 12,
											"value": "124"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "tag",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "tag",
											"source": 12,
											"value": "126"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1462,
											"end": 1547,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "tag",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "tag",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "tag",
											"source": 12,
											"value": "143"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1126,
											"end": 1151,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "150"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "tag",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "tag",
											"source": 12,
											"value": "27"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "tag",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "76"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "tag",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "160"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "tag",
											"source": 12,
											"value": "28"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "tag",
											"source": 12,
											"value": "161"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "tag",
											"source": 12,
											"value": "172"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "175"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "tag",
											"source": 12,
											"value": "175"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "177"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "103"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "tag",
											"source": 12,
											"value": "177"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "178"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "179"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "tag",
											"source": 12,
											"value": "179"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "PUSH",
											"source": 12,
											"value": "CC"
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1238,
											"end": 1266,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "183"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "tag",
											"source": 12,
											"value": "183"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2570,
											"end": 2583,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2602,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "193"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "tag",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2516,
											"end": 2614,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4885,
											"end": 4889,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4955,
											"end": 4962,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4964,
											"end": 4970,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4939,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "tag",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 4939,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4988,
											"end": 4992,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4988,
											"end": 4992,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4802,
											"end": 4999,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F1FCD51"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2265,
											"end": 2282,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2265,
											"end": 2282,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2332,
											"name": "PUSH",
											"source": 12,
											"value": "1F1FCD51"
										},
										{
											"begin": 2319,
											"end": 2332,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "tag",
											"source": 12,
											"value": "204"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "206"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "tag",
											"source": 12,
											"value": "206"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "295"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "tag",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 2319,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2294,
											"end": 2335,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2294,
											"end": 2335,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2228,
											"end": 2342,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5658,
											"end": 5662,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 5730,
											"end": 5734,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5745,
											"end": 5751,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5714,
											"end": 5729,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 5714,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 5772,
											"end": 5776,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5778,
											"end": 5780,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5782,
											"end": 5788,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5762,
											"end": 5771,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "tag",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 5762,
											"end": 5789,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5806,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5806,
											"end": 5810,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5561,
											"end": 5817,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "tag",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6123,
											"end": 6132,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6159,
											"end": 6172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6159,
											"end": 6172,
											"name": "tag",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 6159,
											"end": 6172,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6148,
											"end": 6155,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6136,
											"end": 6145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "217"
										},
										{
											"begin": 6136,
											"end": 6143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 6136,
											"end": 6145,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6136,
											"end": 6145,
											"name": "tag",
											"source": 12,
											"value": "217"
										},
										{
											"begin": 6136,
											"end": 6145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "218"
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "tag",
											"source": 12,
											"value": "218"
										},
										{
											"begin": 6136,
											"end": 6155,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "220"
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "tag",
											"source": 12,
											"value": "220"
										},
										{
											"begin": 6135,
											"end": 6172,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6123,
											"end": 6172,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6123,
											"end": 6172,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6182,
											"end": 6208,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "222"
										},
										{
											"begin": 6188,
											"end": 6198,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 6200,
											"end": 6207,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6182,
											"end": 6187,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "223"
										},
										{
											"begin": 6182,
											"end": 6208,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6182,
											"end": 6208,
											"name": "tag",
											"source": 12,
											"value": "222"
										},
										{
											"begin": 6182,
											"end": 6208,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6219,
											"end": 6225,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 6228,
											"end": 6232,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "tag",
											"source": 12,
											"value": "224"
										},
										{
											"begin": 6228,
											"end": 6234,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6253,
											"end": 6257,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 6228,
											"end": 6244,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "226"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "tag",
											"source": 12,
											"value": "226"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "228"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "tag",
											"source": 12,
											"value": "228"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "229"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "tag",
											"source": 12,
											"value": "229"
										},
										{
											"begin": 6228,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6219,
											"end": 6259,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6219,
											"end": 6259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6277,
											"end": 6278,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6273,
											"end": 6274,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6273,
											"end": 6278,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "231"
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6294,
											"end": 6308,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6311,
											"end": 6316,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 6315,
											"end": 6316,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6311,
											"end": 6312,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6311,
											"end": 6316,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6311,
											"end": 6316,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6311,
											"end": 6316,
											"name": "tag",
											"source": 12,
											"value": "232"
										},
										{
											"begin": 6311,
											"end": 6316,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6338,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 6330,
											"end": 6338,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6294,
											"end": 6316,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6294,
											"end": 6316,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6330,
											"end": 6338,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6338,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6347,
											"name": "PUSH",
											"source": 12,
											"value": "2E1A7D4D"
										},
										{
											"begin": 6330,
											"end": 6347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "tag",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "tag",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6330,
											"end": 6358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6383,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6392,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 6386,
											"end": 6390,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 6386,
											"end": 6392,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6386,
											"end": 6392,
											"name": "tag",
											"source": 12,
											"value": "238"
										},
										{
											"begin": 6386,
											"end": 6392,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6411,
											"end": 6415,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 6386,
											"end": 6402,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "tag",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "tag",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "tag",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 6386,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6417,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6431,
											"end": 6441,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6444,
											"end": 6454,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "244"
										},
										{
											"begin": 6453,
											"end": 6454,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6417,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6444,
											"end": 6454,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6444,
											"end": 6454,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6444,
											"end": 6454,
											"name": "tag",
											"source": 12,
											"value": "244"
										},
										{
											"begin": 6444,
											"end": 6454,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6431,
											"end": 6454,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6431,
											"end": 6454,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6480,
											"end": 6489,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6472,
											"end": 6477,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6472,
											"end": 6489,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6468,
											"end": 6537,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6468,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 6468,
											"end": 6537,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6513,
											"end": 6522,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 6517,
											"end": 6522,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6513,
											"end": 6514,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6513,
											"end": 6522,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 6513,
											"end": 6522,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6513,
											"end": 6522,
											"name": "tag",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 6513,
											"end": 6522,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6509,
											"end": 6522,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 6509,
											"end": 6522,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6468,
											"end": 6537,
											"name": "tag",
											"source": 12,
											"value": "245"
										},
										{
											"begin": 6468,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "tag",
											"source": 12,
											"value": "231"
										},
										{
											"begin": 6269,
											"end": 6547,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6557,
											"end": 6591,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "248"
										},
										{
											"begin": 6577,
											"end": 6587,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 6589,
											"end": 6590,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6557,
											"end": 6563,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 6557,
											"end": 6561,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 6557,
											"end": 6563,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6557,
											"end": 6563,
											"name": "tag",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 6557,
											"end": 6563,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6557,
											"end": 6576,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6557,
											"end": 6576,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6557,
											"end": 6591,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6557,
											"end": 6576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "250"
										},
										{
											"begin": 6557,
											"end": 6591,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6557,
											"end": 6591,
											"name": "tag",
											"source": 12,
											"value": "248"
										},
										{
											"begin": 6557,
											"end": 6591,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 6212,
											"end": 6446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6300,
											"end": 6304,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 6354,
											"end": 6418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6370,
											"end": 6377,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6407,
											"end": 6417,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6370,
											"end": 6377,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6388,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "tag",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 6379,
											"end": 6404,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "256"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "tag",
											"source": 3,
											"value": "256"
										},
										{
											"begin": 6379,
											"end": 6417,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6354,
											"end": 6362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 6354,
											"end": 6418,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "tag",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5821,
											"end": 5831,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 3851,
											"end": 3858,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3886,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5796,
											"end": 5833,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 5796,
											"end": 5833,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5796,
											"end": 5833,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 5796,
											"end": 5833,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5748,
											"end": 5840,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "tag",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 3030,
											"end": 3136,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3072,
											"end": 3079,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 3098,
											"end": 3102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 3098,
											"end": 3104,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3123,
											"end": 3127,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 3098,
											"end": 3114,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 3098,
											"end": 3129,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "tag",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3279,
											"end": 3298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3302,
											"end": 3315,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3301,
											"end": 3315,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "268"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3380,
											"end": 3381,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3381,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "tag",
											"source": 1,
											"value": "268"
										},
										{
											"begin": 3347,
											"end": 3381,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "272"
										},
										{
											"begin": 3346,
											"end": 3454,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3426,
											"end": 3430,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1736,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "272"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3436,
											"end": 3448,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3436,
											"end": 3453,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "tag",
											"source": 1,
											"value": "272"
										},
										{
											"begin": 3387,
											"end": 3453,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "273"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10739,
											"end": 10741,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10721,
											"end": 10742,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10778,
											"end": 10780,
											"name": "PUSH",
											"source": 13,
											"value": "2E"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10758,
											"end": 10776,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10751,
											"end": 10781,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10817,
											"end": 10851,
											"name": "PUSH",
											"source": 13,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 10797,
											"end": 10815,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 10797,
											"end": 10815,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10797,
											"end": 10815,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10790,
											"end": 10852,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10868,
											"end": 10886,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 10868,
											"end": 10886,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10868,
											"end": 10886,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10861,
											"end": 10905,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10922,
											"end": 10941,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 10922,
											"end": 10941,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "tag",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "tag",
											"source": 1,
											"value": "273"
										},
										{
											"begin": 3325,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3548,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3551,
											"end": 3552,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3536,
											"end": 3552,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "276"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3609,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3596,
											"end": 3616,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "tag",
											"source": 1,
											"value": "276"
										},
										{
											"begin": 3562,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2057,
											"end": 2085,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 2070,
											"end": 2075,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2077,
											"end": 2084,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2057,
											"end": 2069,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 2057,
											"end": 2085,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2057,
											"end": 2085,
											"name": "tag",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 2057,
											"end": 2085,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2095,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 2095,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 2095,
											"end": 2111,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2095,
											"end": 2111,
											"name": "tag",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 2095,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2121,
											"end": 2145,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 2121,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 2121,
											"end": 2145,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2121,
											"end": 2145,
											"name": "tag",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 2121,
											"end": 2145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2163,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2155,
											"end": 2175,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 2185,
											"end": 2198,
											"name": "PUSH",
											"source": 12,
											"value": "CC"
										},
										{
											"begin": 2185,
											"end": 2215,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2185,
											"end": 2215,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2185,
											"end": 2215,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3697,
											"end": 3702,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3681,
											"end": 3702,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 6228,
											"end": 6264,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6228,
											"end": 6264,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6216,
											"end": 6218,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6201,
											"end": 6219,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3721,
											"end": 3735,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "tag",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 3647,
											"end": 3746,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1919,
											"end": 2222,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "tag",
											"source": 12,
											"value": "104"
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "288"
										},
										{
											"begin": 1355,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "tag",
											"source": 0,
											"value": "288"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7607,
											"end": 7622,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7597,
											"end": 7629,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7629,
											"name": "PUSH",
											"source": 12,
											"value": "FBFA77CF"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "tag",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "295"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "tag",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 7597,
											"end": 7631,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7580,
											"end": 7631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7588,
											"end": 7592,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7580,
											"end": 7631,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7580,
											"end": 7631,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10337,
											"end": 10339,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10319,
											"end": 10340,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10376,
											"end": 10378,
											"name": "PUSH",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 10356,
											"end": 10374,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 10356,
											"end": 10374,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10356,
											"end": 10374,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10349,
											"end": 10379,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10415,
											"end": 10449,
											"name": "PUSH",
											"source": 13,
											"value": "50726F706F73616C206E6F742076616C696420666F722074686973205661756C"
										},
										{
											"begin": 10395,
											"end": 10413,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 10395,
											"end": 10413,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10395,
											"end": 10413,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10388,
											"end": 10450,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10466,
											"end": 10484,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 10466,
											"end": 10484,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10466,
											"end": 10484,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10459,
											"end": 10490,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10507,
											"end": 10526,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 10507,
											"end": 10526,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 10309,
											"end": 10532,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 7572,
											"end": 7669,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7697,
											"end": 7728,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7728,
											"name": "PUSH",
											"source": 12,
											"value": "1F1FCD51"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "tag",
											"source": 12,
											"value": "299"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "tag",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "295"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 7697,
											"end": 7730,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7687,
											"end": 7730,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7693,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 7687,
											"end": 7691,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7687,
											"end": 7693,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7687,
											"end": 7693,
											"name": "tag",
											"source": 12,
											"value": "303"
										},
										{
											"begin": 7687,
											"end": 7693,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7687,
											"end": 7730,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7687,
											"end": 7730,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11154,
											"end": 11156,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11136,
											"end": 11157,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11193,
											"end": 11195,
											"name": "PUSH",
											"source": 13,
											"value": "E"
										},
										{
											"begin": 11173,
											"end": 11191,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 11173,
											"end": 11191,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11173,
											"end": 11191,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11166,
											"end": 11196,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "111A5999995C995B9D081DD85B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11212,
											"end": 11230,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11205,
											"end": 11249,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11266,
											"end": 11284,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 11266,
											"end": 11284,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 11126,
											"end": 11290,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 7679,
											"end": 7749,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 7854,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7776,
											"end": 7856,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7773,
											"name": "PUSH",
											"source": 12,
											"value": "C9"
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "PUSH",
											"source": 12,
											"value": "CA"
										},
										{
											"begin": 7759,
											"end": 7856,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "PUSH",
											"source": 12,
											"value": "1AAE2EC5647DB56DA2D513DE40528BA3565C6057525637050660C4323BBAC7DF"
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7872,
											"end": 7906,
											"name": "LOG1",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7498,
											"end": 7913,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 2085,
											"end": 2186,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 1355,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "tag",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2149,
											"end": 2179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 2176,
											"end": 2177,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2149,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 2149,
											"end": 2179,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "tag",
											"source": 12,
											"value": "120"
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3405,
											"end": 3412,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3431,
											"end": 3444,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3431,
											"end": 3444,
											"name": "tag",
											"source": 12,
											"value": "315"
										},
										{
											"begin": 3431,
											"end": 3444,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3431,
											"end": 3449,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3431,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 3431,
											"end": 3493,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3460,
											"end": 3469,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "318"
										},
										{
											"begin": 3460,
											"end": 3467,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 3460,
											"end": 3469,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3460,
											"end": 3469,
											"name": "tag",
											"source": 12,
											"value": "318"
										},
										{
											"begin": 3460,
											"end": 3469,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3472,
											"end": 3476,
											"name": "PUSH",
											"source": 12,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "tag",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 3460,
											"end": 3476,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3459,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 3459,
											"end": 3493,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3459,
											"end": 3493,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3459,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 3459,
											"end": 3493,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3431,
											"end": 3493,
											"name": "tag",
											"source": 12,
											"value": "316"
										},
										{
											"begin": 3431,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3452,
											"end": 3456,
											"name": "PUSH",
											"source": 12,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3452,
											"end": 3456,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3352,
											"end": 3500,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "tag",
											"source": 12,
											"value": "125"
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6809,
											"end": 6818,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6845,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6845,
											"end": 6858,
											"name": "tag",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 6845,
											"end": 6858,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6834,
											"end": 6841,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6822,
											"end": 6831,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 6822,
											"end": 6829,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 6822,
											"end": 6831,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6822,
											"end": 6831,
											"name": "tag",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 6822,
											"end": 6831,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "tag",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 6822,
											"end": 6841,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 6821,
											"end": 6858,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6809,
											"end": 6858,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6809,
											"end": 6858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6868,
											"end": 6894,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 6874,
											"end": 6884,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 6886,
											"end": 6893,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6868,
											"end": 6873,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "223"
										},
										{
											"begin": 6868,
											"end": 6894,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6868,
											"end": 6894,
											"name": "tag",
											"source": 12,
											"value": "327"
										},
										{
											"begin": 6868,
											"end": 6894,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6905,
											"end": 6911,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 6914,
											"end": 6918,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "tag",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6939,
											"end": 6943,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 6914,
											"end": 6930,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "tag",
											"source": 12,
											"value": "330"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "tag",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "tag",
											"source": 12,
											"value": "333"
										},
										{
											"begin": 6914,
											"end": 6945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6905,
											"end": 6945,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6905,
											"end": 6945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6963,
											"end": 6964,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6959,
											"end": 6964,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6980,
											"end": 6994,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6997,
											"end": 7002,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 7001,
											"end": 7002,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 6998,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6997,
											"end": 7002,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 6997,
											"end": 7002,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6997,
											"end": 7002,
											"name": "tag",
											"source": 12,
											"value": "335"
										},
										{
											"begin": 6997,
											"end": 7002,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7024,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 7016,
											"end": 7024,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E1A7D4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6980,
											"end": 7002,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6980,
											"end": 7002,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7016,
											"end": 7024,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7024,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7033,
											"name": "PUSH",
											"source": 12,
											"value": "2E1A7D4D"
										},
										{
											"begin": 7016,
											"end": 7033,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "tag",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "tag",
											"source": 12,
											"value": "339"
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7016,
											"end": 7044,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7058,
											"end": 7069,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7072,
											"end": 7078,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 7072,
											"end": 7076,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7072,
											"end": 7078,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7072,
											"end": 7078,
											"name": "tag",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 7072,
											"end": 7078,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7097,
											"end": 7101,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 7072,
											"end": 7088,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "342"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "tag",
											"source": 12,
											"value": "342"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "tag",
											"source": 12,
											"value": "344"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "tag",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 7072,
											"end": 7103,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7058,
											"end": 7103,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7117,
											"end": 7127,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7130,
											"end": 7140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 7139,
											"end": 7140,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7058,
											"end": 7103,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7130,
											"end": 7140,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 7130,
											"end": 7140,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7130,
											"end": 7140,
											"name": "tag",
											"source": 12,
											"value": "346"
										},
										{
											"begin": 7130,
											"end": 7140,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7117,
											"end": 7140,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7117,
											"end": 7140,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7166,
											"end": 7175,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7158,
											"end": 7163,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7158,
											"end": 7175,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7154,
											"end": 7223,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7154,
											"end": 7223,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 7154,
											"end": 7223,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 7203,
											"end": 7208,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7199,
											"end": 7200,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "tag",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 7199,
											"end": 7208,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7195,
											"end": 7208,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 7195,
											"end": 7208,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7154,
											"end": 7223,
											"name": "tag",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 7154,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "tag",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 6955,
											"end": 7233,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7266,
											"end": 7272,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 7266,
											"end": 7270,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 7266,
											"end": 7272,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7266,
											"end": 7272,
											"name": "tag",
											"source": 12,
											"value": "349"
										},
										{
											"begin": 7266,
											"end": 7272,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7243,
											"end": 7283,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7283,
											"name": "PUSH",
											"source": 12,
											"value": "2E1A7D4D"
										},
										{
											"begin": 7284,
											"end": 7285,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15660,
											"end": 15662,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15627,
											"end": 15703,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "tag",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "tag",
											"source": 12,
											"value": "351"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "tag",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 7243,
											"end": 7286,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7304,
											"end": 7314,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 7304,
											"end": 7314,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH",
											"source": 12,
											"value": "8FC"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7325,
											"end": 7326,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7325,
											"end": 7326,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7325,
											"end": 7326,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7304,
											"end": 7314,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "tag",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7296,
											"end": 7327,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6751,
											"end": 7334,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "tag",
											"source": 12,
											"value": "128"
										},
										{
											"begin": 5566,
											"end": 5646,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5627,
											"end": 5637,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 3851,
											"end": 3858,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3886,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3877,
											"end": 3895,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5608,
											"end": 5639,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 5608,
											"end": 5639,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "tag",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 2727,
											"end": 2829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2783,
											"end": 2796,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2815,
											"end": 2822,
											"name": "PUSH",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 2808,
											"end": 2822,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 6933,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7026,
											"end": 7030,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 7026,
											"end": 7030,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "368"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7124,
											"end": 7131,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7107,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "tag",
											"source": 3,
											"value": "368"
										},
										{
											"begin": 7107,
											"end": 7132,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7080,
											"end": 7132,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7080,
											"end": 7132,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7170,
											"end": 7185,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7166,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7185,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 7150,
											"end": 7185,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "369"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 14962,
											"end": 14964,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 14944,
											"end": 14965,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15001,
											"end": 15003,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 14981,
											"end": 14999,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 14981,
											"end": 14999,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14981,
											"end": 14999,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14974,
											"end": 15004,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15040,
											"end": 15074,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 15020,
											"end": 15038,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 15020,
											"end": 15038,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15020,
											"end": 15038,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15013,
											"end": 15075,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15091,
											"end": 15109,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 15091,
											"end": 15109,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15091,
											"end": 15109,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15084,
											"end": 15119,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15136,
											"end": 15155,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 15136,
											"end": 15155,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 14934,
											"end": 15161,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "tag",
											"source": 3,
											"value": "369"
										},
										{
											"begin": 7142,
											"end": 7227,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7261,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 7270,
											"end": 7275,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7277,
											"end": 7284,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7305,
											"end": 7320,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 7286,
											"end": 7302,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7286,
											"end": 7320,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7261,
											"end": 7269,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 7261,
											"end": 7321,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "tag",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 4098,
											"end": 4287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4177,
											"end": 4181,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4231,
											"end": 4259,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4250,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4258,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4231,
											"end": 4240,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 4231,
											"end": 4259,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "tag",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 2612,
											"end": 2747,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2719,
											"end": 2727,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 2719,
											"end": 2727,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "722713F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2652,
											"end": 2656,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2652,
											"end": 2656,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2719,
											"end": 2727,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2719,
											"end": 2727,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2738,
											"name": "PUSH",
											"source": 12,
											"value": "722713F7"
										},
										{
											"begin": 2709,
											"end": 2738,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2719,
											"end": 2727,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "tag",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "tag",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "380"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "tag",
											"source": 12,
											"value": "380"
										},
										{
											"begin": 2709,
											"end": 2740,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 2675,
											"end": 2679,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "tag",
											"source": 12,
											"value": "381"
										},
										{
											"begin": 2675,
											"end": 2681,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2700,
											"end": 2704,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 2675,
											"end": 2691,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "tag",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "tag",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "tag",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 2675,
											"end": 2706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "207"
										},
										{
											"begin": 2675,
											"end": 2740,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2740,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2675,
											"end": 2740,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 2675,
											"end": 2740,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "tag",
											"source": 12,
											"value": "160"
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "389"
										},
										{
											"begin": 2526,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "tag",
											"source": 2,
											"value": "389"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3949,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3963,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3963,
											"name": "PUSH",
											"source": 12,
											"value": "573FEF0A"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "tag",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "tag",
											"source": 12,
											"value": "394"
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3941,
											"end": 3965,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3976,
											"end": 3989,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3992,
											"end": 4001,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 3992,
											"end": 3999,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 3992,
											"end": 4001,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3992,
											"end": 4001,
											"name": "tag",
											"source": 12,
											"value": "395"
										},
										{
											"begin": 3992,
											"end": 4001,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3976,
											"end": 4001,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3976,
											"end": 4001,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 4035,
											"end": 4045,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 4062,
											"end": 4069,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4017,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 4011,
											"end": 4015,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4011,
											"end": 4017,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4011,
											"end": 4017,
											"name": "tag",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 4011,
											"end": 4017,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4011,
											"end": 4034,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4034,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4011,
											"end": 4034,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "tag",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 4011,
											"end": 4070,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4080,
											"end": 4086,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 4080,
											"end": 4084,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 4080,
											"end": 4086,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4080,
											"end": 4086,
											"name": "tag",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 4080,
											"end": 4086,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4096,
											"end": 4110,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4113,
											"end": 4122,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 4113,
											"end": 4120,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 4113,
											"end": 4122,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4113,
											"end": 4122,
											"name": "tag",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 4113,
											"end": 4122,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4096,
											"end": 4122,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4142,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 4151,
											"end": 4156,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4096,
											"end": 4122,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4142,
											"end": 4156,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 4142,
											"end": 4156,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4142,
											"end": 4156,
											"name": "tag",
											"source": 12,
											"value": "401"
										},
										{
											"begin": 4142,
											"end": 4156,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4132,
											"end": 4156,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4132,
											"end": 4156,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4210,
											"end": 4224,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4242,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4242,
											"end": 4255,
											"name": "tag",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 4242,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4285,
											"end": 4292,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "tag",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4360,
											"end": 4365,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4343,
											"end": 4356,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4343,
											"end": 4356,
											"name": "tag",
											"source": 12,
											"value": "405"
										},
										{
											"begin": 4343,
											"end": 4356,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4333,
											"end": 4340,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "tag",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 4333,
											"end": 4356,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "tag",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 4332,
											"end": 4365,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4323,
											"end": 4365,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4323,
											"end": 4365,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "tag",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 4238,
											"end": 4376,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4385,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 4391,
											"end": 4401,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 4403,
											"end": 4409,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4385,
											"end": 4390,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 4385,
											"end": 4410,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4385,
											"end": 4410,
											"name": "tag",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 4385,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2568,
											"end": 2588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "410"
										},
										{
											"begin": 1808,
											"end": 1809,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3074,
											"end": 3081,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 3074,
											"end": 3096,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2894,
											"end": 3103,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2568,
											"end": 2588,
											"name": "tag",
											"source": 2,
											"value": "410"
										},
										{
											"begin": 2568,
											"end": 2588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3880,
											"end": 4417,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "tag",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 5321,
											"end": 5466,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5354,
											"end": 5363,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5366,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 5366,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "93"
										},
										{
											"begin": 5366,
											"end": 5377,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5377,
											"name": "tag",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 5366,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5415,
											"end": 5423,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 5415,
											"end": 5423,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5354,
											"end": 5377,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5354,
											"end": 5377,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5387,
											"end": 5431,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 5387,
											"end": 5431,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5415,
											"end": 5423,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5354,
											"end": 5377,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5387,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "249"
										},
										{
											"begin": 5387,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 5387,
											"end": 5393,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5387,
											"end": 5431,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 5387,
											"end": 5431,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5441,
											"end": 5449,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5441,
											"end": 5457,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5457,
											"name": "PUSH",
											"source": 12,
											"value": "D0E30DB0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5441,
											"end": 5459,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "tag",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 4586,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 2526,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "tag",
											"source": 2,
											"value": "420"
										},
										{
											"begin": 2526,
											"end": 2547,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4649,
											"end": 4657,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4649,
											"end": 4671,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4671,
											"name": "PUSH",
											"source": 12,
											"value": "573FEF0A"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "tag",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4649,
											"end": 4673,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4684,
											"end": 4697,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4700,
											"end": 4709,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 4700,
											"end": 4707,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 4700,
											"end": 4709,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4700,
											"end": 4709,
											"name": "tag",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 4700,
											"end": 4709,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4684,
											"end": 4709,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4737,
											"end": 4746,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 4779,
											"end": 4785,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 4779,
											"end": 4783,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4779,
											"end": 4785,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4779,
											"end": 4785,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 4779,
											"end": 4785,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4756,
											"end": 4795,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4795,
											"name": "PUSH",
											"source": 12,
											"value": "D0E30DB0"
										},
										{
											"begin": 4803,
											"end": 4810,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "tag",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4756,
											"end": 4813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4823,
											"end": 4829,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 4823,
											"end": 4827,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 4823,
											"end": 4829,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4823,
											"end": 4829,
											"name": "tag",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 4823,
											"end": 4829,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4839,
											"end": 4853,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4856,
											"end": 4865,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 4856,
											"end": 4863,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 4856,
											"end": 4865,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4856,
											"end": 4865,
											"name": "tag",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 4856,
											"end": 4865,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4839,
											"end": 4865,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4885,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 4894,
											"end": 4899,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4839,
											"end": 4865,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4885,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "233"
										},
										{
											"begin": 4885,
											"end": 4899,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4885,
											"end": 4899,
											"name": "tag",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 4885,
											"end": 4899,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4875,
											"end": 4899,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4875,
											"end": 4899,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4953,
											"end": 4967,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4985,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4985,
											"end": 4998,
											"name": "tag",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 4985,
											"end": 4998,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5028,
											"end": 5035,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "tag",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5103,
											"end": 5108,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5086,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3700,
											"end": 3712,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3613,
											"end": 3719,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5086,
											"end": 5099,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 5086,
											"end": 5099,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5076,
											"end": 5083,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "tag",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 5076,
											"end": 5099,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "221"
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "tag",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 5075,
											"end": 5108,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5066,
											"end": 5108,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5066,
											"end": 5108,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "tag",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 4981,
											"end": 5119,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5128,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 5134,
											"end": 5144,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 5146,
											"end": 5152,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5128,
											"end": 5133,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 5128,
											"end": 5153,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5128,
											"end": 5153,
											"name": "tag",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 5128,
											"end": 5153,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2568,
											"end": 2588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "258"
										},
										{
											"begin": 1808,
											"end": 1809,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3074,
											"end": 3081,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 3074,
											"end": 3096,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2894,
											"end": 3103,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4434,
											"end": 4441,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4471,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4460,
											"end": 4487,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4345,
											"end": 4494,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "tag",
											"source": 12,
											"value": "174"
										},
										{
											"begin": 3599,
											"end": 3684,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3640,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 3648,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 3648,
											"end": 3652,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 3648,
											"end": 3654,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3648,
											"end": 3654,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 3648,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3665,
											"end": 3675,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 3648,
											"end": 3664,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "tag",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "tag",
											"source": 12,
											"value": "448"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 3648,
											"end": 3676,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "tag",
											"source": 12,
											"value": "178"
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "451"
										},
										{
											"begin": 1355,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "tag",
											"source": 0,
											"value": "451"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8908,
											"end": 8914,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 8908,
											"end": 8912,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 8908,
											"end": 8914,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8908,
											"end": 8914,
											"name": "tag",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 8908,
											"end": 8914,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8890,
											"end": 8915,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8890,
											"end": 8896,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8890,
											"end": 8915,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8890,
											"end": 8915,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 8890,
											"end": 8915,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10003,
											"end": 10005,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9985,
											"end": 10006,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10042,
											"end": 10043,
											"name": "PUSH",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 10022,
											"end": 10040,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 10022,
											"end": 10040,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10022,
											"end": 10040,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10015,
											"end": 10044,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10BA37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10060,
											"end": 10078,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 10060,
											"end": 10078,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10060,
											"end": 10078,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10053,
											"end": 10089,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10106,
											"end": 10124,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 10106,
											"end": 10124,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9975,
											"end": 10130,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "tag",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 8882,
											"end": 8926,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8998,
											"end": 9002,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8937,
											"end": 8951,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8937,
											"end": 8951,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8954,
											"end": 8989,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 8989,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 8989,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 8989,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 8954,
											"end": 8989,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "tag",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "tag",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "461"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "230"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "tag",
											"source": 12,
											"value": "461"
										},
										{
											"begin": 8954,
											"end": 9004,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8937,
											"end": 9004,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9014,
											"end": 9072,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "462"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9014,
											"end": 9052,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9014,
											"end": 9052,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 9053,
											"end": 9063,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 8937,
											"end": 9004,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9014,
											"end": 9052,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "250"
										},
										{
											"begin": 9014,
											"end": 9072,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9014,
											"end": 9072,
											"name": "tag",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 9014,
											"end": 9072,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1378,
											"end": 1379,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "tag",
											"source": 12,
											"value": "185"
										},
										{
											"begin": 8153,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "464"
										},
										{
											"begin": 1355,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "tag",
											"source": 0,
											"value": "464"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8212,
											"end": 8226,
											"name": "PUSH",
											"source": 12,
											"value": "C9"
										},
										{
											"begin": 8212,
											"end": 8241,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8212,
											"end": 8241,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "466"
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12666,
											"end": 12668,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 12648,
											"end": 12669,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12705,
											"end": 12707,
											"name": "PUSH",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 12685,
											"end": 12703,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12685,
											"end": 12703,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12685,
											"end": 12703,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12678,
											"end": 12708,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5468657265206973206E6F2063616E646964617465"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12724,
											"end": 12742,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 12724,
											"end": 12742,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12724,
											"end": 12742,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12717,
											"end": 12768,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12785,
											"end": 12803,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 12785,
											"end": 12803,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 12638,
											"end": 12809,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "tag",
											"source": 12,
											"value": "466"
										},
										{
											"begin": 8204,
											"end": 8281,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8329,
											"end": 8342,
											"name": "PUSH",
											"source": 12,
											"value": "CC"
										},
										{
											"begin": 8329,
											"end": 8342,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8299,
											"end": 8326,
											"name": "PUSH",
											"source": 12,
											"value": "CA"
										},
										{
											"begin": 8299,
											"end": 8326,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8345,
											"end": 8360,
											"name": "TIMESTAMP",
											"source": 12
										},
										{
											"begin": 8345,
											"end": 8360,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "469"
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "247"
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "tag",
											"source": 12,
											"value": "469"
										},
										{
											"begin": 8299,
											"end": 8342,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8299,
											"end": 8360,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9654,
											"end": 9656,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9636,
											"end": 9657,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9693,
											"end": 9695,
											"name": "PUSH",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9666,
											"end": 9696,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "11195B185E481A185CC81B9BDD081C185CDCD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9705,
											"end": 9755,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9772,
											"end": 9790,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 9772,
											"end": 9790,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9626,
											"end": 9796,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "tag",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 8291,
											"end": 8385,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8414,
											"end": 8428,
											"name": "PUSH",
											"source": 12,
											"value": "C9"
										},
										{
											"begin": 8414,
											"end": 8443,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8414,
											"end": 8443,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8414,
											"end": 8443,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8414,
											"end": 8443,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4703,
											"end": 4754,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "PUSH",
											"source": 12,
											"value": "7F37D440E85ABA7FBF641C4BDA5CA4EF669A80BFFAACDE2AA8D9FEB1B048C82C"
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4691,
											"end": 4693,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4676,
											"end": 4694,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8401,
											"end": 8444,
											"name": "LOG1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8455,
											"end": 8463,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8455,
											"end": 8475,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8475,
											"name": "PUSH",
											"source": 12,
											"value": "FB617787"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "tag",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "tag",
											"source": 12,
											"value": "476"
										},
										{
											"begin": 8455,
											"end": 8477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8508,
											"end": 8522,
											"name": "PUSH",
											"source": 12,
											"value": "C9"
										},
										{
											"begin": 8508,
											"end": 8537,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8508,
											"end": 8537,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8495,
											"name": "PUSH",
											"source": 12,
											"value": "CB"
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8508,
											"end": 8537,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8508,
											"end": 8537,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8487,
											"end": 8538,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8548,
											"end": 8590,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8548,
											"end": 8590,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8548,
											"end": 8590,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8630,
											"end": 8640,
											"name": "PUSH",
											"source": 12,
											"value": "12A05F200"
										},
										{
											"begin": 8600,
											"end": 8627,
											"name": "PUSH",
											"source": 12,
											"value": "CA"
										},
										{
											"begin": 8600,
											"end": 8640,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 8651,
											"end": 8657,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 8651,
											"end": 8655,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 8651,
											"end": 8657,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 2335,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "479"
										},
										{
											"begin": 1355,
											"end": 1366,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "tag",
											"source": 0,
											"value": "479"
										},
										{
											"begin": 1355,
											"end": 1368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2423,
											"end": 2445,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2423,
											"end": 2445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "481"
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7672,
											"end": 7674,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7654,
											"end": 7675,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7711,
											"end": 7713,
											"name": "PUSH",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 7691,
											"end": 7709,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 7691,
											"end": 7709,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7691,
											"end": 7709,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7684,
											"end": 7714,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7750,
											"end": 7784,
											"name": "PUSH",
											"source": 13,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 7730,
											"end": 7748,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 7730,
											"end": 7748,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7730,
											"end": 7748,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7723,
											"end": 7785,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7801,
											"end": 7819,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 7801,
											"end": 7819,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7801,
											"end": 7819,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7794,
											"end": 7830,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7847,
											"end": 7866,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 7847,
											"end": 7866,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 7644,
											"end": 7872,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "tag",
											"source": 0,
											"value": "481"
										},
										{
											"begin": 2415,
											"end": 2488,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2498,
											"end": 2526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "410"
										},
										{
											"begin": 2517,
											"end": 2525,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2498,
											"end": 2516,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 2498,
											"end": 2526,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "tag",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10916,
											"end": 10935,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10916,
											"end": 10935,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "487"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 13016,
											"end": 13018,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 12998,
											"end": 13019,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13055,
											"end": 13057,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13035,
											"end": 13053,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 13035,
											"end": 13053,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13035,
											"end": 13053,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13028,
											"end": 13058,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13094,
											"end": 13128,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 13074,
											"end": 13092,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 13074,
											"end": 13092,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13074,
											"end": 13092,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13067,
											"end": 13129,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13145,
											"end": 13163,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 13145,
											"end": 13163,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13145,
											"end": 13163,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13138,
											"end": 13172,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13189,
											"end": 13208,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 13189,
											"end": 13208,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 12988,
											"end": 13214,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "tag",
											"source": 3,
											"value": "487"
										},
										{
											"begin": 10908,
											"end": 10976,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10994,
											"end": 11015,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10994,
											"end": 11015,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "490"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8079,
											"end": 8081,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8061,
											"end": 8082,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8118,
											"end": 8120,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 8098,
											"end": 8116,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8098,
											"end": 8116,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8098,
											"end": 8116,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8091,
											"end": 8121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8157,
											"end": 8191,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 8137,
											"end": 8155,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 8137,
											"end": 8155,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8137,
											"end": 8155,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8130,
											"end": 8192,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8208,
											"end": 8226,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 8208,
											"end": 8226,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8208,
											"end": 8226,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8201,
											"end": 8233,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8250,
											"end": 8269,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 8250,
											"end": 8269,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 8051,
											"end": 8275,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "tag",
											"source": 3,
											"value": "490"
										},
										{
											"begin": 10986,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11076,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11083,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11092,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11065,
											"end": 11101,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11116,
											"end": 11148,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10815,
											"end": 11155,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "tag",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 11436,
											"end": 11847,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11560,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "495"
										},
										{
											"begin": 11573,
											"end": 11578,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11580,
											"end": 11587,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11563,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "tag",
											"source": 3,
											"value": "495"
										},
										{
											"begin": 11563,
											"end": 11588,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11588,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 11536,
											"end": 11588,
											"name": "POP",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11602,
											"end": 11618,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11602,
											"end": 11639,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 11598,
											"end": 11841,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 11598,
											"end": 11841,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 11683,
											"end": 11689,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11689,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 11663,
											"end": 11689,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "497"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8482,
											"end": 8484,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8464,
											"end": 8485,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8521,
											"end": 8523,
											"name": "PUSH",
											"source": 13,
											"value": "1D"
										},
										{
											"begin": 8501,
											"end": 8519,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8501,
											"end": 8519,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8501,
											"end": 8519,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8494,
											"end": 8524,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8560,
											"end": 8591,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 8540,
											"end": 8558,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 8540,
											"end": 8558,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8540,
											"end": 8558,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8533,
											"end": 8592,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8609,
											"end": 8627,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 8609,
											"end": 8627,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 8454,
											"end": 8633,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "tag",
											"source": 3,
											"value": "497"
										},
										{
											"begin": 11655,
											"end": 11723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 11774,
											"end": 11779,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11781,
											"end": 11788,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11809,
											"end": 11815,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11790,
											"end": 11806,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11790,
											"end": 11815,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11765,
											"end": 11773,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 11765,
											"end": 11816,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 7814,
											"end": 8602,
											"name": "tag",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 7814,
											"end": 8602,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7910,
											"end": 7928,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7910,
											"end": 7928,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "502"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 12260,
											"end": 12262,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 12242,
											"end": 12263,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12299,
											"end": 12301,
											"name": "PUSH",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 12279,
											"end": 12297,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 12279,
											"end": 12297,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12279,
											"end": 12297,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12272,
											"end": 12302,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12338,
											"end": 12372,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 12318,
											"end": 12336,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 12318,
											"end": 12336,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12318,
											"end": 12336,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12311,
											"end": 12373,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12389,
											"end": 12407,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 12389,
											"end": 12407,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 12389,
											"end": 12407,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 12382,
											"end": 12417,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12434,
											"end": 12453,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 12434,
											"end": 12453,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 12232,
											"end": 12459,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "tag",
											"source": 3,
											"value": "502"
										},
										{
											"begin": 7902,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7988,
											"end": 8004,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7988,
											"end": 8004,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "505"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6865,
											"end": 6867,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6847,
											"end": 6868,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6904,
											"end": 6906,
											"name": "PUSH",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 6884,
											"end": 6902,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 6884,
											"end": 6902,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6884,
											"end": 6902,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6877,
											"end": 6907,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6943,
											"end": 6977,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 6923,
											"end": 6941,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 6923,
											"end": 6941,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6923,
											"end": 6941,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6916,
											"end": 6978,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6994,
											"end": 7012,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 6994,
											"end": 7012,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6994,
											"end": 7012,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6987,
											"end": 7020,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7037,
											"end": 7056,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 7037,
											"end": 7056,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 6837,
											"end": 7062,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "tag",
											"source": 3,
											"value": "505"
										},
										{
											"begin": 7980,
											"end": 8044,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8104,
											"end": 8123,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8135,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8126,
											"end": 8141,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 8159,
											"end": 8180,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "510"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8840,
											"end": 8842,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8822,
											"end": 8843,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8879,
											"end": 8881,
											"name": "PUSH",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 8859,
											"end": 8877,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 8859,
											"end": 8877,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8859,
											"end": 8877,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8852,
											"end": 8882,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8918,
											"end": 8952,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 8898,
											"end": 8916,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 8898,
											"end": 8916,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8898,
											"end": 8916,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8891,
											"end": 8953,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8969,
											"end": 8987,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 8969,
											"end": 8987,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8969,
											"end": 8987,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8962,
											"end": 8998,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9015,
											"end": 9034,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 9015,
											"end": 9034,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 8812,
											"end": 9040,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "tag",
											"source": 3,
											"value": "510"
										},
										{
											"begin": 8151,
											"end": 8223,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8266,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8275,
											"end": 8295,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8295,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8257,
											"end": 8295,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8485,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8472,
											"end": 8495,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "513"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8289,
											"end": 8295,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15660,
											"end": 15662,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15627,
											"end": 15703,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "tag",
											"source": 3,
											"value": "513"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8521,
											"end": 8547,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 8558,
											"end": 8595,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9733,
											"end": 10392,
											"name": "tag",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 9733,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9816,
											"end": 9837,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9816,
											"end": 9837,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "517"
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 11858,
											"end": 11860,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 11840,
											"end": 11861,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11897,
											"end": 11899,
											"name": "PUSH",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 11877,
											"end": 11895,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 11877,
											"end": 11895,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11877,
											"end": 11895,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11870,
											"end": 11900,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11936,
											"end": 11970,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 11916,
											"end": 11934,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 11916,
											"end": 11934,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11916,
											"end": 11934,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11909,
											"end": 11971,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11987,
											"end": 12005,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 11987,
											"end": 12005,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11987,
											"end": 12005,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11980,
											"end": 12011,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 12028,
											"end": 12047,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 12028,
											"end": 12047,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 11830,
											"end": 12053,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "tag",
											"source": 3,
											"value": "517"
										},
										{
											"begin": 9808,
											"end": 9875,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9946,
											"end": 9968,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9980,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 10007,
											"end": 10031,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10007,
											"end": 10031,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10007,
											"end": 10031,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10007,
											"end": 10031,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "521"
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7269,
											"end": 7271,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7251,
											"end": 7272,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7308,
											"end": 7310,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 7288,
											"end": 7306,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 7288,
											"end": 7306,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7288,
											"end": 7306,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7281,
											"end": 7311,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7347,
											"end": 7381,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7320,
											"end": 7382,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7398,
											"end": 7416,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 7398,
											"end": 7416,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7398,
											"end": 7416,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7391,
											"end": 7423,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7440,
											"end": 7459,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 7440,
											"end": 7459,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 7241,
											"end": 7465,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "tag",
											"source": 3,
											"value": "521"
										},
										{
											"begin": 9999,
											"end": 10070,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10113,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10125,
											"end": 10148,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 10125,
											"end": 10148,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 10125,
											"end": 10148,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10148,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10148,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10253,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10241,
											"end": 10263,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10104,
											"end": 10122,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10289,
											"end": 10326,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6071,
											"end": 6598,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 996,
											"end": 1182,
											"name": "tag",
											"source": 7,
											"value": "250"
										},
										{
											"begin": 996,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5337,
											"end": 5369,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5337,
											"end": 5369,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5319,
											"end": 5370,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5386,
											"end": 5404,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5379,
											"end": 5413,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1089,
											"end": 1175,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 1089,
											"end": 1175,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1109,
											"end": 1114,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1109,
											"end": 1114,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1162,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5292,
											"end": 5310,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 5292,
											"end": 5310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "tag",
											"source": 7,
											"value": "528"
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1116,
											"end": 1174,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1089,
											"end": 1108,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "529"
										},
										{
											"begin": 1089,
											"end": 1175,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2139,
											"end": 2286,
											"name": "tag",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 2139,
											"end": 2286,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "532"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2241,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "462"
										},
										{
											"begin": 2264,
											"end": 2269,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2271,
											"end": 2278,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2241,
											"end": 2263,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "537"
										},
										{
											"begin": 2241,
											"end": 2279,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1024,
											"end": 1119,
											"name": "tag",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 1024,
											"end": 1119,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1086,
											"end": 1112,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 1086,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "543"
										},
										{
											"begin": 1086,
											"end": 1112,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1889,
											"end": 2000,
											"name": "tag",
											"source": 2,
											"value": "283"
										},
										{
											"begin": 1889,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1959,
											"end": 1993,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "258"
										},
										{
											"begin": 1959,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "549"
										},
										{
											"begin": 1959,
											"end": 1993,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1620,
											"end": 1750,
											"name": "tag",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 1620,
											"end": 1750,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1534,
											"end": 1540,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1683,
											"end": 1706,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11497,
											"end": 11499,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11479,
											"end": 11500,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 11479,
											"end": 11500,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 11479,
											"end": 11500,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11516,
											"end": 11534,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 11516,
											"end": 11534,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11516,
											"end": 11534,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11509,
											"end": 11539,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11575,
											"end": 11609,
											"name": "PUSH",
											"source": 13,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 11555,
											"end": 11573,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 11555,
											"end": 11573,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 11555,
											"end": 11573,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11548,
											"end": 11610,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11627,
											"end": 11645,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 11627,
											"end": 11645,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1675,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 11469,
											"end": 11651,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2687,
											"end": 2874,
											"name": "tag",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 2687,
											"end": 2874,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2827,
											"end": 2867,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2827,
											"end": 2867,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2785,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2827,
											"end": 2867,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2827,
											"end": 2867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2760,
											"end": 2776,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2760,
											"end": 2776,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2827,
											"end": 2867,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2687,
											"end": 2874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2687,
											"end": 2874,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2687,
											"end": 2874,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2601,
											"end": 2888,
											"name": "tag",
											"source": 2,
											"value": "390"
										},
										{
											"begin": 2601,
											"end": 2888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1851,
											"end": 1852,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2733,
											"end": 2740,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2733,
											"end": 2740,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 2752,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 2752,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "558"
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14602,
											"end": 14604,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14584,
											"end": 14605,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14641,
											"end": 14643,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 14621,
											"end": 14639,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 14621,
											"end": 14639,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14621,
											"end": 14639,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14614,
											"end": 14644,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14680,
											"end": 14713,
											"name": "PUSH",
											"source": 13,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 14660,
											"end": 14678,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 14660,
											"end": 14678,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14660,
											"end": 14678,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14653,
											"end": 14714,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14731,
											"end": 14749,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 14731,
											"end": 14749,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 14574,
											"end": 14755,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "tag",
											"source": 2,
											"value": "558"
										},
										{
											"begin": 2725,
											"end": 2788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1851,
											"end": 1852,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2863,
											"end": 2870,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2863,
											"end": 2881,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2601,
											"end": 2888,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1421,
											"end": 1635,
											"name": "tag",
											"source": 7,
											"value": "398"
										},
										{
											"begin": 1421,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5023,
											"end": 5038,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5023,
											"end": 5038,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5023,
											"end": 5038,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5005,
											"end": 5039,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5075,
											"end": 5090,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5075,
											"end": 5090,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5055,
											"end": 5073,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 5055,
											"end": 5073,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5055,
											"end": 5073,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5048,
											"end": 5091,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5107,
											"end": 5125,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 5107,
											"end": 5125,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5107,
											"end": 5125,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5100,
											"end": 5134,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5100,
											"end": 5134,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5100,
											"end": 5134,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1532,
											"end": 1628,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 1532,
											"end": 1628,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1557,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1557,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1582,
											"end": 1609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4940,
											"end": 4958,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 4940,
											"end": 4958,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1559,
											"end": 1627,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "528"
										},
										{
											"begin": 4922,
											"end": 5140,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8878,
											"end": 9413,
											"name": "tag",
											"source": 3,
											"value": "409"
										},
										{
											"begin": 8878,
											"end": 9413,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8961,
											"end": 8982,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8961,
											"end": 8982,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "566"
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 15368,
											"end": 15370,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 15350,
											"end": 15371,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15407,
											"end": 15409,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 15387,
											"end": 15405,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 15387,
											"end": 15405,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15387,
											"end": 15405,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15380,
											"end": 15410,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15446,
											"end": 15479,
											"name": "PUSH",
											"source": 13,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 15426,
											"end": 15444,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 15426,
											"end": 15444,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15426,
											"end": 15444,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15419,
											"end": 15480,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 15497,
											"end": 15515,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 15497,
											"end": 15515,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "274"
										},
										{
											"begin": 15340,
											"end": 15521,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "tag",
											"source": 3,
											"value": "566"
										},
										{
											"begin": 8953,
											"end": 9018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9111,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9101,
											"name": "PUSH",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 9089,
											"end": 9101,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "570"
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "tag",
											"source": 3,
											"value": "570"
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9111,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9266,
											"name": "PUSH",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9257,
											"end": 9285,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 15672,
											"end": 15697,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15645,
											"end": 15663,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9310,
											"end": 9347,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 1378,
											"end": 1379,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8807,
											"end": 9079,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2894,
											"end": 3103,
											"name": "tag",
											"source": 2,
											"value": "411"
										},
										{
											"begin": 2894,
											"end": 3103,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1808,
											"end": 1809,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3074,
											"end": 3081,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 3074,
											"end": 3096,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2894,
											"end": 3103,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5328,
											"end": 5981,
											"name": "tag",
											"source": 7,
											"value": "529"
										},
										{
											"begin": 5328,
											"end": 5981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5781,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "577"
										},
										{
											"begin": 5812,
											"end": 5816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5792,
											"end": 5797,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5784,
											"end": 5811,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5811,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "578"
										},
										{
											"begin": 5784,
											"end": 5811,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "tag",
											"source": 7,
											"value": "577"
										},
										{
											"begin": 5784,
											"end": 5853,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5853,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5853,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5871,
											"end": 5881,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5871,
											"end": 5888,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5892,
											"end": 5893,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5871,
											"end": 5893,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5871,
											"end": 5927,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5871,
											"end": 5927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "580"
										},
										{
											"begin": 5871,
											"end": 5927,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5871,
											"end": 5927,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5908,
											"end": 5918,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "580"
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "581"
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "tag",
											"source": 7,
											"value": "580"
										},
										{
											"begin": 5897,
											"end": 5927,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "248"
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 14191,
											"end": 14193,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14173,
											"end": 14194,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14230,
											"end": 14232,
											"name": "PUSH",
											"source": 13,
											"value": "2A"
										},
										{
											"begin": 14210,
											"end": 14228,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 14210,
											"end": 14228,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14210,
											"end": 14228,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14203,
											"end": 14233,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14269,
											"end": 14303,
											"name": "PUSH",
											"source": 13,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 14249,
											"end": 14267,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 14249,
											"end": 14267,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14249,
											"end": 14267,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14242,
											"end": 14304,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 14313,
											"end": 14353,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 14370,
											"end": 14389,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 14370,
											"end": 14389,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5863,
											"end": 5974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 14163,
											"end": 14395,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2292,
											"end": 2451,
											"name": "tag",
											"source": 3,
											"value": "537"
										},
										{
											"begin": 2292,
											"end": 2451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "586"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "586"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "589"
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "PUSH",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 2404,
											"end": 2409,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "590"
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "tag",
											"source": 3,
											"value": "589"
										},
										{
											"begin": 2404,
											"end": 2417,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "248"
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2434,
											"name": "PUSH",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 2427,
											"end": 2434,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "590"
										},
										{
											"begin": 2427,
											"end": 2444,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1125,
											"end": 1236,
											"name": "tag",
											"source": 0,
											"value": "543"
										},
										{
											"begin": 1125,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "593"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "tag",
											"source": 1,
											"value": "593"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1197,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 965,
											"end": 975,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 1197,
											"end": 1229,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2006,
											"end": 2115,
											"name": "tag",
											"source": 2,
											"value": "549"
										},
										{
											"begin": 2006,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5374,
											"end": 5387,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "411"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "274"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 5366,
											"end": 5435,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4119,
											"end": 4342,
											"name": "tag",
											"source": 8,
											"value": "578"
										},
										{
											"begin": 4119,
											"end": 4342,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4252,
											"end": 4264,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4283,
											"end": 4335,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "603"
										},
										{
											"begin": 4305,
											"end": 4311,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4313,
											"end": 4317,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4319,
											"end": 4320,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4322,
											"end": 4334,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4283,
											"end": 4304,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "604"
										},
										{
											"begin": 4283,
											"end": 4335,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4283,
											"end": 4335,
											"name": "tag",
											"source": 8,
											"value": "603"
										},
										{
											"begin": 4283,
											"end": 4335,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4276,
											"end": 4335,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4119,
											"end": 4342,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4119,
											"end": 4342,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5176,
											"end": 5622,
											"name": "tag",
											"source": 8,
											"value": "604"
										},
										{
											"begin": 5176,
											"end": 5622,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5341,
											"end": 5353,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5398,
											"end": 5403,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5373,
											"end": 5394,
											"name": "SELFBALANCE",
											"source": 8
										},
										{
											"begin": 5373,
											"end": 5403,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5373,
											"end": 5403,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "606"
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9247,
											"end": 9249,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9229,
											"end": 9250,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9286,
											"end": 9288,
											"name": "PUSH",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 9266,
											"end": 9284,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 9266,
											"end": 9284,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9266,
											"end": 9284,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9259,
											"end": 9289,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9325,
											"end": 9359,
											"name": "PUSH",
											"source": 13,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 9305,
											"end": 9323,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 9305,
											"end": 9323,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9305,
											"end": 9323,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9298,
											"end": 9360,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9376,
											"end": 9394,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 9376,
											"end": 9394,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9376,
											"end": 9394,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9369,
											"end": 9405,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9422,
											"end": 9441,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 9422,
											"end": 9441,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 9219,
											"end": 9447,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "tag",
											"source": 8,
											"value": "606"
										},
										{
											"begin": 5365,
											"end": 5446,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5457,
											"end": 5469,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5471,
											"end": 5494,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5504,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5498,
											"end": 5509,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5517,
											"end": 5522,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5524,
											"end": 5528,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "609"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "610"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "tag",
											"source": 8,
											"value": "609"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "613"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "612"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "tag",
											"source": 8,
											"value": "613"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "tag",
											"source": 8,
											"value": "612"
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5456,
											"end": 5529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5456,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5456,
											"end": 5529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5456,
											"end": 5529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5615,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "614"
										},
										{
											"begin": 5573,
											"end": 5579,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5581,
											"end": 5588,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5590,
											"end": 5600,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5602,
											"end": 5614,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5546,
											"end": 5572,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "615"
										},
										{
											"begin": 5546,
											"end": 5615,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5546,
											"end": 5615,
											"name": "tag",
											"source": 8,
											"value": "614"
										},
										{
											"begin": 5546,
											"end": 5615,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5539,
											"end": 5615,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": 5176,
											"end": 5622,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5176,
											"end": 5622,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "tag",
											"source": 8,
											"value": "615"
										},
										{
											"begin": 7682,
											"end": 8310,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7862,
											"end": 7874,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7890,
											"end": 7897,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "617"
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7917,
											"end": 7934,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7917,
											"end": 7934,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7913,
											"end": 8199,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "620"
										},
										{
											"begin": 7913,
											"end": 8199,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1713,
											"end": 1732,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "620"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13421,
											"end": 13423,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13403,
											"end": 13424,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13460,
											"end": 13462,
											"name": "PUSH",
											"source": 13,
											"value": "1D"
										},
										{
											"begin": 13440,
											"end": 13458,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 13440,
											"end": 13458,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13440,
											"end": 13458,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13433,
											"end": 13463,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13499,
											"end": 13530,
											"name": "PUSH",
											"source": 13,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 13479,
											"end": 13497,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 13479,
											"end": 13497,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13479,
											"end": 13497,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13472,
											"end": 13531,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13548,
											"end": 13566,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 13548,
											"end": 13566,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 13393,
											"end": 13572,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "tag",
											"source": 8,
											"value": "620"
										},
										{
											"begin": 8124,
											"end": 8184,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8219,
											"end": 8229,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8212,
											"end": 8229,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "603"
										},
										{
											"begin": 8212,
											"end": 8229,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "tag",
											"source": 8,
											"value": "617"
										},
										{
											"begin": 7886,
											"end": 8304,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8260,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "603"
										},
										{
											"begin": 8268,
											"end": 8278,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8280,
											"end": 8292,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8991,
											"end": 9008,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8991,
											"end": 9008,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8991,
											"end": 9012,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "627"
										},
										{
											"begin": 8987,
											"end": 9366,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9219,
											"end": 9229,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9213,
											"end": 9230,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9275,
											"end": 9290,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9262,
											"end": 9272,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9258,
											"end": 9260,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9254,
											"end": 9273,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9247,
											"end": 9291,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9172,
											"end": 9305,
											"name": "tag",
											"source": 8,
											"value": "627"
										},
										{
											"begin": 9172,
											"end": 9305,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9342,
											"end": 9354,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 9335,
											"end": 9355,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "590"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "630"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "192"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "630"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "632"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "635"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "632"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "635"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "635"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "634"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "635"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "634"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "635"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "636"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "637"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "636"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "637"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "638"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "636"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "638"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 753,
											"name": "tag",
											"source": 13,
											"value": "641"
										},
										{
											"begin": 14,
											"end": 753,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 57,
											"end": 62,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 110,
											"end": 113,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 103,
											"end": 107,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 95,
											"end": 101,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 91,
											"end": 108,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 87,
											"end": 114,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 77,
											"end": 79,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 77,
											"end": 79,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 132,
											"end": 137,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 125,
											"end": 130,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 118,
											"end": 138,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 77,
											"end": 79,
											"name": "tag",
											"source": 13,
											"value": "643"
										},
										{
											"begin": 77,
											"end": 79,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 172,
											"end": 178,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 159,
											"end": 179,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 198,
											"end": 216,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 235,
											"end": 237,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 231,
											"end": 233,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 228,
											"end": 238,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 225,
											"end": 227,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 225,
											"end": 227,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 225,
											"end": 227,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 241,
											"end": 259,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "646"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "tag",
											"source": 13,
											"value": "645"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 318,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 310,
											"end": 319,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 284,
											"end": 286,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 370,
											"end": 383,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 370,
											"end": 383,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 366,
											"end": 388,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 366,
											"end": 388,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 366,
											"end": 388,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 390,
											"end": 392,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 362,
											"end": 393,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 358,
											"end": 398,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 346,
											"end": 399,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 346,
											"end": 399,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 346,
											"end": 399,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 414,
											"end": 432,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 414,
											"end": 432,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 414,
											"end": 432,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 434,
											"end": 456,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 434,
											"end": 456,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 434,
											"end": 456,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 411,
											"end": 457,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 408,
											"end": 410,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 408,
											"end": 410,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 408,
											"end": 410,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 460,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "646"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "tag",
											"source": 13,
											"value": "648"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 500,
											"end": 510,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 496,
											"end": 498,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 489,
											"end": 511,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 535,
											"end": 537,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 527,
											"end": 533,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 520,
											"end": 538,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 581,
											"end": 584,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 574,
											"end": 578,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 569,
											"end": 571,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 561,
											"end": 567,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 557,
											"end": 572,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 553,
											"end": 579,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 550,
											"end": 585,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 547,
											"end": 549,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 547,
											"end": 549,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "649"
										},
										{
											"begin": 547,
											"end": 549,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 602,
											"end": 607,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 595,
											"end": 600,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 588,
											"end": 608,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 547,
											"end": 549,
											"name": "tag",
											"source": 13,
											"value": "649"
										},
										{
											"begin": 547,
											"end": 549,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 670,
											"end": 672,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 663,
											"end": 667,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 655,
											"end": 661,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 651,
											"end": 668,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 644,
											"end": 648,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 636,
											"end": 642,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 632,
											"end": 649,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 619,
											"end": 673,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 693,
											"end": 708,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 693,
											"end": 708,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 693,
											"end": 708,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 710,
											"end": 714,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 689,
											"end": 715,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 682,
											"end": 723,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 697,
											"end": 703,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 67,
											"end": 753,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 67,
											"end": 753,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 758,
											"end": 1015,
											"name": "tag",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 758,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 817,
											"end": 823,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 872,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 858,
											"end": 867,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 849,
											"end": 856,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 845,
											"end": 868,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 841,
											"end": 873,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 838,
											"end": 840,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 838,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "651"
										},
										{
											"begin": 838,
											"end": 840,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 891,
											"end": 897,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 883,
											"end": 889,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 876,
											"end": 898,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 838,
											"end": 840,
											"name": "tag",
											"source": 13,
											"value": "651"
										},
										{
											"begin": 838,
											"end": 840,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 935,
											"end": 944,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 922,
											"end": 945,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 954,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "652"
										},
										{
											"begin": 979,
											"end": 984,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 954,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "tag",
											"source": 13,
											"value": "652"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 828,
											"end": 1015,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 828,
											"end": 1015,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1020,
											"end": 1281,
											"name": "tag",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 1020,
											"end": 1281,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1090,
											"end": 1096,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1143,
											"end": 1145,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1131,
											"end": 1140,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1122,
											"end": 1129,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1118,
											"end": 1141,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1114,
											"end": 1146,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "655"
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1164,
											"end": 1170,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1156,
											"end": 1162,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1149,
											"end": 1171,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "tag",
											"source": 13,
											"value": "655"
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1201,
											"end": 1210,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1195,
											"end": 1211,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "652"
										},
										{
											"begin": 1245,
											"end": 1250,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1286,
											"end": 1684,
											"name": "tag",
											"source": 13,
											"value": "169"
										},
										{
											"begin": 1286,
											"end": 1684,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1354,
											"end": 1360,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1362,
											"end": 1368,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1415,
											"end": 1417,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1394,
											"end": 1401,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1390,
											"end": 1413,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1386,
											"end": 1418,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "658"
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1436,
											"end": 1442,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1428,
											"end": 1434,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1421,
											"end": 1443,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "tag",
											"source": 13,
											"value": "658"
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1480,
											"end": 1489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1467,
											"end": 1490,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "659"
										},
										{
											"begin": 1524,
											"end": 1529,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "tag",
											"source": 13,
											"value": "659"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1549,
											"end": 1554,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1606,
											"end": 1608,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1591,
											"end": 1609,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1609,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1578,
											"end": 1610,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "660"
										},
										{
											"begin": 1578,
											"end": 1610,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "tag",
											"source": 13,
											"value": "660"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1671,
											"end": 1678,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1689,
											"end": 2155,
											"name": "tag",
											"source": 13,
											"value": "70"
										},
										{
											"begin": 1689,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1774,
											"end": 1780,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1782,
											"end": 1788,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1835,
											"end": 1837,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1823,
											"end": 1832,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1814,
											"end": 1821,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1810,
											"end": 1833,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1806,
											"end": 1838,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "662"
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1856,
											"end": 1862,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1848,
											"end": 1854,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1841,
											"end": 1863,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "tag",
											"source": 13,
											"value": "662"
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1900,
											"end": 1909,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1887,
											"end": 1910,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "663"
										},
										{
											"begin": 1944,
											"end": 1949,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "tag",
											"source": 13,
											"value": "663"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1969,
											"end": 1974,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2026,
											"end": 2028,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2011,
											"end": 2029,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2011,
											"end": 2029,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1998,
											"end": 2030,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "664"
										},
										{
											"begin": 1998,
											"end": 2030,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "tag",
											"source": 13,
											"value": "664"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2145,
											"end": 2147,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2160,
											"end": 2485,
											"name": "tag",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 2160,
											"end": 2485,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2228,
											"end": 2234,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2236,
											"end": 2242,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2289,
											"end": 2291,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2277,
											"end": 2286,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2268,
											"end": 2275,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2264,
											"end": 2287,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2260,
											"end": 2292,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "666"
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2302,
											"end": 2308,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2295,
											"end": 2317,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "tag",
											"source": 13,
											"value": "666"
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2354,
											"end": 2363,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2341,
											"end": 2364,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "667"
										},
										{
											"begin": 2398,
											"end": 2403,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "tag",
											"source": 13,
											"value": "667"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2423,
											"end": 2428,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 2475,
											"end": 2477,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2447,
											"end": 2479,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2447,
											"end": 2479,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2247,
											"end": 2485,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2490,
											"end": 2787,
											"name": "tag",
											"source": 13,
											"value": "581"
										},
										{
											"begin": 2490,
											"end": 2787,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2557,
											"end": 2563,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2610,
											"end": 2612,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2598,
											"end": 2607,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2589,
											"end": 2596,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2585,
											"end": 2608,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2581,
											"end": 2613,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "669"
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2631,
											"end": 2637,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2623,
											"end": 2629,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2616,
											"end": 2638,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "tag",
											"source": 13,
											"value": "669"
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2668,
											"end": 2677,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2662,
											"end": 2678,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2721,
											"end": 2726,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2714,
											"end": 2727,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2707,
											"end": 2728,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2700,
											"end": 2705,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2697,
											"end": 2729,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2687,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "652"
										},
										{
											"begin": 2687,
											"end": 2689,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2748,
											"end": 2754,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2746,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2733,
											"end": 2755,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3084,
											"end": 3879,
											"name": "tag",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 3084,
											"end": 3879,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3208,
											"end": 3214,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3216,
											"end": 3222,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3224,
											"end": 3230,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3232,
											"end": 3238,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3285,
											"end": 3288,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3273,
											"end": 3282,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3264,
											"end": 3271,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3260,
											"end": 3283,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3256,
											"end": 3289,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3253,
											"end": 3255,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3253,
											"end": 3255,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "675"
										},
										{
											"begin": 3253,
											"end": 3255,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3307,
											"end": 3313,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3299,
											"end": 3305,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3292,
											"end": 3314,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3253,
											"end": 3255,
											"name": "tag",
											"source": 13,
											"value": "675"
										},
										{
											"begin": 3253,
											"end": 3255,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3351,
											"end": 3360,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3338,
											"end": 3361,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3370,
											"end": 3401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "676"
										},
										{
											"begin": 3395,
											"end": 3400,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3370,
											"end": 3401,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 3370,
											"end": 3401,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3370,
											"end": 3401,
											"name": "tag",
											"source": 13,
											"value": "676"
										},
										{
											"begin": 3370,
											"end": 3401,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3420,
											"end": 3425,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3476,
											"end": 3478,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3461,
											"end": 3479,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3461,
											"end": 3479,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3448,
											"end": 3480,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3499,
											"end": 3517,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3529,
											"end": 3543,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3529,
											"end": 3543,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3529,
											"end": 3543,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3526,
											"end": 3528,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3526,
											"end": 3528,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "677"
										},
										{
											"begin": 3526,
											"end": 3528,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3561,
											"end": 3567,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3553,
											"end": 3559,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3546,
											"end": 3568,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3526,
											"end": 3528,
											"name": "tag",
											"source": 13,
											"value": "677"
										},
										{
											"begin": 3526,
											"end": 3528,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3589,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "678"
										},
										{
											"begin": 3631,
											"end": 3638,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3622,
											"end": 3628,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3611,
											"end": 3620,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 3607,
											"end": 3629,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3589,
											"end": 3639,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "641"
										},
										{
											"begin": 3589,
											"end": 3639,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3589,
											"end": 3639,
											"name": "tag",
											"source": 13,
											"value": "678"
										},
										{
											"begin": 3589,
											"end": 3639,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3579,
											"end": 3639,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3579,
											"end": 3639,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3692,
											"end": 3694,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3681,
											"end": 3690,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3677,
											"end": 3695,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3664,
											"end": 3696,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3648,
											"end": 3696,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3648,
											"end": 3696,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3721,
											"end": 3723,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3711,
											"end": 3719,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3708,
											"end": 3724,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "679"
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3742,
											"end": 3748,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3734,
											"end": 3740,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 3749,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "tag",
											"source": 13,
											"value": "679"
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3705,
											"end": 3707,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3770,
											"end": 3822,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "680"
										},
										{
											"begin": 3814,
											"end": 3821,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3803,
											"end": 3811,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3792,
											"end": 3801,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3788,
											"end": 3812,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3770,
											"end": 3822,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "641"
										},
										{
											"begin": 3770,
											"end": 3822,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3770,
											"end": 3822,
											"name": "tag",
											"source": 13,
											"value": "680"
										},
										{
											"begin": 3770,
											"end": 3822,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3243,
											"end": 3879,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3243,
											"end": 3879,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": 3243,
											"end": 3879,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3243,
											"end": 3879,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3760,
											"end": 3822,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3760,
											"end": 3822,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3869,
											"end": 3871,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3854,
											"end": 3872,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3841,
											"end": 3873,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3841,
											"end": 3873,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3243,
											"end": 3879,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 3884,
											"end": 4074,
											"name": "tag",
											"source": 13,
											"value": "76"
										},
										{
											"begin": 3884,
											"end": 4074,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3943,
											"end": 3949,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3996,
											"end": 3998,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3984,
											"end": 3993,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3975,
											"end": 3982,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3971,
											"end": 3994,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3967,
											"end": 3999,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3964,
											"end": 3966,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3964,
											"end": 3966,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "682"
										},
										{
											"begin": 3964,
											"end": 3966,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4017,
											"end": 4023,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4009,
											"end": 4015,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4002,
											"end": 4024,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3964,
											"end": 3966,
											"name": "tag",
											"source": 13,
											"value": "682"
										},
										{
											"begin": 3964,
											"end": 3966,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4045,
											"end": 4068,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4045,
											"end": 4068,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3954,
											"end": 4074,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3954,
											"end": 4074,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4079,
											"end": 4273,
											"name": "tag",
											"source": 13,
											"value": "230"
										},
										{
											"begin": 4079,
											"end": 4273,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4149,
											"end": 4155,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4204,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4190,
											"end": 4199,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4181,
											"end": 4188,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4177,
											"end": 4200,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4173,
											"end": 4205,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "684"
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4223,
											"end": 4229,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4215,
											"end": 4221,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4208,
											"end": 4230,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "tag",
											"source": 13,
											"value": "684"
										},
										{
											"begin": 4170,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4251,
											"end": 4267,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4251,
											"end": 4267,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4160,
											"end": 4273,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4160,
											"end": 4273,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4278,
											"end": 4552,
											"name": "tag",
											"source": 13,
											"value": "610"
										},
										{
											"begin": 4278,
											"end": 4552,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4407,
											"end": 4410,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4445,
											"end": 4451,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4439,
											"end": 4452,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4461,
											"end": 4514,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "686"
										},
										{
											"begin": 4507,
											"end": 4513,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4502,
											"end": 4505,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4495,
											"end": 4499,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4487,
											"end": 4493,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4483,
											"end": 4500,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4461,
											"end": 4514,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "687"
										},
										{
											"begin": 4461,
											"end": 4514,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4461,
											"end": 4514,
											"name": "tag",
											"source": 13,
											"value": "686"
										},
										{
											"begin": 4461,
											"end": 4514,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4530,
											"end": 4546,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4530,
											"end": 4546,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4530,
											"end": 4546,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4530,
											"end": 4546,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4530,
											"end": 4546,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4415,
											"end": 4552,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4415,
											"end": 4552,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 6275,
											"end": 6658,
											"name": "tag",
											"source": 13,
											"value": "49"
										},
										{
											"begin": 6275,
											"end": 6658,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6424,
											"end": 6426,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6413,
											"end": 6422,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6406,
											"end": 6427,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6387,
											"end": 6391,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6456,
											"end": 6462,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6450,
											"end": 6463,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6499,
											"end": 6505,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6494,
											"end": 6496,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6483,
											"end": 6492,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6479,
											"end": 6497,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6472,
											"end": 6506,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6515,
											"end": 6581,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "696"
										},
										{
											"begin": 6574,
											"end": 6580,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6569,
											"end": 6571,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6558,
											"end": 6567,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6554,
											"end": 6572,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6549,
											"end": 6551,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6541,
											"end": 6547,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 6537,
											"end": 6552,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6515,
											"end": 6581,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "687"
										},
										{
											"begin": 6515,
											"end": 6581,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6515,
											"end": 6581,
											"name": "tag",
											"source": 13,
											"value": "696"
										},
										{
											"begin": 6515,
											"end": 6581,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6642,
											"end": 6644,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 6621,
											"end": 6636,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6617,
											"end": 6646,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6602,
											"end": 6647,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6602,
											"end": 6647,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6602,
											"end": 6647,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6602,
											"end": 6647,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6649,
											"end": 6651,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6598,
											"end": 6652,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6598,
											"end": 6652,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6396,
											"end": 6658,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6396,
											"end": 6658,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 13577,
											"end": 13984,
											"name": "tag",
											"source": 13,
											"value": "534"
										},
										{
											"begin": 13577,
											"end": 13984,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 13779,
											"end": 13781,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 13761,
											"end": 13782,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 13761,
											"end": 13782,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13761,
											"end": 13782,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13818,
											"end": 13820,
											"name": "PUSH",
											"source": 13,
											"value": "2B"
										},
										{
											"begin": 13798,
											"end": 13816,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13798,
											"end": 13816,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13798,
											"end": 13816,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13791,
											"end": 13821,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13857,
											"end": 13891,
											"name": "PUSH",
											"source": 13,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 13852,
											"end": 13854,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 13837,
											"end": 13855,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13837,
											"end": 13855,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13830,
											"end": 13892,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13923,
											"end": 13925,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 13908,
											"end": 13926,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 13908,
											"end": 13926,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13901,
											"end": 13942,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 13974,
											"end": 13977,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 13959,
											"end": 13978,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 13959,
											"end": 13978,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 13751,
											"end": 13984,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 15897,
											"end": 16025,
											"name": "tag",
											"source": 13,
											"value": "247"
										},
										{
											"begin": 15897,
											"end": 16025,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 15937,
											"end": 15940,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 15968,
											"end": 15969,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15964,
											"end": 15970,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 15961,
											"end": 15962,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 15958,
											"end": 15971,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 15955,
											"end": 15957,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 15955,
											"end": 15957,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "724"
										},
										{
											"begin": 15955,
											"end": 15957,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 15974,
											"end": 15992,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "724"
										},
										{
											"begin": 15974,
											"end": 15992,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "725"
										},
										{
											"begin": 15974,
											"end": 15992,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 15974,
											"end": 15992,
											"name": "tag",
											"source": 13,
											"value": "724"
										},
										{
											"begin": 15974,
											"end": 15992,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16010,
											"end": 16019,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16010,
											"end": 16019,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 15945,
											"end": 16025,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16030,
											"end": 16247,
											"name": "tag",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 16030,
											"end": 16247,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16070,
											"end": 16071,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16096,
											"end": 16097,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16086,
											"end": 16088,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "727"
										},
										{
											"begin": 16086,
											"end": 16088,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16121,
											"end": 16152,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16121,
											"end": 16152,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16175,
											"end": 16179,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 16172,
											"end": 16173,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 16165,
											"end": 16180,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16203,
											"end": 16207,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 16128,
											"end": 16129,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16193,
											"end": 16208,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 16086,
											"end": 16088,
											"name": "tag",
											"source": 13,
											"value": "727"
										},
										{
											"begin": 16086,
											"end": 16088,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16232,
											"end": 16241,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 16232,
											"end": 16241,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16076,
											"end": 16247,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16252,
											"end": 16420,
											"name": "tag",
											"source": 13,
											"value": "219"
										},
										{
											"begin": 16252,
											"end": 16420,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16292,
											"end": 16299,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16358,
											"end": 16359,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16354,
											"end": 16355,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16350,
											"end": 16356,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 16346,
											"end": 16360,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 16343,
											"end": 16344,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16340,
											"end": 16361,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 16335,
											"end": 16336,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16328,
											"end": 16337,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16321,
											"end": 16338,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16317,
											"end": 16362,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16314,
											"end": 16316,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16314,
											"end": 16316,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "730"
										},
										{
											"begin": 16314,
											"end": 16316,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16365,
											"end": 16383,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "730"
										},
										{
											"begin": 16365,
											"end": 16383,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "725"
										},
										{
											"begin": 16365,
											"end": 16383,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 16365,
											"end": 16383,
											"name": "tag",
											"source": 13,
											"value": "730"
										},
										{
											"begin": 16365,
											"end": 16383,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16405,
											"end": 16414,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 16405,
											"end": 16414,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16304,
											"end": 16420,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16425,
											"end": 16550,
											"name": "tag",
											"source": 13,
											"value": "233"
										},
										{
											"begin": 16425,
											"end": 16550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16465,
											"end": 16469,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16493,
											"end": 16494,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16490,
											"end": 16491,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16487,
											"end": 16495,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 16484,
											"end": 16486,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16484,
											"end": 16486,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "733"
										},
										{
											"begin": 16484,
											"end": 16486,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16498,
											"end": 16516,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "733"
										},
										{
											"begin": 16498,
											"end": 16516,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "725"
										},
										{
											"begin": 16498,
											"end": 16516,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 16498,
											"end": 16516,
											"name": "tag",
											"source": 13,
											"value": "733"
										},
										{
											"begin": 16498,
											"end": 16516,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16535,
											"end": 16544,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 16535,
											"end": 16544,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16474,
											"end": 16550,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16555,
											"end": 16813,
											"name": "tag",
											"source": 13,
											"value": "687"
										},
										{
											"begin": 16555,
											"end": 16813,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16627,
											"end": 16628,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "tag",
											"source": 13,
											"value": "735"
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16651,
											"end": 16657,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16648,
											"end": 16649,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16645,
											"end": 16658,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "737"
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 16727,
											"end": 16738,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16727,
											"end": 16738,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16727,
											"end": 16738,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16721,
											"end": 16739,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 16708,
											"end": 16719,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16708,
											"end": 16719,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16708,
											"end": 16719,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16701,
											"end": 16740,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16673,
											"end": 16675,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 16666,
											"end": 16676,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "735"
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "tag",
											"source": 13,
											"value": "737"
										},
										{
											"begin": 16637,
											"end": 16750,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16768,
											"end": 16774,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 16765,
											"end": 16766,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16762,
											"end": 16775,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 16759,
											"end": 16761,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 16759,
											"end": 16761,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "355"
										},
										{
											"begin": 16759,
											"end": 16761,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16803,
											"end": 16804,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 16785,
											"end": 16801,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16785,
											"end": 16801,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16778,
											"end": 16805,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16608,
											"end": 16813,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 16818,
											"end": 17198,
											"name": "tag",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 16818,
											"end": 17198,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 16897,
											"end": 16898,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 16893,
											"end": 16905,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16893,
											"end": 16905,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 16893,
											"end": 16905,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 16893,
											"end": 16905,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16940,
											"end": 16952,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 16940,
											"end": 16952,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16940,
											"end": 16952,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 16961,
											"end": 16963,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "740"
										},
										{
											"begin": 16961,
											"end": 16963,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 17015,
											"end": 17019,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 17007,
											"end": 17013,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17003,
											"end": 17020,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16993,
											"end": 17020,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16993,
											"end": 17020,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16961,
											"end": 16963,
											"name": "tag",
											"source": 13,
											"value": "740"
										},
										{
											"begin": 16961,
											"end": 16963,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17068,
											"end": 17070,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 17060,
											"end": 17066,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 17057,
											"end": 17071,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 17037,
											"end": 17055,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17034,
											"end": 17072,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "741"
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 17114,
											"end": 17124,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 17109,
											"end": 17112,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 17105,
											"end": 17125,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 17102,
											"end": 17103,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17095,
											"end": 17126,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17149,
											"end": 17153,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 17146,
											"end": 17147,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 17139,
											"end": 17154,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17177,
											"end": 17181,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 17174,
											"end": 17175,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17167,
											"end": 17182,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "tag",
											"source": 13,
											"value": "741"
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17031,
											"end": 17033,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16873,
											"end": 17198,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 16873,
											"end": 17198,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 16873,
											"end": 17198,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 16873,
											"end": 17198,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 17203,
											"end": 17330,
											"name": "tag",
											"source": 13,
											"value": "725"
										},
										{
											"begin": 17203,
											"end": 17330,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17264,
											"end": 17274,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 17259,
											"end": 17262,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 17255,
											"end": 17275,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 17252,
											"end": 17253,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17245,
											"end": 17276,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17295,
											"end": 17299,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 17292,
											"end": 17293,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 17285,
											"end": 17300,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17319,
											"end": 17323,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 17316,
											"end": 17317,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17309,
											"end": 17324,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 17335,
											"end": 17462,
											"name": "tag",
											"source": 13,
											"value": "646"
										},
										{
											"begin": 17335,
											"end": 17462,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 17396,
											"end": 17406,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 17391,
											"end": 17394,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 17387,
											"end": 17407,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 17384,
											"end": 17385,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17377,
											"end": 17408,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17427,
											"end": 17431,
											"name": "PUSH",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 17424,
											"end": 17425,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 17417,
											"end": 17432,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 17451,
											"end": 17455,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 17448,
											"end": 17449,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17441,
											"end": 17456,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 17467,
											"end": 17598,
											"name": "tag",
											"source": 13,
											"value": "653"
										},
										{
											"begin": 17467,
											"end": 17598,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17542,
											"end": 17573,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17542,
											"end": 17573,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 17532,
											"end": 17574,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 17532,
											"end": 17574,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 17522,
											"end": 17524,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "410"
										},
										{
											"begin": 17522,
											"end": 17524,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 17588,
											"end": 17589,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 17585,
											"end": 17586,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 17578,
											"end": 17590,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approvalDelay()": "e2d1e75c",
							"approve(address,uint256)": "095ea7b3",
							"available()": "48a0d754",
							"balance()": "b69ef8a8",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"deposit(uint256)": "b6b55f25",
							"depositAll()": "de5f6268",
							"depositNative()": "db6b5246",
							"earn()": "d389800f",
							"getPricePerFullShare()": "77c7b8fc",
							"inCaseTokensGetStuck(address)": "def68a9c",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(address,string,string,uint256)": "4d12d4b6",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"proposeStrat(address)": "5b12ff9b",
							"renounceOwnership()": "715018a6",
							"stratCandidate()": "76dfabb8",
							"strategy()": "a8c62e76",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"upgradeStrat()": "e6685244",
							"want()": "1f1fcd51",
							"withdraw(uint256)": "2e1a7d4d",
							"withdrawAll()": "853828b6",
							"withdrawAllNative()": "482fe024",
							"withdrawNative(uint256)": "84276d81"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"NewStratCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"UpgradeStrat\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_approvalDelay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"proposeStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stratCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Implementation of a vault to deposit funds for yield optimizing. This is the contract that receives funds and that users interface with. The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"available()\":{\"details\":\"Custom logic in here for how much the vault allows to be borrowed. We return 100% of tokens for now. Under certain conditions we might want to keep some of the system funds at hand in the vault, instead of putting them to work.\"},\"balance()\":{\"details\":\"It calculates the total underlying value of {token} held by the system. It takes into account the vault contract balance, the strategy contract balance  and the balance deployed in other contracts as part of the strategy.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"The entrypoint of funds into the system. People deposit with this function into the vault. The vault is then in charge of sending funds into the strategy.\"},\"depositAll()\":{\"details\":\"A helper function to call deposit() with all the sender's funds.\"},\"depositNative()\":{\"details\":\"Alterwnative entry point into the strat. You can send wnative, and the vault will wrap them before sending them into the strat.\"},\"earn()\":{\"details\":\"Function to send funds into the strategy and put them to work. It's primarily called by the vault's deposit() function.\"},\"getPricePerFullShare()\":{\"details\":\"Function for various UIs to display the current value of one of our yield tokens. Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\"},\"inCaseTokensGetStuck(address)\":{\"details\":\"Rescues random funds stuck that the strat can't handle.\",\"params\":{\"_token\":\"address of the token to rescue.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,string,string,uint256)\":{\"details\":\"Sets the value of {token} to the token that the vault will hold as underlying value. It initializes the vault's own 'plxv' token This token is minted when someone does a deposit. It is burned in order to withdraw the corresponding portion of the underlying assets.\",\"params\":{\"_approvalDelay\":\"the delay before a new strat can be approved.\",\"_name\":\"the name of the vault token.\",\"_strategy\":\"the address of the strategy.\",\"_symbol\":\"the symbol of the vault token.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeStrat(address)\":{\"details\":\"Sets the candidate for the new strat to use with this vault.\",\"params\":{\"_implementation\":\"The address of the candidate strategy.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeStrat()\":{\"details\":\"It switches the active strat for the strat candidate. After upgrading, the candidate implementation is set to the 0x00 address, and proposedTime to a time happening in +100 years for safety.\"},\"withdraw(uint256)\":{\"details\":\"Function to exit the system. The vault will withdraw the required tokens from the strategy and pay up the token holder. A proportional number of IOU tokens are burned in the process.\"},\"withdrawAll()\":{\"details\":\"A helper function to call withdraw() with all the sender's funds.\"},\"withdrawAllNative()\":{\"details\":\"Alterwnative helper function to withdraw all funds in wnative form.\"},\"withdrawNative(uint256)\":{\"details\":\"Alterwnative function to exit the system. Works just like 'withdraw(uint256)', but the funds arrive in wnative.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/PlexusVaultNative.sol\":\"PlexusVaultNative\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e89863421b4014b96a4b62be76eb3b9f0a8afe9684664a6f389124c0964bfe5c\",\"dweb:/ipfs/Qmbk7xr1irpDuU1WdxXgxELBXxs61rHhCgod7heVcvFx16\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f103ee2e4aecd37aac6ceefe670709cdd7613dee25fa2d4d9feaf7fc0aaa155e\",\"dweb:/ipfs/QmRiNZLoJk5k3HPMYGPGjZFd2ke1ZxjhJZkM45Ec9GH9hv\"]},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d27f4b23c2dee42394aebaf42bf238285230f472dfd3282a39c3f000ec28214f\",\"dweb:/ipfs/QmQa3DnvccwdWJeWrjgXPnFMTWbzWQWR39hVqC7eEwo2PC\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ebdf0d3e42bd25223e45a213311d6d7e177d56a2c541a78b58c0c9d10bbdfbf9\",\"dweb:/ipfs/QmfMyehJ6pxHrh7yL4793J6i7dofXnS2zH3cTtC8JdQMV9\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fed09b97ccb0ff9ba9b6a94224f1d489026bf6b4b7279bfe64fb6e8749dee4d\",\"dweb:/ipfs/QmcRAzaSP1UnGr4vrGkfJmB2L9aiTYoXfV1Lg9gqrVRWn8\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d03ebe5406134f0c4a017dee625ff615031194493bd1e88504e5c8fae55bc166\",\"dweb:/ipfs/QmUZV5bMbgk2PAkV3coouSeSainHN2jhqaQDJaA7hQRyu2\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://310136ad60820af4177a11a61d77a3686faf5fca4942b600e08fc940db38396b\",\"dweb:/ipfs/QmbCzMNSTL7Zi7M4UCSqBrkHtp4jjxUnGbkneCZKdR1qeq\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b06267c5f80bad727af3e48b1382333d591dad51376399ef2f6b0ee6d58bf95\",\"dweb:/ipfs/QmdU5La1agcQvghnfMpWZGDPz2TUDTCxUwTLKmuMRXBpAx\"]},\"contracts/interfaces/common/IWrappedNative.sol\":{\"keccak256\":\"0x6051fc2e15a474c3acc157c3b9a0da2f14ac92adae51174b041a9debb75a37c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91575751f1de52095425abb4367feab6d9445f64e44ef91e765f5ad6f751e2b5\",\"dweb:/ipfs/QmUZ7Yg7BwK7TgnsoohCK6KLaDdVroQVPV4AsSfZ3h3ask\"]},\"contracts/interfaces/plexus/IStrategy.sol\":{\"keccak256\":\"0xae36742b32610464de23e86c25e743a53ff6ff430f0b026b4c0cefef1fb07338\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87904f610142127ba778cbedef9da4b02f5e26aa5c18c63847de5c066f3311d7\",\"dweb:/ipfs/QmRjrwfz9kF14d29dV2qLaJmHWtquHecKuQbB9wN2FgXgS\"]},\"contracts/vaults/PlexusVaultNative.sol\":{\"keccak256\":\"0xa8d6b2ec133fe8d4cf038cd1fc4e99181d75a57d4fe848da810c10a3e6dd22d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ee8e4870fbfecbb35bcec383a2ed927bf68dbe6e05a458b0fa8506afec104a24\",\"dweb:/ipfs/QmfPC3oUEuaxZM9XDa7a66gKNp4mN1jfHHWpKUeR8aJfhA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 139,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 142,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1894,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 406,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 412,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 414,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 416,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 418,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 998,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 11,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_owner",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 131,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "__gap",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 316,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "_status",
								"offset": 0,
								"slot": "151",
								"type": "t_uint256"
							},
							{
								"astId": 385,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "__gap",
								"offset": 0,
								"slot": "152",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1999,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "stratCandidate",
								"offset": 0,
								"slot": "201",
								"type": "t_struct(StratCandidate)1996_storage"
							},
							{
								"astId": 2002,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "strategy",
								"offset": 0,
								"slot": "203",
								"type": "t_contract(IStrategy)1972"
							},
							{
								"astId": 2004,
								"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
								"label": "approvalDelay",
								"offset": 0,
								"slot": "204",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IStrategy)1972": {
								"encoding": "inplace",
								"label": "contract IStrategy",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(StratCandidate)1996_storage": {
								"encoding": "inplace",
								"label": "struct PlexusVaultNative.StratCandidate",
								"members": [
									{
										"astId": 1993,
										"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
										"label": "implementation",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 1995,
										"contract": "contracts/vaults/PlexusVaultNative.sol:PlexusVaultNative",
										"label": "proposedTime",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:200:30:\n    |\n200 |     ) internal view returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 7874,
					"file": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"start": 7862
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:223:30:\n    |\n223 |     ) internal pure returns (bytes memory) {\n    |                              ^^^^^^^^^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 8689,
					"file": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"start": 8677
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1895
						],
						"Initializable": [
							301
						],
						"OwnableUpgradeable": [
							132
						]
					},
					"id": 133,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 133,
							"sourceUnit": 1896,
							"src": "127:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 133,
							"sourceUnit": 302,
							"src": "169:63:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "177:13:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 301,
										"src": "769:13:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "769:13:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1895,
										"src": "784:18:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "784:18:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "234:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 132,
							"linearizedBaseContracts": [
								132,
								1895,
								301
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "747:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "825:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 132,
									"src": "809:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 10,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "809:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 17,
									"name": "OwnershipTransferred",
									"nameLocation": "844:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "881:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "865:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "912:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "896:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "896:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:57:0"
									},
									"src": "838:84:0"
								},
								{
									"body": {
										"id": 26,
										"nodeType": "Block",
										"src": "1076:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 23,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "1086:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1086:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "1086:26:0"
											}
										]
									},
									"documentation": {
										"id": 18,
										"nodeType": "StructuredDocumentation",
										"src": "928:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 27,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 21,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 20,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "1059:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1059:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1033:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1047:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1076:0:0"
									},
									"scope": 132,
									"src": "1024:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "1187:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 33,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1872,
																"src": "1216:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1216:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 32,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "1197:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1197:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 36,
												"nodeType": "ExpressionStatement",
												"src": "1197:32:0"
											}
										]
									},
									"id": 38,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 30,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 29,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "1170:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1170:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1134:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1158:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1187:0:0"
									},
									"scope": 132,
									"src": "1125:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1345:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 41,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "1355:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1355:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1355:13:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1378:1:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "1242:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1333:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1342:2:0"
									},
									"src": "1324:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 54,
										"nodeType": "Block",
										"src": "1517:30:0",
										"statements": [
											{
												"expression": {
													"id": 52,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 11,
													"src": "1534:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 51,
												"id": 53,
												"nodeType": "Return",
												"src": "1527:13:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1392:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 55,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1471:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1476:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "1508:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 49,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1508:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1507:9:0"
									},
									"scope": 132,
									"src": "1462:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "1665:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 60,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 55,
																	"src": "1683:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1683:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 62,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1872,
																	"src": "1694:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 63,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1694:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1683:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 65,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1708:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 59,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1675:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1675:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 67,
												"nodeType": "ExpressionStatement",
												"src": "1675:68:0"
											}
										]
									},
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "1553:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1629:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1640:2:0"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1665:0:0"
									},
									"scope": 132,
									"src": "1620:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "2139:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 78,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2176:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2168:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 76,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 79,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2168:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 75,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "2149:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2149:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2149:30:0"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "1756:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 73,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 72,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2129:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2129:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2094:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2111:2:0"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2139:0:0"
									},
									"scope": 132,
									"src": "2085:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 105,
										"nodeType": "Block",
										"src": "2405:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 92,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 86,
																"src": "2423:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 95,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2443:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 94,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2435:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 93,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2435:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2435:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2423:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 98,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2447:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2415:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2415:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 100,
												"nodeType": "ExpressionStatement",
												"src": "2415:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 102,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2517:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 101,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "2498:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2498:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2498:28:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2192:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 106,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 89,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 88,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "2395:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2395:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2344:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2370:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "2362:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2362:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2361:18:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2405:0:0"
									},
									"scope": 132,
									"src": "2335:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2750:124:0",
										"statements": [
											{
												"assignments": [
													113
												],
												"declarations": [
													{
														"constant": false,
														"id": 113,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2768:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 125,
														"src": "2760:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 112,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2760:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 115,
												"initialValue": {
													"id": 114,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 11,
													"src": "2779:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2760:25:0"
											},
											{
												"expression": {
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 116,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "2795:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 117,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 109,
														"src": "2804:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2795:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "2795:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 121,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 113,
															"src": "2848:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 109,
															"src": "2858:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 120,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "2827:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2827:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "EmitStatement",
												"src": "2822:45:0"
											}
										]
									},
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2539:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2696:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2723:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2715:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:18:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2750:0:0"
									},
									"scope": 132,
									"src": "2687:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2880:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 131,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3159:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 132,
									"src": "3139:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 128,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3139:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 130,
										"length": {
											"hexValue": "3439",
											"id": 129,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3147:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3139:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 133,
							"src": "729:2438:0",
							"usedErrors": []
						}
					],
					"src": "102:3066:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1844
						],
						"Initializable": [
							301
						]
					},
					"id": 302,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 134,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 135,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 302,
							"sourceUnit": 1845,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 136,
								"nodeType": "StructuredDocumentation",
								"src": "184:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 301,
							"linearizedBaseContracts": [
								301
							],
							"name": "Initializable",
							"nameLocation": "2412:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "2432:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 139,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2560:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "2546:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 138,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2546:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "2579:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 142,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2688:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 301,
									"src": "2675:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 141,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2675:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "2708:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 147,
									"name": "Initialized",
									"nameLocation": "2809:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2827:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "2821:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 144,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2821:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2820:15:1"
									},
									"src": "2803:33:1"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "3269:483:1",
										"statements": [
											{
												"assignments": [
													151
												],
												"declarations": [
													{
														"constant": false,
														"id": 151,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 202,
														"src": "3279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 150,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 154,
												"initialValue": {
													"id": 153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3301:14:1",
													"subExpression": {
														"id": 152,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "3302:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3279:36:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 160,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 156,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 151,
																			"src": "3347:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 159,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 157,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 139,
																				"src": "3365:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 158,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3380:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3365:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3347:34:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 161,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3346:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 173,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 169,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3387:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 166,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3426:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$301",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$301",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 165,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3418:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 164,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3418:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 167,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3418:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 162,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1844,
																						"src": "3388:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1844_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 163,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1532,
																					"src": "3388:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 168,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3388:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 172,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 170,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 139,
																				"src": "3436:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 171,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3452:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3436:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3387:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 174,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3386:68:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3346:108:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 176,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3468:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 155,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3325:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3325:201:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 178,
												"nodeType": "ExpressionStatement",
												"src": "3325:201:1"
											},
											{
												"expression": {
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 179,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "3536:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 180,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3551:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3536:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "3536:16:1"
											},
											{
												"condition": {
													"id": 183,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 151,
													"src": "3566:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 189,
												"nodeType": "IfStatement",
												"src": "3562:65:1",
												"trueBody": {
													"id": 188,
													"nodeType": "Block",
													"src": "3582:45:1",
													"statements": [
														{
															"expression": {
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 184,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 142,
																	"src": "3596:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 185,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3612:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3596:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 187,
															"nodeType": "ExpressionStatement",
															"src": "3596:20:1"
														}
													]
												}
											},
											{
												"id": 190,
												"nodeType": "PlaceholderStatement",
												"src": "3636:1:1"
											},
											{
												"condition": {
													"id": 191,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 151,
													"src": "3651:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 201,
												"nodeType": "IfStatement",
												"src": "3647:99:1",
												"trueBody": {
													"id": 200,
													"nodeType": "Block",
													"src": "3667:79:1",
													"statements": [
														{
															"expression": {
																"id": 194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 192,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 142,
																	"src": "3681:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3697:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3681:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 195,
															"nodeType": "ExpressionStatement",
															"src": "3681:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3733:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 196,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 147,
																	"src": "3721:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3721:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 199,
															"nodeType": "EmitStatement",
															"src": "3716:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "2842:399:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 203,
									"name": "initializer",
									"nameLocation": "3255:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3266:2:1"
									},
									"src": "3246:506:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "4863:255:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4881:14:1",
																"subExpression": {
																	"id": 209,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 142,
																	"src": "4882:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 213,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 211,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 139,
																	"src": "4899:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 212,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 206,
																	"src": "4914:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4899:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4881:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4923:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 208,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4873:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4873:99:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 217,
												"nodeType": "ExpressionStatement",
												"src": "4873:99:1"
											},
											{
												"expression": {
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 218,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "4982:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 219,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "4997:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4982:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 221,
												"nodeType": "ExpressionStatement",
												"src": "4982:22:1"
											},
											{
												"expression": {
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 222,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "5014:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 223,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5030:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5014:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "5014:20:1"
											},
											{
												"id": 226,
												"nodeType": "PlaceholderStatement",
												"src": "5044:1:1"
											},
											{
												"expression": {
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 227,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 142,
														"src": "5055:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5071:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5055:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 230,
												"nodeType": "ExpressionStatement",
												"src": "5055:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 232,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 206,
															"src": "5103:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 231,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "5091:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5091:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 234,
												"nodeType": "EmitStatement",
												"src": "5086:25:1"
											}
										]
									},
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "3758:1062:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 236,
									"name": "reinitializer",
									"nameLocation": "4834:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4854:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "4848:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 205,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4848:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:15:1"
									},
									"src": "4825:293:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 245,
										"nodeType": "Block",
										"src": "5356:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 240,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "5374:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 241,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5389:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 239,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5366:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 243,
												"nodeType": "ExpressionStatement",
												"src": "5366:69:1"
											},
											{
												"id": 244,
												"nodeType": "PlaceholderStatement",
												"src": "5445:1:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "5124:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 246,
									"name": "onlyInitializing",
									"nameLocation": "5337:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5353:2:1"
									},
									"src": "5328:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "5988:231:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "6006:14:1",
															"subExpression": {
																"id": 251,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 142,
																"src": "6007:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6022:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5998:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5998:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 255,
												"nodeType": "ExpressionStatement",
												"src": "5998:66:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 256,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "6078:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6099:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 258,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6099:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 257,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6094:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 260,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6094:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 261,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6094:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6078:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 280,
												"nodeType": "IfStatement",
												"src": "6074:139:1",
												"trueBody": {
													"id": 279,
													"nodeType": "Block",
													"src": "6111:102:1",
													"statements": [
														{
															"expression": {
																"id": 269,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 263,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 139,
																	"src": "6125:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 266,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6145:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 265,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6145:5:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 264,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6140:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 267,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6140:11:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6140:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6125:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 270,
															"nodeType": "ExpressionStatement",
															"src": "6125:30:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 274,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6191:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 273,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6191:5:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 272,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6186:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 275,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6186:11:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6186:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 271,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 147,
																	"src": "6174:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6174:28:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 278,
															"nodeType": "EmitStatement",
															"src": "6169:33:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "5459:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5948:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5968:2:1"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5988:0:1"
									},
									"scope": 301,
									"src": "5939:280:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 290,
										"nodeType": "Block",
										"src": "6393:36:1",
										"statements": [
											{
												"expression": {
													"id": 288,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 139,
													"src": "6410:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 287,
												"id": 289,
												"nodeType": "Return",
												"src": "6403:19:1"
											}
										]
									},
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "6225:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6338:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6360:2:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "6386:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 285,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6386:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6385:7:1"
									},
									"scope": 301,
									"src": "6329:100:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 299,
										"nodeType": "Block",
										"src": "6601:37:1",
										"statements": [
											{
												"expression": {
													"id": 297,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "6618:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 296,
												"id": 298,
												"nodeType": "Return",
												"src": "6611:20:1"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "6435:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 300,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6554:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6569:2:1"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "6595:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 294,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6595:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6594:6:1"
									},
									"scope": 301,
									"src": "6545:93:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 302,
							"src": "2394:4246:1",
							"usedErrors": []
						}
					],
					"src": "113:6528:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
					"exportedSymbols": {
						"Initializable": [
							301
						],
						"ReentrancyGuardUpgradeable": [
							386
						]
					},
					"id": 387,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 303,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 305,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 387,
							"sourceUnit": 302,
							"src": "136:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 304,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "144:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 307,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 301,
										"src": "1000:13:2"
									},
									"id": 308,
									"nodeType": "InheritanceSpecifier",
									"src": "1000:13:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 306,
								"nodeType": "StructuredDocumentation",
								"src": "201:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 386,
							"linearizedBaseContracts": [
								386,
								301
							],
							"name": "ReentrancyGuardUpgradeable",
							"nameLocation": "970:26:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 311,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1793:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 386,
									"src": "1768:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 309,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1768:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 310,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1808:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 314,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1840:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 386,
									"src": "1815:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 312,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1815:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 313,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1851:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 316,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1875:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 386,
									"src": "1859:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 315,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1859:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "1949:51:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 321,
														"name": "__ReentrancyGuard_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "1959:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1959:34:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "1959:34:2"
											}
										]
									},
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 319,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 318,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "1932:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1932:16:2"
										}
									],
									"name": "__ReentrancyGuard_init",
									"nameLocation": "1898:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1920:2:2"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1949:0:2"
									},
									"scope": 386,
									"src": "1889:111:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 334,
										"nodeType": "Block",
										"src": "2076:39:2",
										"statements": [
											{
												"expression": {
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 330,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "2086:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 331,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "2096:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2086:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 333,
												"nodeType": "ExpressionStatement",
												"src": "2086:22:2"
											}
										]
									},
									"id": 335,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 328,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 327,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "2059:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2059:16:2"
										}
									],
									"name": "__ReentrancyGuard_init_unchained",
									"nameLocation": "2015:32:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2047:2:2"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2076:0:2"
									},
									"scope": 386,
									"src": "2006:109:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "2516:79:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 338,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 361,
														"src": "2526:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2526:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 340,
												"nodeType": "ExpressionStatement",
												"src": "2526:21:2"
											},
											{
												"id": 341,
												"nodeType": "PlaceholderStatement",
												"src": "2557:1:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 342,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "2568:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2568:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "2568:20:2"
											}
										]
									},
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "2121:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 346,
									"name": "nonReentrant",
									"nameLocation": "2501:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2513:2:2"
									},
									"src": "2492:103:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "2640:248:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 350,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "2733:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 351,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "2744:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2733:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 353,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2754:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 349,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2725:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2725:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "2725:63:2"
											},
											{
												"expression": {
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 356,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "2863:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 357,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "2873:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2863:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "2863:18:2"
											}
										]
									},
									"id": 361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2610:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2629:2:2"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:0:2"
									},
									"scope": 386,
									"src": "2601:287:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "2932:171:2",
										"statements": [
											{
												"expression": {
													"id": 366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 364,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "3074:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 365,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "3084:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3074:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 367,
												"nodeType": "ExpressionStatement",
												"src": "3074:22:2"
											}
										]
									},
									"id": 369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2903:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2921:2:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2932:0:2"
									},
									"scope": 386,
									"src": "2894:209:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 379,
										"nodeType": "Block",
										"src": "3346:43:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 375,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "3363:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 376,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "3374:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3363:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 374,
												"id": 378,
												"nodeType": "Return",
												"src": "3356:26:2"
											}
										]
									},
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "3109:168:2",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 380,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3291:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3314:2:2"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "3340:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 372,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3340:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:6:2"
									},
									"scope": 386,
									"src": "3282:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "3395:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 385,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3674:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 386,
									"src": "3654:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 382,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3654:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 384,
										"length": {
											"hexValue": "3439",
											"id": 383,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3662:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3654:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 387,
							"src": "952:2730:2",
							"usedErrors": []
						}
					],
					"src": "112:3571:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1895
						],
						"ERC20Upgradeable": [
							999
						],
						"IERC20MetadataUpgradeable": [
							1102
						],
						"IERC20Upgradeable": [
							1077
						],
						"Initializable": [
							301
						]
					},
					"id": 1000,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 388,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 389,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1000,
							"sourceUnit": 1078,
							"src": "130:33:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 390,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1000,
							"sourceUnit": 1103,
							"src": "164:52:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 391,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1000,
							"sourceUnit": 1896,
							"src": "217:44:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 393,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1000,
							"sourceUnit": 302,
							"src": "262:66:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 392,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "270:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 395,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 301,
										"src": "1661:13:3"
									},
									"id": 396,
									"nodeType": "InheritanceSpecifier",
									"src": "1661:13:3"
								},
								{
									"baseName": {
										"id": 397,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1895,
										"src": "1676:18:3"
									},
									"id": 398,
									"nodeType": "InheritanceSpecifier",
									"src": "1676:18:3"
								},
								{
									"baseName": {
										"id": 399,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1077,
										"src": "1696:17:3"
									},
									"id": 400,
									"nodeType": "InheritanceSpecifier",
									"src": "1696:17:3"
								},
								{
									"baseName": {
										"id": 401,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1102,
										"src": "1715:25:3"
									},
									"id": 402,
									"nodeType": "InheritanceSpecifier",
									"src": "1715:25:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 394,
								"nodeType": "StructuredDocumentation",
								"src": "330:1301:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 999,
							"linearizedBaseContracts": [
								999,
								1102,
								1077,
								1895,
								301
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1641:16:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 406,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1783:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "1747:45:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 405,
										"keyType": {
											"id": 403,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1755:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1747:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 404,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1766:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 412,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1855:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "1799:67:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 411,
										"keyType": {
											"id": 407,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1807:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1799:47:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 410,
											"keyType": {
												"id": 408,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1826:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1818:27:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 409,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1837:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 414,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1889:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "1873:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 413,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1873:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 416,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1923:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "1908:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 415,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1908:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 418,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1949:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "1934:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 417,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1934:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "2231:55:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 429,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "2264:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 430,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "2271:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 428,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 452,
														"src": "2241:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2241:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "2241:38:3"
											}
										]
									},
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "1963:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 426,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 425,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "2214:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "2214:16:3"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2148:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2175:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2161:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 420,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2161:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2196:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "2182:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 422,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2182:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2160:44:3"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2231:0:3"
									},
									"scope": 999,
									"src": "2139:147:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "2394:57:3",
										"statements": [
											{
												"expression": {
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 443,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "2404:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 444,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 436,
														"src": "2412:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2404:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "2404:13:3"
											},
											{
												"expression": {
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 447,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "2427:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 448,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 438,
														"src": "2437:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2427:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "2427:17:3"
											}
										]
									},
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 441,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 440,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "2377:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "2377:16:3"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2301:22:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2338:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "2324:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 435,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2324:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2359:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "2345:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 437,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2345:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:44:3"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2394:0:3"
									},
									"scope": 999,
									"src": "2292:159:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1089
									],
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "2585:29:3",
										"statements": [
											{
												"expression": {
													"id": 459,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 416,
													"src": "2602:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 458,
												"id": 460,
												"nodeType": "Return",
												"src": "2595:12:3"
											}
										]
									},
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "2457:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2525:4:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 455,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2552:8:3"
									},
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2529:2:3"
									},
									"returnParameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "2570:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 456,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2570:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:15:3"
									},
									"scope": 999,
									"src": "2516:98:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1095
									],
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "2798:31:3",
										"statements": [
											{
												"expression": {
													"id": 469,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 418,
													"src": "2815:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 468,
												"id": 470,
												"nodeType": "Return",
												"src": "2808:14:3"
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "2620:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2736:6:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 465,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2765:8:3"
									},
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2742:2:3"
									},
									"returnParameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "2783:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 466,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2783:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2782:15:3"
									},
									"scope": 999,
									"src": "2727:102:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1101
									],
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "3527:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3544:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 478,
												"id": 480,
												"nodeType": "Return",
												"src": "3537:9:3"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "2835:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3471:8:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 475,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3502:8:3"
									},
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3479:2:3"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "3520:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 476,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3520:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3519:7:3"
									},
									"scope": 999,
									"src": "3462:91:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1026
									],
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "3683:36:3",
										"statements": [
											{
												"expression": {
													"id": 489,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 414,
													"src": "3700:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 488,
												"id": 490,
												"nodeType": "Return",
												"src": "3693:19:3"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "3559:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3622:11:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 485,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3656:8:3"
									},
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3633:2:3"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "3674:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3674:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3673:9:3"
									},
									"scope": 999,
									"src": "3613:106:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1034
									],
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3860:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 501,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "3877:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 503,
													"indexExpression": {
														"id": 502,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 495,
														"src": "3887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3877:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 500,
												"id": 504,
												"nodeType": "Return",
												"src": "3870:25:3"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "3725:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3786:9:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 497,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3833:8:3"
									},
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3804:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3796:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3796:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3795:17:3"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3851:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3851:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:9:3"
									},
									"scope": 999,
									"src": "3777:125:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1044
									],
									"body": {
										"id": 530,
										"nodeType": "Block",
										"src": "4183:104:3",
										"statements": [
											{
												"assignments": [
													518
												],
												"declarations": [
													{
														"constant": false,
														"id": 518,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4201:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 530,
														"src": "4193:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 517,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4193:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 521,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 519,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "4209:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4209:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4193:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4241:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 509,
															"src": "4248:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "4252:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "4231:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4231:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "4231:28:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4276:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 516,
												"id": 529,
												"nodeType": "Return",
												"src": "4269:11:3"
											}
										]
									},
									"documentation": {
										"id": 507,
										"nodeType": "StructuredDocumentation",
										"src": "3908:185:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4107:8:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 513,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4159:8:3"
									},
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4124:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4116:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 508,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4116:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4136:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4128:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4128:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4115:28:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "4177:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 514,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4177:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4176:6:3"
									},
									"scope": 999,
									"src": "4098:189:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1054
									],
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "4443:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 542,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "4460:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 544,
														"indexExpression": {
															"id": 543,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "4472:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4460:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 546,
													"indexExpression": {
														"id": 545,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "4479:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4460:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 541,
												"id": 547,
												"nodeType": "Return",
												"src": "4453:34:3"
											}
										]
									},
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "4293:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4354:9:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 538,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4416:8:3"
									},
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4372:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "4364:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4364:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4387:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "4379:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4379:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4363:32:3"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "4434:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4434:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:9:3"
									},
									"scope": 999,
									"src": "4345:149:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1064
									],
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "4891:108:3",
										"statements": [
											{
												"assignments": [
													561
												],
												"declarations": [
													{
														"constant": false,
														"id": 561,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4909:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "4901:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 560,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4901:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 564,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 562,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "4917:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4917:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4901:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 566,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "4948:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 567,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 552,
															"src": "4955:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 568,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "4964:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 565,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "4939:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4939:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 570,
												"nodeType": "ExpressionStatement",
												"src": "4939:32:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 571,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4988:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 559,
												"id": 572,
												"nodeType": "Return",
												"src": "4981:11:3"
											}
										]
									},
									"documentation": {
										"id": 550,
										"nodeType": "StructuredDocumentation",
										"src": "4500:297:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4811:7:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 556,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4867:8:3"
									},
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4827:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "4819:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4819:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4844:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "4836:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4818:33:3"
									},
									"returnParameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "4885:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 557,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4885:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4884:6:3"
									},
									"scope": 999,
									"src": "4802:197:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1076
									],
									"body": {
										"id": 606,
										"nodeType": "Block",
										"src": "5664:153:3",
										"statements": [
											{
												"assignments": [
													588
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5682:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 606,
														"src": "5674:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 587,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5674:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 591,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 589,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "5692:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5692:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5674:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 593,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "5730:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 594,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5736:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 595,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 581,
															"src": "5745:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 592,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "5714:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5714:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 597,
												"nodeType": "ExpressionStatement",
												"src": "5714:38:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "5772:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 600,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "5778:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 581,
															"src": "5782:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 598,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "5762:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5762:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "5762:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 604,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5806:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 586,
												"id": 605,
												"nodeType": "Return",
												"src": "5799:11:3"
											}
										]
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "5005:551:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5570:12:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 583,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5640:8:3"
									},
									"parameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5591:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5583:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5583:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5605:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5597:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5597:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5617:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5609:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 580,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5609:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5582:42:3"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "5658:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 584,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5658:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5657:6:3"
									},
									"scope": 999,
									"src": "5561:256:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 635,
										"nodeType": "Block",
										"src": "6306:140:3",
										"statements": [
											{
												"assignments": [
													618
												],
												"declarations": [
													{
														"constant": false,
														"id": 618,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6324:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 635,
														"src": "6316:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 617,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6316:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 621,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 619,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "6332:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6332:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6316:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 623,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "6363:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 624,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "6370:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 630,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 626,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 618,
																		"src": "6389:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 627,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 610,
																		"src": "6396:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 625,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 549,
																	"src": "6379:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6379:25:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 629,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 612,
																"src": "6407:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6379:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 622,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "6354:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6354:64:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 632,
												"nodeType": "ExpressionStatement",
												"src": "6354:64:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6435:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 616,
												"id": 634,
												"nodeType": "Return",
												"src": "6428:11:3"
											}
										]
									},
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "5823:384:3",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6221:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6247:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "6239:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6239:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6264:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "6256:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6256:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6238:37:3"
									},
									"returnParameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "6300:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 614,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6300:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6299:6:3"
									},
									"scope": 999,
									"src": "6212:234:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 676,
										"nodeType": "Block",
										"src": "7032:328:3",
										"statements": [
											{
												"assignments": [
													647
												],
												"declarations": [
													{
														"constant": false,
														"id": 647,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7050:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 676,
														"src": "7042:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 646,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7042:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 650,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 648,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "7058:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7058:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7042:28:3"
											},
											{
												"assignments": [
													652
												],
												"declarations": [
													{
														"constant": false,
														"id": 652,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7088:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 676,
														"src": "7080:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 651,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7080:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 657,
												"initialValue": {
													"arguments": [
														{
															"id": 654,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "7117:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 655,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "7124:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 653,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "7107:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7107:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7080:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 659,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 652,
																"src": "7150:16:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 660,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 641,
																"src": "7170:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7150:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7187:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 658,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7142:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7142:85:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 664,
												"nodeType": "ExpressionStatement",
												"src": "7142:85:3"
											},
											{
												"id": 673,
												"nodeType": "UncheckedBlock",
												"src": "7237:95:3",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 666,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 647,
																	"src": "7270:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 667,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 639,
																	"src": "7277:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 668,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 652,
																		"src": "7286:16:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 669,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 641,
																		"src": "7305:15:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7286:34:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 665,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 928,
																"src": "7261:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 671,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7261:60:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 672,
														"nodeType": "ExpressionStatement",
														"src": "7261:60:3"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7349:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 645,
												"id": 675,
												"nodeType": "Return",
												"src": "7342:11:3"
											}
										]
									},
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "6452:476:3",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 677,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6942:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6968:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "6960:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6960:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6985:15:3",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "6977:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6977:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6959:42:3"
									},
									"returnParameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 677,
												"src": "7026:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 643,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7026:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7025:6:3"
									},
									"scope": 999,
									"src": "6933:427:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 753,
										"nodeType": "Block",
										"src": "7892:710:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 693,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 688,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 680,
																"src": "7910:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 691,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7926:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7918:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 689,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7918:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7918:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7910:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7930:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 687,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7902:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7902:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 696,
												"nodeType": "ExpressionStatement",
												"src": "7902:68:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 698,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 682,
																"src": "7988:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 701,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8002:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 700,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7994:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 699,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7994:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7994:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7988:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8006:37:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 697,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7980:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7980:64:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 706,
												"nodeType": "ExpressionStatement",
												"src": "7980:64:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "8076:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "8082:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 710,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "8086:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 707,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "8055:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8055:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 712,
												"nodeType": "ExpressionStatement",
												"src": "8055:38:3"
											},
											{
												"assignments": [
													714
												],
												"declarations": [
													{
														"constant": false,
														"id": 714,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8112:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 753,
														"src": "8104:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 713,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8104:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 718,
												"initialValue": {
													"baseExpression": {
														"id": 715,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "8126:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 717,
													"indexExpression": {
														"id": 716,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 680,
														"src": "8136:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8126:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8104:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 722,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 720,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "8159:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 721,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 684,
																"src": "8174:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8159:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8182:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 719,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8151:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8151:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 725,
												"nodeType": "ExpressionStatement",
												"src": "8151:72:3"
											},
											{
												"id": 740,
												"nodeType": "UncheckedBlock",
												"src": "8233:273:3",
												"statements": [
													{
														"expression": {
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 726,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "8257:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 728,
																"indexExpression": {
																	"id": 727,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 680,
																	"src": "8267:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8257:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 729,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 714,
																	"src": "8275:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 730,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 684,
																	"src": "8289:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8275:20:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8257:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 733,
														"nodeType": "ExpressionStatement",
														"src": "8257:38:3"
													},
													{
														"expression": {
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 734,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "8472:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 736,
																"indexExpression": {
																	"id": 735,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 682,
																	"src": "8482:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8472:13:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 737,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 684,
																"src": "8489:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8472:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 739,
														"nodeType": "ExpressionStatement",
														"src": "8472:23:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 742,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "8530:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 743,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "8536:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 744,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "8540:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 741,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1011,
														"src": "8521:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8521:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 746,
												"nodeType": "EmitStatement",
												"src": "8516:31:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 748,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 680,
															"src": "8578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 749,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "8584:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 750,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "8588:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 747,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "8558:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8558:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 752,
												"nodeType": "ExpressionStatement",
												"src": "8558:37:3"
											}
										]
									},
									"documentation": {
										"id": 678,
										"nodeType": "StructuredDocumentation",
										"src": "7366:443:3",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7823:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7841:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "7833:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7833:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7855:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "7847:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7847:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7867:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "7859:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7859:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7832:42:3"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7892:0:3"
									},
									"scope": 999,
									"src": "7814:788:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 810,
										"nodeType": "Block",
										"src": "8943:470:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 763,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 757,
																"src": "8961:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 766,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8980:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 765,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8972:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 764,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8972:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 767,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8972:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8961:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8984:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 762,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8953:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8953:65:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 771,
												"nodeType": "ExpressionStatement",
												"src": "8953:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 775,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9058:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9050:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 773,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9050:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9050:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 777,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "9062:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 778,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "9071:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 772,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "9029:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9029:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 780,
												"nodeType": "ExpressionStatement",
												"src": "9029:49:3"
											},
											{
												"expression": {
													"id": 783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 781,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "9089:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 782,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "9105:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9089:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 784,
												"nodeType": "ExpressionStatement",
												"src": "9089:22:3"
											},
											{
												"id": 791,
												"nodeType": "UncheckedBlock",
												"src": "9121:175:3",
												"statements": [
													{
														"expression": {
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 785,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "9257:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 787,
																"indexExpression": {
																	"id": 786,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "9267:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9257:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 788,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 759,
																"src": "9279:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9257:28:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 790,
														"nodeType": "ExpressionStatement",
														"src": "9257:28:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9327:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9319:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 793,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9319:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9319:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 797,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "9331:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 798,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "9340:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 792,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1011,
														"src": "9310:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9310:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 800,
												"nodeType": "EmitStatement",
												"src": "9305:42:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 804,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9386:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 803,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9378:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 802,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9378:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9378:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 806,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 757,
															"src": "9390:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 807,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "9399:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 801,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "9358:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9358:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "9358:48:3"
											}
										]
									},
									"documentation": {
										"id": 755,
										"nodeType": "StructuredDocumentation",
										"src": "8608:265:3",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 811,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8887:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8901:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "8893:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8893:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8918:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "8910:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8910:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8892:33:3"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8943:0:3"
									},
									"scope": 999,
									"src": "8878:535:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 882,
										"nodeType": "Block",
										"src": "9798:594:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 820,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "9816:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 823,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9835:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 822,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9827:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 821,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9827:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9827:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9816:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9839:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 819,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9808:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 828,
												"nodeType": "ExpressionStatement",
												"src": "9808:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 830,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "9907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9924:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9916:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 831,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9916:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9916:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 835,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "9928:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 829,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 982,
														"src": "9886:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9886:49:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 837,
												"nodeType": "ExpressionStatement",
												"src": "9886:49:3"
											},
											{
												"assignments": [
													839
												],
												"declarations": [
													{
														"constant": false,
														"id": 839,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9954:14:3",
														"nodeType": "VariableDeclaration",
														"scope": 882,
														"src": "9946:22:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 838,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9946:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 843,
												"initialValue": {
													"baseExpression": {
														"id": 840,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "9971:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 842,
													"indexExpression": {
														"id": 841,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 814,
														"src": "9981:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9971:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9946:43:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 847,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 845,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 839,
																"src": "10007:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 846,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "10025:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10007:24:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10033:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 844,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9999:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9999:71:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "9999:71:3"
											},
											{
												"id": 863,
												"nodeType": "UncheckedBlock",
												"src": "10080:194:3",
												"statements": [
													{
														"expression": {
															"id": 857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 851,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "10104:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 853,
																"indexExpression": {
																	"id": 852,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 814,
																	"src": "10114:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10104:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 854,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 839,
																	"src": "10125:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 855,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 816,
																	"src": "10142:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10125:23:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10104:44:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 858,
														"nodeType": "ExpressionStatement",
														"src": "10104:44:3"
													},
													{
														"expression": {
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 859,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "10241:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 860,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "10257:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10241:22:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 862,
														"nodeType": "ExpressionStatement",
														"src": "10241:22:3"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 865,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "10298:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10315:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 867,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10307:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 866,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10307:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 869,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10307:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 870,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "10319:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 864,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1011,
														"src": "10289:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10289:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 872,
												"nodeType": "EmitStatement",
												"src": "10284:42:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 874,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "10357:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 877,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10374:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 876,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10366:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 875,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10366:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10366:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 879,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "10378:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 873,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 993,
														"src": "10337:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10337:48:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 881,
												"nodeType": "ExpressionStatement",
												"src": "10337:48:3"
											}
										]
									},
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "9419:309:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 883,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9742:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9756:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "9748:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9748:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9773:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 883,
												"src": "9765:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9765:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9747:33:3"
									},
									"returnParameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9798:0:3"
									},
									"scope": 999,
									"src": "9733:659:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 927,
										"nodeType": "Block",
										"src": "10898:257:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 899,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 894,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 886,
																"src": "10916:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10933:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 896,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10925:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 895,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10925:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10925:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10916:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10937:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 893,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10908:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10908:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 902,
												"nodeType": "ExpressionStatement",
												"src": "10908:68:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 909,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 904,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 888,
																"src": "10994:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 907,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11013:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11005:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 905,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11005:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 908,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11005:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10994:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11017:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 903,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10986:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10986:68:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 912,
												"nodeType": "ExpressionStatement",
												"src": "10986:68:3"
											},
											{
												"expression": {
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 913,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "11065:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 916,
															"indexExpression": {
																"id": 914,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 886,
																"src": "11077:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11065:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 917,
														"indexExpression": {
															"id": 915,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 888,
															"src": "11084:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11065:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 918,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 890,
														"src": "11095:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11065:36:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "11065:36:3"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 922,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 886,
															"src": "11125:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 923,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 888,
															"src": "11132:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 924,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 890,
															"src": "11141:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 921,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1020,
														"src": "11116:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11116:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 926,
												"nodeType": "EmitStatement",
												"src": "11111:37:3"
											}
										]
									},
									"documentation": {
										"id": 884,
										"nodeType": "StructuredDocumentation",
										"src": "10398:412:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 928,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10824:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10841:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "10833:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 885,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10833:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10856:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "10848:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10848:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10873:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "10865:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10865:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10832:48:3"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10898:0:3"
									},
									"scope": 999,
									"src": "10815:340:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 970,
										"nodeType": "Block",
										"src": "11526:321:3",
										"statements": [
											{
												"assignments": [
													939
												],
												"declarations": [
													{
														"constant": false,
														"id": 939,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11544:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "11536:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 938,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11536:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 944,
												"initialValue": {
													"arguments": [
														{
															"id": 941,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "11573:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 942,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 933,
															"src": "11580:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 940,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "11563:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11563:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11536:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 945,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "11602:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11627:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 947,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11627:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 946,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11622:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11622:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 950,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11622:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11602:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 969,
												"nodeType": "IfStatement",
												"src": "11598:243:3",
												"trueBody": {
													"id": 968,
													"nodeType": "Block",
													"src": "11641:200:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 955,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 953,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 939,
																			"src": "11663:16:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 954,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 935,
																			"src": "11683:6:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11663:26:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 956,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11691:31:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 952,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11655:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11655:68:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 958,
															"nodeType": "ExpressionStatement",
															"src": "11655:68:3"
														},
														{
															"id": 967,
															"nodeType": "UncheckedBlock",
															"src": "11737:94:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 960,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 931,
																				"src": "11774:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 961,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 933,
																				"src": "11781:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 964,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 962,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 939,
																					"src": "11790:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 963,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 935,
																					"src": "11809:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11790:25:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 959,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 928,
																			"src": "11765:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 965,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11765:51:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 966,
																	"nodeType": "ExpressionStatement",
																	"src": "11765:51:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "11161:270:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 971,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11445:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11469:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "11461:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11461:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11484:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "11476:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11476:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11501:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "11493:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11493:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11460:48:3"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11526:0:3"
									},
									"scope": 999,
									"src": "11436:411:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "12520:2:3",
										"statements": []
									},
									"documentation": {
										"id": 972,
										"nodeType": "StructuredDocumentation",
										"src": "11853:573:3",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12440:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12469:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "12461:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12461:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12483:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "12475:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12475:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12495:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "12487:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 977,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12460:42:3"
									},
									"returnParameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12520:0:3"
									},
									"scope": 999,
									"src": "12431:91:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 992,
										"nodeType": "Block",
										"src": "13198:2:3",
										"statements": []
									},
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "12528:577:3",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13119:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13147:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "13139:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13139:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13161:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "13153:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13153:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13173:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "13165:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13165:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13138:42:3"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13198:0:3"
									},
									"scope": 999,
									"src": "13110:90:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "13206:254:3",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 998,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13485:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 999,
									"src": "13465:25:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 995,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13465:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 997,
										"length": {
											"hexValue": "3435",
											"id": 996,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13473:2:3",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13465:11:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1000,
							"src": "1632:11861:3",
							"usedErrors": []
						}
					],
					"src": "105:13389:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							1077
						]
					},
					"id": 1078,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1001,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1002,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1077,
							"linearizedBaseContracts": [
								1077
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 1011,
									"name": "Transfer",
									"nameLocation": "405:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "414:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1004,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "436:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "456:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:4"
									},
									"src": "399:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 1020,
									"name": "Approval",
									"nameLocation": "636:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1014,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "645:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1013,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "668:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "693:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:4"
									},
									"src": "630:78:4"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:4",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:4"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "831:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1023,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:4"
									},
									"scope": 1077,
									"src": "785:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:4",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "942:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:4"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "982:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:4"
									},
									"scope": 1077,
									"src": "923:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:4",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1044,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "1222:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "1234:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:4"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "1268:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1041,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:4"
									},
									"scope": 1077,
									"src": "1204:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1045,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1054,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "1568:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "1583:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1048,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:4"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "1623:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:4"
									},
									"scope": 1077,
									"src": "1549:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1055,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:4",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1064,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "2302:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "2319:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:4"
									},
									"returnParameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1064,
												"src": "2353:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1061,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:4"
									},
									"scope": 1077,
									"src": "2285:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1065,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:4",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1076,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1066,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2701:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "2693:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2713:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "2705:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2705:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:42:4"
									},
									"returnParameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1076,
												"src": "2739:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1073,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2739:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2738:6:4"
									},
									"scope": 1077,
									"src": "2657:88:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1078,
							"src": "202:2545:4",
							"usedErrors": []
						}
					],
					"src": "106:2642:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							1102
						],
						"IERC20Upgradeable": [
							1077
						]
					},
					"id": 1103,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1079,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 1080,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 1078,
							"src": "135:34:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1082,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1077,
										"src": "327:17:5"
									},
									"id": 1083,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:5"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1081,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1102,
							"linearizedBaseContracts": [
								1102,
								1077
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1089,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:5"
									},
									"returnParameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "449:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1086,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:5"
									},
									"scope": 1102,
									"src": "410:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1090,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1095,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:5"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "572:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1092,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:5"
									},
									"scope": 1102,
									"src": "531:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1096,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:5"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "706:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1098,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:5"
									},
									"scope": 1102,
									"src": "663:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1103,
							"src": "288:427:5",
							"usedErrors": []
						}
					],
					"src": "110:606:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol",
					"exportedSymbols": {
						"IERC20PermitUpgradeable": [
							1138
						]
					},
					"id": 1139,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1104,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "123:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1105,
								"nodeType": "StructuredDocumentation",
								"src": "148:1963:6",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1138,
							"linearizedBaseContracts": [
								1138
							],
							"name": "IERC20PermitUpgradeable",
							"nameLocation": "2122:23:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1106,
										"nodeType": "StructuredDocumentation",
										"src": "2152:850:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1123,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3016:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3040:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3032:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3032:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3063:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3055:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3055:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3088:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3080:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3080:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3111:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3103:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3135:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3129:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1115,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3129:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3154:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3146:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1117,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3173:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3165:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1119,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3022:158:6"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3189:0:6"
									},
									"scope": 1138,
									"src": "3007:183:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1124,
										"nodeType": "StructuredDocumentation",
										"src": "3196:294:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3504:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3519:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1131,
												"src": "3511:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3510:15:6"
									},
									"returnParameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1131,
												"src": "3549:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3548:9:6"
									},
									"scope": 1138,
									"src": "3495:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1132,
										"nodeType": "StructuredDocumentation",
										"src": "3564:128:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1137,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3759:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3775:2:6"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "3801:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1134,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3801:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3800:9:6"
									},
									"scope": 1138,
									"src": "3750:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1139,
							"src": "2112:1700:6",
							"usedErrors": []
						}
					],
					"src": "123:3690:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1844
						],
						"IERC20PermitUpgradeable": [
							1138
						],
						"IERC20Upgradeable": [
							1077
						],
						"SafeERC20Upgradeable": [
							1514
						]
					},
					"id": 1515,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1140,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 1141,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1515,
							"sourceUnit": 1078,
							"src": "140:34:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol",
							"file": "../extensions/IERC20PermitUpgradeable.sol",
							"id": 1142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1515,
							"sourceUnit": 1139,
							"src": "175:51:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../../utils/AddressUpgradeable.sol",
							"id": 1143,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1515,
							"sourceUnit": 1845,
							"src": "227:47:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1144,
								"nodeType": "StructuredDocumentation",
								"src": "276:457:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1514,
							"linearizedBaseContracts": [
								1514
							],
							"name": "SafeERC20Upgradeable",
							"nameLocation": "742:20:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1147,
									"libraryName": {
										"id": 1145,
										"name": "AddressUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1844,
										"src": "775:18:7"
									},
									"nodeType": "UsingForDirective",
									"src": "769:37:7",
									"typeName": {
										"id": 1146,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "798:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 1170,
										"nodeType": "Block",
										"src": "1079:103:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1159,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1151,
															"src": "1109:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1162,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1151,
																			"src": "1139:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 1163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1044,
																		"src": "1139:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1139:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1165,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1153,
																	"src": "1164:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1166,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1155,
																	"src": "1168:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1160,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1116:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1116:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1116:58:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1158,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "1089:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1089:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1169,
												"nodeType": "ExpressionStatement",
												"src": "1089:86:7"
											}
										]
									},
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "812:179:7",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1005:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1036:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1018:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1150,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1149,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "1018:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "1018:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1051:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1043:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1063:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "1055:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:52:7"
									},
									"returnParameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1079:0:7"
									},
									"scope": 1514,
									"src": "996:186:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "1522:113:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1185,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "1552:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1188,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1175,
																			"src": "1582:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 1189,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1076,
																		"src": "1582:18:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1582:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1191,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1177,
																	"src": "1611:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1192,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1179,
																	"src": "1617:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1193,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1181,
																	"src": "1621:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1186,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1559:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1187,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1559:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1559:68:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1184,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "1532:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1532:96:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1196,
												"nodeType": "ExpressionStatement",
												"src": "1532:96:7"
											}
										]
									},
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "1188:228:7",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1430:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1465:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1447:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1173,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "1447:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "1447:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1480:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1472:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1494:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1486:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1486:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1506:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1498:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1446:66:7"
									},
									"returnParameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1522:0:7"
									},
									"scope": 1514,
									"src": "1421:214:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1241,
										"nodeType": "Block",
										"src": "1982:497:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1210,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1206,
																			"src": "2231:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2240:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2231:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1213,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2230:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1223,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1218,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2271:4:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						],
																						"id": 1217,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2263:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1216,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2263:7:7",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1219,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2263:13:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1220,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1204,
																					"src": "2278:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 1214,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1202,
																					"src": "2247:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 1215,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1054,
																				"src": "2247:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 1221,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2247:39:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2290:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2247:44:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1224,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2246:46:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2230:62:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2306:56:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 1209,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2209:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2209:163:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1228,
												"nodeType": "ExpressionStatement",
												"src": "2209:163:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1230,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "2402:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1233,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1202,
																			"src": "2432:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 1234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1064,
																		"src": "2432:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2432:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1236,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1204,
																	"src": "2456:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1237,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1206,
																	"src": "2465:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1231,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2409:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2409:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2409:62:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1229,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "2382:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 1239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2382:90:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1240,
												"nodeType": "ExpressionStatement",
												"src": "2382:90:7"
											}
										]
									},
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "1641:249:7",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 1242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1904:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1934:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "1916:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1201,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1200,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "1916:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "1916:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1949:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "1941:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1941:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1966:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "1958:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1958:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1915:57:7"
									},
									"returnParameters": {
										"id": 1208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1982:0:7"
									},
									"scope": 1514,
									"src": "1895:584:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1278,
										"nodeType": "Block",
										"src": "2767:194:7",
										"statements": [
											{
												"assignments": [
													1254
												],
												"declarations": [
													{
														"constant": false,
														"id": 1254,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2785:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1278,
														"src": "2777:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1253,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2777:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1263,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1259,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2824:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																		"typeString": "library SafeERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																		"typeString": "library SafeERC20Upgradeable"
																	}
																],
																"id": 1258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2816:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1257,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2816:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2816:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1261,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1248,
															"src": "2831:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1255,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "2800:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1256,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1054,
														"src": "2800:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2800:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2777:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1265,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "2869:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1268,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1246,
																			"src": "2899:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 1269,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1064,
																		"src": "2899:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 1270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2899:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1271,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1248,
																	"src": "2923:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1272,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1254,
																		"src": "2932:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1273,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1250,
																		"src": "2947:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2932:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1266,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2876:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2876:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2876:77:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1264,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "2849:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2849:105:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "ExpressionStatement",
												"src": "2849:105:7"
											}
										]
									},
									"documentation": {
										"id": 1243,
										"nodeType": "StructuredDocumentation",
										"src": "2485:180:7",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2679:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2719:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "2701:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1245,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1244,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "2701:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "2701:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2734:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "2726:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2751:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "2743:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:57:7"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2767:0:7"
									},
									"scope": 1514,
									"src": "2670:291:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1323,
										"nodeType": "Block",
										"src": "3249:321:7",
										"statements": [
											{
												"id": 1322,
												"nodeType": "UncheckedBlock",
												"src": "3259:305:7",
												"statements": [
													{
														"assignments": [
															1291
														],
														"declarations": [
															{
																"constant": false,
																"id": 1291,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3291:12:7",
																"nodeType": "VariableDeclaration",
																"scope": 1322,
																"src": "3283:20:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1290,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3283:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1300,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1296,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3330:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1514",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		],
																		"id": 1295,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3322:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1294,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3322:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3322:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1298,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1285,
																	"src": "3337:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1292,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "3306:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 1293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1054,
																"src": "3306:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3306:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3283:62:7"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1304,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1302,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1291,
																		"src": "3367:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 1303,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1287,
																		"src": "3383:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3367:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3390:43:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 1301,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3359:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3359:75:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1307,
														"nodeType": "ExpressionStatement",
														"src": "3359:75:7"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1309,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "3468:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 1312,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1283,
																					"src": "3498:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 1313,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1064,
																				"src": "3498:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3498:22:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 1315,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1285,
																			"src": "3522:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1316,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1291,
																				"src": "3531:12:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1317,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1287,
																				"src": "3546:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3531:20:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1310,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3475:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3475:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 1319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3475:77:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1308,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1465,
																"src": "3448:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																}
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3448:105:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1321,
														"nodeType": "ExpressionStatement",
														"src": "3448:105:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1280,
										"nodeType": "StructuredDocumentation",
										"src": "2967:180:7",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1324,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3161:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3201:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "3183:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1281,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "3183:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "3183:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3216:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "3208:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3233:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "3225:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3225:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3182:57:7"
									},
									"returnParameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3249:0:7"
									},
									"scope": 1514,
									"src": "3152:418:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1370,
										"nodeType": "Block",
										"src": "3977:333:7",
										"statements": [
											{
												"assignments": [
													1336
												],
												"declarations": [
													{
														"constant": false,
														"id": 1336,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4000:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1370,
														"src": "3987:25:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1335,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3987:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1345,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 1339,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1328,
																	"src": "4038:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1064,
																"src": "4038:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "4038:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 1342,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1330,
															"src": "4062:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1332,
															"src": "4071:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1337,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4015:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1338,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "4015:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4015:62:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3987:90:7"
											},
											{
												"condition": {
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4092:45:7",
													"subExpression": {
														"arguments": [
															{
																"id": 1347,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1328,
																"src": "4117:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															{
																"id": 1348,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1336,
																"src": "4124:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																	"typeString": "contract IERC20Upgradeable"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1346,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1513,
															"src": "4093:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20Upgradeable,bytes memory) returns (bool)"
															}
														},
														"id": 1349,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4093:44:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "4088:216:7",
												"trueBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "4139:165:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1352,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1328,
																		"src": "4173:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 1355,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1328,
																						"src": "4203:5:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																							"typeString": "contract IERC20Upgradeable"
																						}
																					},
																					"id": 1356,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1064,
																					"src": "4203:13:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 1357,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4203:22:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 1358,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1330,
																				"src": "4227:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 1359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4236:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 1353,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4180:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4180:22:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 1360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4180:58:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1351,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "4153:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																	}
																},
																"id": 1361,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4153:86:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1362,
															"nodeType": "ExpressionStatement",
															"src": "4153:86:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1364,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1328,
																		"src": "4273:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	},
																	{
																		"id": 1365,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1336,
																		"src": "4280:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1363,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1465,
																	"src": "4253:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																	}
																},
																"id": 1366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4253:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1367,
															"nodeType": "ExpressionStatement",
															"src": "4253:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "3576:308:7",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 1371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3898:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3929:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "3911:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1327,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1326,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "3911:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "3911:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3944:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "3936:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3936:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3961:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "3953:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3953:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3910:57:7"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3977:0:7"
									},
									"scope": 1514,
									"src": "3889:421:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1427,
										"nodeType": "Block",
										"src": "4688:257:7",
										"statements": [
											{
												"assignments": [
													1393
												],
												"declarations": [
													{
														"constant": false,
														"id": 1393,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4706:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1427,
														"src": "4698:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1392,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4698:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1398,
												"initialValue": {
													"arguments": [
														{
															"id": 1396,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "4733:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1394,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1375,
															"src": "4720:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitUpgradeable_$1138",
																"typeString": "contract IERC20PermitUpgradeable"
															}
														},
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1131,
														"src": "4720:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4720:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4698:41:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1402,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "4762:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1403,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "4769:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1404,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "4778:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1405,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1383,
															"src": "4785:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1406,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1385,
															"src": "4795:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1407,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1387,
															"src": "4798:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1408,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "4801:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1399,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1375,
															"src": "4749:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitUpgradeable_$1138",
																"typeString": "contract IERC20PermitUpgradeable"
															}
														},
														"id": 1401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1123,
														"src": "4749:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 1409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4749:54:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1410,
												"nodeType": "ExpressionStatement",
												"src": "4749:54:7"
											},
											{
												"assignments": [
													1412
												],
												"declarations": [
													{
														"constant": false,
														"id": 1412,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4821:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1427,
														"src": "4813:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1411,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4813:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1417,
												"initialValue": {
													"arguments": [
														{
															"id": 1415,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "4847:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1413,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1375,
															"src": "4834:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20PermitUpgradeable_$1138",
																"typeString": "contract IERC20PermitUpgradeable"
															}
														},
														"id": 1414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1131,
														"src": "4834:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4834:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4813:40:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1423,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1419,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1412,
																"src": "4871:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1422,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1420,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1393,
																	"src": "4885:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4899:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4885:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4871:29:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 1424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4902:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 1418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4863:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4863:75:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1426,
												"nodeType": "ExpressionStatement",
												"src": "4863:75:7"
											}
										]
									},
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "4316:141:7",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 1428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4471:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4515:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4491:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20PermitUpgradeable_$1138",
													"typeString": "contract IERC20PermitUpgradeable"
												},
												"typeName": {
													"id": 1374,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1373,
														"name": "IERC20PermitUpgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1138,
														"src": "4491:23:7"
													},
													"referencedDeclaration": 1138,
													"src": "4491:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20PermitUpgradeable_$1138",
														"typeString": "contract IERC20PermitUpgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1377,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4538:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4530:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4530:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4561:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4553:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4553:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4586:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4578:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4578:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4609:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4601:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4601:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4633:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4627:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1384,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4627:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4652:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4644:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1386,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4644:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4671:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "4663:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1388,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4663:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4481:197:7"
									},
									"returnParameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4688:0:7"
									},
									"scope": 1514,
									"src": "4462:483:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1464,
										"nodeType": "Block",
										"src": "5409:572:7",
										"statements": [
											{
												"assignments": [
													1438
												],
												"declarations": [
													{
														"constant": false,
														"id": 1438,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5771:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1464,
														"src": "5758:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1437,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5758:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1447,
												"initialValue": {
													"arguments": [
														{
															"id": 1444,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1434,
															"src": "5812:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1445,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5818:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1441,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1432,
																	"src": "5792:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																],
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5784:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1439,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5784:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5784:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1604,
														"src": "5784:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5784:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5758:95:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1452,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1449,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1438,
																		"src": "5871:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1450,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5871:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1451,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5892:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5871:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1455,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1438,
																		"src": "5908:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 1457,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5921:4:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 1456,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5921:4:7",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1458,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5920:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 1453,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5897:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5897:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5897:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5871:56:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5929:44:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 1448,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5863:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5863:111:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1463,
												"nodeType": "ExpressionStatement",
												"src": "5863:111:7"
											}
										]
									},
									"documentation": {
										"id": 1429,
										"nodeType": "StructuredDocumentation",
										"src": "4951:372:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5337:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5375:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5357:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1431,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1430,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "5357:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "5357:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5395:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "5382:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1433,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5382:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5356:44:7"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5409:0:7"
									},
									"scope": 1514,
									"src": "5328:653:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1512,
										"nodeType": "Block",
										"src": "6582:516:7",
										"statements": [
											{
												"assignments": [
													1477,
													1479
												],
												"declarations": [
													{
														"constant": false,
														"id": 1477,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6883:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1512,
														"src": "6878:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1476,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6878:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1479,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6905:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1512,
														"src": "6892:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1478,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6892:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1487,
												"initialValue": {
													"arguments": [
														{
															"id": 1485,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "6939:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1482,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1469,
																	"src": "6927:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																],
																"id": 1481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6919:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1480,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6919:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6919:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1484,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6919:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6919:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6877:67:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1488,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "6973:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1492,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1489,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1479,
																				"src": "6985:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1490,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "6985:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1491,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7006:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "6985:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1479,
																				"src": "7022:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "7035:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "7035:4:7",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "7034:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "7011:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "7011:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7011:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "6985:56:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 1501,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6984:58:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "6973:69:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1507,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1469,
																		"src": "7084:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	],
																	"id": 1506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7076:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1505,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7076:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7076:14:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1503,
																"name": "AddressUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1844,
																"src": "7046:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1844_$",
																	"typeString": "type(library AddressUpgradeable)"
																}
															},
															"id": 1504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1532,
															"src": "7046:29:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 1509,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7046:45:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6973:118:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1475,
												"id": 1511,
												"nodeType": "Return",
												"src": "6954:137:7"
											}
										]
									},
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "5987:490:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 1513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6491:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6533:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "6515:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1467,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "6515:17:7"
													},
													"referencedDeclaration": 1077,
													"src": "6515:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6553:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "6540:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6540:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6514:44:7"
									},
									"returnParameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "6576:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1473,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6576:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6575:6:7"
									},
									"scope": 1514,
									"src": "6482:616:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1515,
							"src": "734:6366:7",
							"usedErrors": []
						}
					],
					"src": "115:6986:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1844
						]
					},
					"id": 1845,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1516,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1517,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:8",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1844,
							"linearizedBaseContracts": [
								1844
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1531,
										"nodeType": "Block",
										"src": "1489:254:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1525,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1520,
																"src": "1713:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1713:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1713:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1528,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1713:23:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1524,
												"id": 1530,
												"nodeType": "Return",
												"src": "1706:30:8"
											}
										]
									},
									"documentation": {
										"id": 1518,
										"nodeType": "StructuredDocumentation",
										"src": "227:1191:8",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1532,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1432:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1451:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "1443:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:17:8"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "1483:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1522,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1483:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:6:8"
									},
									"scope": 1844,
									"src": "1423:320:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "2729:241:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1543,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2755:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1844",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1844",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2747:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1541,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2747:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2747:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1545,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2747:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1546,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1537,
																"src": "2772:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2747:31:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1548,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2780:31:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1540,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2739:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2739:73:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1550,
												"nodeType": "ExpressionStatement",
												"src": "2739:73:8"
											},
											{
												"assignments": [
													1552,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1552,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2829:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1565,
														"src": "2824:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1551,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2824:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1559,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2872:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1553,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1535,
																"src": "2842:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2842:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1556,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1555,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1537,
																"src": "2864:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2842:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2842:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2823:52:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1561,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1552,
															"src": "2893:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1562,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2902:60:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1560,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2885:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2885:78:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1564,
												"nodeType": "ExpressionStatement",
												"src": "2885:78:8"
											}
										]
									},
									"documentation": {
										"id": 1533,
										"nodeType": "StructuredDocumentation",
										"src": "1749:904:8",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2667:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2693:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "2677:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:15:8",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2712:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "2704:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2676:43:8"
									},
									"returnParameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2729:0:8"
									},
									"scope": 1844,
									"src": "2658:312:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1583,
										"nodeType": "Block",
										"src": "3801:96:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1577,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1569,
															"src": "3840:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1578,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1571,
															"src": "3848:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1579,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3854:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3857:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1576,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1624,
															1668
														],
														"referencedDeclaration": 1668,
														"src": "3818:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3818:72:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1575,
												"id": 1582,
												"nodeType": "Return",
												"src": "3811:79:8"
											}
										]
									},
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "2976:731:8",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3721:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3742:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "3734:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3734:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1571,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3763:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "3750:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1570,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3750:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3733:35:8"
									},
									"returnParameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1584,
												"src": "3787:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1573,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:14:8"
									},
									"scope": 1844,
									"src": "3712:185:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1603,
										"nodeType": "Block",
										"src": "4266:76:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1597,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1587,
															"src": "4305:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1598,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1589,
															"src": "4313:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4319:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1600,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "4322:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1596,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1624,
															1668
														],
														"referencedDeclaration": 1668,
														"src": "4283:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4283:52:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1595,
												"id": 1602,
												"nodeType": "Return",
												"src": "4276:59:8"
											}
										]
									},
									"documentation": {
										"id": 1585,
										"nodeType": "StructuredDocumentation",
										"src": "3903:211:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1604,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4128:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4158:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "4150:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4150:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4187:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "4174:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4215:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "4201:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1590,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4201:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4140:93:8"
									},
									"returnParameters": {
										"id": 1595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1604,
												"src": "4252:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1593,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4252:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4251:14:8"
									},
									"scope": 1844,
									"src": "4119:223:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1623,
										"nodeType": "Block",
										"src": "4817:111:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1617,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1607,
															"src": "4856:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1618,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1609,
															"src": "4864:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1619,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1611,
															"src": "4870:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4877:43:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1616,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1624,
															1668
														],
														"referencedDeclaration": 1668,
														"src": "4834:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4834:87:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1615,
												"id": 1622,
												"nodeType": "Return",
												"src": "4827:94:8"
											}
										]
									},
									"documentation": {
										"id": 1605,
										"nodeType": "StructuredDocumentation",
										"src": "4348:351:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4713:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4743:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1624,
												"src": "4735:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4735:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4764:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1624,
												"src": "4751:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1608,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4751:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4778:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1624,
												"src": "4770:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4770:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4734:50:8"
									},
									"returnParameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1624,
												"src": "4803:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1613,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4803:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:14:8"
									},
									"scope": 1844,
									"src": "4704:224:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1667,
										"nodeType": "Block",
										"src": "5355:267:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1641,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5381:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1844",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1844",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1640,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5373:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1639,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5373:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5373:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5373:21:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1644,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1631,
																"src": "5398:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5373:30:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5405:40:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1638,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5365:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5365:81:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1648,
												"nodeType": "ExpressionStatement",
												"src": "5365:81:8"
											},
											{
												"assignments": [
													1650,
													1652
												],
												"declarations": [
													{
														"constant": false,
														"id": 1650,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5462:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1667,
														"src": "5457:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1649,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5457:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1652,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5484:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1667,
														"src": "5471:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1651,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5471:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1659,
												"initialValue": {
													"arguments": [
														{
															"id": 1657,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1629,
															"src": "5524:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1653,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1627,
																"src": "5498:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1654,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5498:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1656,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1655,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1631,
																"src": "5517:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5498:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5498:31:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5456:73:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1661,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1627,
															"src": "5573:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1662,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1650,
															"src": "5581:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1663,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1652,
															"src": "5590:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1664,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1633,
															"src": "5602:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1660,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1799,
														"src": "5546:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5546:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1637,
												"id": 1666,
												"nodeType": "Return",
												"src": "5539:76:8"
											}
										]
									},
									"documentation": {
										"id": 1625,
										"nodeType": "StructuredDocumentation",
										"src": "4934:237:8",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5185:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1627,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5224:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "5216:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5216:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1629,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5253:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "5240:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1628,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5240:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5275:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "5267:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5267:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5304:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "5290:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1632,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5290:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5206:116:8"
									},
									"returnParameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "5341:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1635,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5341:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5340:14:8"
									},
									"scope": 1844,
									"src": "5176:446:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1684,
										"nodeType": "Block",
										"src": "5899:97:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1679,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1671,
															"src": "5935:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1680,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1673,
															"src": "5943:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1681,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5949:39:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1678,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1685,
															1714
														],
														"referencedDeclaration": 1714,
														"src": "5916:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5916:73:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1677,
												"id": 1683,
												"nodeType": "Return",
												"src": "5909:80:8"
											}
										]
									},
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "5628:166:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5808:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5835:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5827:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1670,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5856:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5843:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1672,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5843:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5826:35:8"
									},
									"returnParameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1685,
												"src": "5885:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1675,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5885:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5884:14:8"
									},
									"scope": 1844,
									"src": "5799:197:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1713,
										"nodeType": "Block",
										"src": "6338:168:8",
										"statements": [
											{
												"assignments": [
													1698,
													1700
												],
												"declarations": [
													{
														"constant": false,
														"id": 1698,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6354:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1713,
														"src": "6349:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1697,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6349:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1700,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6376:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1713,
														"src": "6363:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1699,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6363:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1705,
												"initialValue": {
													"arguments": [
														{
															"id": 1703,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1690,
															"src": "6408:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1701,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1688,
															"src": "6390:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1702,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6390:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6348:65:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1707,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1688,
															"src": "6457:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1708,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1698,
															"src": "6465:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1709,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "6474:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1710,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1692,
															"src": "6486:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1706,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1799,
														"src": "6430:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6430:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1696,
												"id": 1712,
												"nodeType": "Return",
												"src": "6423:76:8"
											}
										]
									},
									"documentation": {
										"id": 1686,
										"nodeType": "StructuredDocumentation",
										"src": "6002:173:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1714,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6189:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1688,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6225:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6217:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1687,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6217:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1690,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6254:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6241:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1689,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6241:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6282:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6268:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1691,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6268:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6207:93:8"
									},
									"returnParameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "6324:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1694,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6324:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6323:14:8"
									},
									"scope": 1844,
									"src": "6180:326:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "6782:101:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1725,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1717,
															"src": "6820:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1726,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1719,
															"src": "6828:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1727,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6834:41:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1724,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1731,
															1760
														],
														"referencedDeclaration": 1760,
														"src": "6799:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6799:77:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1723,
												"id": 1729,
												"nodeType": "Return",
												"src": "6792:84:8"
											}
										]
									},
									"documentation": {
										"id": 1715,
										"nodeType": "StructuredDocumentation",
										"src": "6512:168:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6694:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6723:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "6715:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6715:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6744:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "6731:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6731:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6714:35:8"
									},
									"returnParameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "6768:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1721,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:8"
									},
									"scope": 1844,
									"src": "6685:198:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1759,
										"nodeType": "Block",
										"src": "7224:170:8",
										"statements": [
											{
												"assignments": [
													1744,
													1746
												],
												"declarations": [
													{
														"constant": false,
														"id": 1744,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7240:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1759,
														"src": "7235:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1743,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7235:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1746,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7262:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1759,
														"src": "7249:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1745,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7249:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1751,
												"initialValue": {
													"arguments": [
														{
															"id": 1749,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1736,
															"src": "7296:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1747,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1734,
															"src": "7276:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1748,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7276:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7276:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7234:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1753,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1734,
															"src": "7345:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1754,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1744,
															"src": "7353:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1755,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1746,
															"src": "7362:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1756,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1738,
															"src": "7374:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1752,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1799,
														"src": "7318:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7318:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1742,
												"id": 1758,
												"nodeType": "Return",
												"src": "7311:76:8"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "6889:175:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1760,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7078:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7116:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "7108:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7145:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "7132:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1735,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7173:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "7159:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1737,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7159:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7098:93:8"
									},
									"returnParameters": {
										"id": 1742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "7210:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1740,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7210:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7209:14:8"
									},
									"scope": 1844,
									"src": "7069:325:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1798,
										"nodeType": "Block",
										"src": "7876:434:8",
										"statements": [
											{
												"condition": {
													"id": 1774,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1765,
													"src": "7890:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1796,
													"nodeType": "Block",
													"src": "8246:58:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1792,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1767,
																		"src": "8268:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1793,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1769,
																		"src": "8280:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1791,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1843,
																	"src": "8260:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8260:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1795,
															"nodeType": "ExpressionStatement",
															"src": "8260:33:8"
														}
													]
												},
												"id": 1797,
												"nodeType": "IfStatement",
												"src": "7886:418:8",
												"trueBody": {
													"id": 1790,
													"nodeType": "Block",
													"src": "7899:341:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1775,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1767,
																		"src": "7917:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7917:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1777,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7938:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7917:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1787,
															"nodeType": "IfStatement",
															"src": "7913:286:8",
															"trueBody": {
																"id": 1786,
																"nodeType": "Block",
																"src": "7941:258:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1781,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1763,
																							"src": "8143:6:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1780,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1532,
																						"src": "8132:10:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1782,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8132:18:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1783,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8152:31:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1779,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8124:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1784,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8124:60:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1785,
																		"nodeType": "ExpressionStatement",
																		"src": "8124:60:8"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1788,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1767,
																"src": "8219:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1773,
															"id": 1789,
															"nodeType": "Return",
															"src": "8212:17:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1761,
										"nodeType": "StructuredDocumentation",
										"src": "7400:277:8",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7691:26:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7735:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "7727:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7727:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7756:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "7751:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1764,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7751:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7786:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "7773:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1766,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7773:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7820:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "7806:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1768,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7806:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7717:121:8"
									},
									"returnParameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "7862:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7862:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7861:14:8"
									},
									"scope": 1844,
									"src": "7682:628:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1822,
										"nodeType": "Block",
										"src": "8691:135:8",
										"statements": [
											{
												"condition": {
													"id": 1811,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1802,
													"src": "8705:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1820,
													"nodeType": "Block",
													"src": "8762:58:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1816,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1804,
																		"src": "8784:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1817,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1806,
																		"src": "8796:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1815,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1843,
																	"src": "8776:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1818,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8776:33:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1819,
															"nodeType": "ExpressionStatement",
															"src": "8776:33:8"
														}
													]
												},
												"id": 1821,
												"nodeType": "IfStatement",
												"src": "8701:119:8",
												"trueBody": {
													"id": 1814,
													"nodeType": "Block",
													"src": "8714:42:8",
													"statements": [
														{
															"expression": {
																"id": 1812,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1804,
																"src": "8735:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1810,
															"id": 1813,
															"nodeType": "Return",
															"src": "8728:17:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1800,
										"nodeType": "StructuredDocumentation",
										"src": "8316:210:8",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8540:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8571:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "8566:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1801,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8566:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8601:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "8588:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1803,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8588:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8635:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "8621:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1805,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8621:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8556:97:8"
									},
									"returnParameters": {
										"id": 1810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "8677:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1808,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8677:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8676:14:8"
									},
									"scope": 1844,
									"src": "8531:295:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1842,
										"nodeType": "Block",
										"src": "8915:457:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1830,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1825,
															"src": "8991:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1831,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8991:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1832,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9011:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8991:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1840,
													"nodeType": "Block",
													"src": "9321:45:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1837,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1827,
																		"src": "9342:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1836,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9335:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1838,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9335:20:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1839,
															"nodeType": "ExpressionStatement",
															"src": "9335:20:8"
														}
													]
												},
												"id": 1841,
												"nodeType": "IfStatement",
												"src": "8987:379:8",
												"trueBody": {
													"id": 1835,
													"nodeType": "Block",
													"src": "9014:301:8",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9172:133:8",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9190:40:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9219:10:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9213:5:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9213:17:8"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9194:15:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9258:2:8",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9262:10:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9254:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9254:19:8"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9275:15:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9247:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9247:44:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9247:44:8"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1825,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9219:10:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1825,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9262:10:8",
																	"valueSize": 1
																}
															],
															"id": 1834,
															"nodeType": "InlineAssembly",
															"src": "9163:142:8"
														}
													]
												}
											}
										]
									},
									"id": 1843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8841:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8862:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "8849:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1824,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8849:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1827,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8888:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "8874:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1826,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8874:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8848:53:8"
									},
									"returnParameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8915:0:8"
									},
									"scope": 1844,
									"src": "8832:540:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1845,
							"src": "194:9180:8",
							"usedErrors": []
						}
					],
					"src": "101:9274:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1895
						],
						"Initializable": [
							301
						]
					},
					"id": 1896,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1846,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1848,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1896,
							"sourceUnit": 302,
							"src": "125:63:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1847,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "133:13:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1850,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 301,
										"src": "727:13:9"
									},
									"id": 1851,
									"nodeType": "InheritanceSpecifier",
									"src": "727:13:9"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1849,
								"nodeType": "StructuredDocumentation",
								"src": "190:496:9",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1895,
							"linearizedBaseContracts": [
								1895,
								301
							],
							"name": "ContextUpgradeable",
							"nameLocation": "705:18:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1856,
										"nodeType": "Block",
										"src": "799:7:9",
										"statements": []
									},
									"id": 1857,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1854,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1853,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "782:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "782:16:9"
										}
									],
									"name": "__Context_init",
									"nameLocation": "756:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "770:2:9"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "799:0:9"
									},
									"scope": 1895,
									"src": "747:59:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1862,
										"nodeType": "Block",
										"src": "874:7:9",
										"statements": []
									},
									"id": 1863,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1860,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1859,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 246,
												"src": "857:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "857:16:9"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "821:24:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1858,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "845:2:9"
									},
									"returnParameters": {
										"id": 1861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "874:0:9"
									},
									"scope": 1895,
									"src": "812:69:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1871,
										"nodeType": "Block",
										"src": "948:34:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1868,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "965:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "965:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1867,
												"id": 1870,
												"nodeType": "Return",
												"src": "958:17:9"
											}
										]
									},
									"id": 1872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "895:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1864,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "905:2:9"
									},
									"returnParameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "939:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "939:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "938:9:9"
									},
									"scope": 1895,
									"src": "886:96:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1880,
										"nodeType": "Block",
										"src": "1055:32:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1877,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1072:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1072:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1876,
												"id": 1879,
												"nodeType": "Return",
												"src": "1065:15:9"
											}
										]
									},
									"id": 1881,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "997:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1873,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1005:2:9"
									},
									"returnParameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1881,
												"src": "1039:14:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1874,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1039:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:16:9"
									},
									"scope": 1895,
									"src": "988:99:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1888,
										"nodeType": "Block",
										"src": "1165:25:9",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1182:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1885,
												"id": 1887,
												"nodeType": "Return",
												"src": "1175:8:9"
											}
										]
									},
									"id": 1889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1102:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1882,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1122:2:9"
									},
									"returnParameters": {
										"id": 1885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1889,
												"src": "1156:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1156:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1155:9:9"
									},
									"scope": 1895,
									"src": "1093:97:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1890,
										"nodeType": "StructuredDocumentation",
										"src": "1196:254:9",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1894,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1475:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1895,
									"src": "1455:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1891,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1455:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1893,
										"length": {
											"hexValue": "3530",
											"id": 1892,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1463:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1455:11:9",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1896,
							"src": "687:796:9",
							"usedErrors": []
						}
					],
					"src": "101:1383:9"
				},
				"id": 9
			},
			"contracts/interfaces/common/IWrappedNative.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/common/IWrappedNative.sol",
					"exportedSymbols": {
						"IWrappedNative": [
							1906
						]
					},
					"id": 1907,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1897,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1906,
							"linearizedBaseContracts": [
								1906
							],
							"name": "IWrappedNative",
							"nameLocation": "76:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d0e30db0",
									"id": 1900,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "106:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "113:2:10"
									},
									"returnParameters": {
										"id": 1899,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "132:0:10"
									},
									"scope": 1906,
									"src": "97:36:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 1905,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "147:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "wad",
												"nameLocation": "164:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "156:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "156:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "155:13:10"
									},
									"returnParameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "177:0:10"
									},
									"scope": 1906,
									"src": "138:40:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1907,
							"src": "66:114:10",
							"usedErrors": []
						}
					],
					"src": "33:148:10"
				},
				"id": 10
			},
			"contracts/interfaces/plexus/IStrategy.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/plexus/IStrategy.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							1077
						],
						"IStrategy": [
							1972
						]
					},
					"id": 1973,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1908,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"id": 1909,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1973,
							"sourceUnit": 1078,
							"src": "58:79:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1972,
							"linearizedBaseContracts": [
								1972
							],
							"name": "IStrategy",
							"nameLocation": "149:9:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "fbfa77cf",
									"id": 1914,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "vault",
									"nameLocation": "174:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1910,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "179:2:11"
									},
									"returnParameters": {
										"id": 1913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "205:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "205:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "204:9:11"
									},
									"scope": 1972,
									"src": "165:49:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "1f1fcd51",
									"id": 1920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "want",
									"nameLocation": "228:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1915,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "232:2:11"
									},
									"returnParameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "258:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1917,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1916,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "258:17:11"
													},
													"referencedDeclaration": 1077,
													"src": "258:17:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "257:19:11"
									},
									"scope": 1972,
									"src": "219:58:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "573fef0a",
									"id": 1923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeDeposit",
									"nameLocation": "291:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:11"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "315:0:11"
									},
									"scope": 1972,
									"src": "282:34:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d0e30db0",
									"id": 1926,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "330:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:11"
									},
									"returnParameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "348:0:11"
									},
									"scope": 1972,
									"src": "321:28:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 1931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "363:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "372:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:9:11"
									},
									"returnParameters": {
										"id": 1930,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "389:0:11"
									},
									"scope": 1972,
									"src": "354:36:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "722713f7",
									"id": 1936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "404:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "413:2:11"
									},
									"returnParameters": {
										"id": 1935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1936,
												"src": "439:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1933,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "439:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "438:9:11"
									},
									"scope": 1972,
									"src": "395:53:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c1a3d44c",
									"id": 1941,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfWant",
									"nameLocation": "462:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1937,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "475:2:11"
									},
									"returnParameters": {
										"id": 1940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1941,
												"src": "501:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "501:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "500:9:11"
									},
									"scope": 1972,
									"src": "453:57:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "11588086",
									"id": 1946,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfPool",
									"nameLocation": "524:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "537:2:11"
									},
									"returnParameters": {
										"id": 1945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "563:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "563:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:9:11"
									},
									"scope": 1972,
									"src": "515:57:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4641257d",
									"id": 1949,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "harvest",
									"nameLocation": "586:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "593:2:11"
									},
									"returnParameters": {
										"id": 1948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "604:0:11"
									},
									"scope": 1972,
									"src": "577:28:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "fb617787",
									"id": 1952,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "retireStrat",
									"nameLocation": "619:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1950,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "630:2:11"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "641:0:11"
									},
									"scope": 1972,
									"src": "610:32:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4700d305",
									"id": 1955,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "panic",
									"nameLocation": "656:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "661:2:11"
									},
									"returnParameters": {
										"id": 1954,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:0:11"
									},
									"scope": 1972,
									"src": "647:26:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "8456cb59",
									"id": 1958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pause",
									"nameLocation": "687:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "692:2:11"
									},
									"returnParameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "703:0:11"
									},
									"scope": 1972,
									"src": "678:26:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3f4ba83a",
									"id": 1961,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unpause",
									"nameLocation": "718:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:11"
									},
									"returnParameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "736:0:11"
									},
									"scope": 1972,
									"src": "709:28:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5c975abb",
									"id": 1966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "751:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1962,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "757:2:11"
									},
									"returnParameters": {
										"id": 1965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "783:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1963,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "783:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "782:6:11"
									},
									"scope": 1972,
									"src": "742:47:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2b3297f9",
									"id": 1971,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapper",
									"nameLocation": "803:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "810:2:11"
									},
									"returnParameters": {
										"id": 1970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1971,
												"src": "836:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "835:9:11"
									},
									"scope": 1972,
									"src": "794:51:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1973,
							"src": "139:708:11",
							"usedErrors": []
						}
					],
					"src": "33:815:11"
				},
				"id": 11
			},
			"contracts/vaults/PlexusVaultNative.sol": {
				"ast": {
					"absolutePath": "contracts/vaults/PlexusVaultNative.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1844
						],
						"ContextUpgradeable": [
							1895
						],
						"ERC20Upgradeable": [
							999
						],
						"IERC20MetadataUpgradeable": [
							1102
						],
						"IERC20PermitUpgradeable": [
							1138
						],
						"IERC20Upgradeable": [
							1077
						],
						"IStrategy": [
							1972
						],
						"IWrappedNative": [
							1906
						],
						"Initializable": [
							301
						],
						"OwnableUpgradeable": [
							132
						],
						"PlexusVaultNative": [
							2683
						],
						"ReentrancyGuardUpgradeable": [
							386
						],
						"SafeERC20Upgradeable": [
							1514
						]
					},
					"id": 2684,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1974,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1975,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 1000,
							"src": "58:78:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"id": 1976,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 1515,
							"src": "137:88:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1977,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 133,
							"src": "226:75:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
							"id": 1978,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 387,
							"src": "302:85:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/plexus/IStrategy.sol",
							"file": "../interfaces/plexus/IStrategy.sol",
							"id": 1979,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 1973,
							"src": "389:44:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/common/IWrappedNative.sol",
							"file": "../interfaces/common/IWrappedNative.sol",
							"id": 1980,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2684,
							"sourceUnit": 1907,
							"src": "434:49:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1982,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 999,
										"src": "765:16:12"
									},
									"id": 1983,
									"nodeType": "InheritanceSpecifier",
									"src": "765:16:12"
								},
								{
									"baseName": {
										"id": 1984,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 132,
										"src": "783:18:12"
									},
									"id": 1985,
									"nodeType": "InheritanceSpecifier",
									"src": "783:18:12"
								},
								{
									"baseName": {
										"id": 1986,
										"name": "ReentrancyGuardUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 386,
										"src": "803:26:12"
									},
									"id": 1987,
									"nodeType": "InheritanceSpecifier",
									"src": "803:26:12"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1981,
								"nodeType": "StructuredDocumentation",
								"src": "485:249:12",
								"text": " @dev Implementation of a vault to deposit funds for yield optimizing.\n This is the contract that receives funds and that users interface with.\n The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract."
							},
							"fullyImplemented": true,
							"id": 2683,
							"linearizedBaseContracts": [
								2683,
								386,
								132,
								999,
								1102,
								1077,
								1895,
								301
							],
							"name": "PlexusVaultNative",
							"nameLocation": "744:17:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1991,
									"libraryName": {
										"id": 1988,
										"name": "SafeERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1514,
										"src": "842:20:12"
									},
									"nodeType": "UsingForDirective",
									"src": "836:49:12",
									"typeName": {
										"id": 1990,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1989,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1077,
											"src": "867:17:12"
										},
										"referencedDeclaration": 1077,
										"src": "867:17:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
											"typeString": "contract IERC20Upgradeable"
										}
									}
								},
								{
									"canonicalName": "PlexusVaultNative.StratCandidate",
									"id": 1996,
									"members": [
										{
											"constant": false,
											"id": 1993,
											"mutability": "mutable",
											"name": "implementation",
											"nameLocation": "931:14:12",
											"nodeType": "VariableDeclaration",
											"scope": 1996,
											"src": "923:22:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1992,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "923:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1995,
											"mutability": "mutable",
											"name": "proposedTime",
											"nameLocation": "960:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 1996,
											"src": "955:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1994,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "955:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StratCandidate",
									"nameLocation": "898:14:12",
									"nodeType": "StructDefinition",
									"scope": 2683,
									"src": "891:88:12",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "76dfabb8",
									"id": 1999,
									"mutability": "mutable",
									"name": "stratCandidate",
									"nameLocation": "1055:14:12",
									"nodeType": "VariableDeclaration",
									"scope": 2683,
									"src": "1033:36:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
										"typeString": "struct PlexusVaultNative.StratCandidate"
									},
									"typeName": {
										"id": 1998,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1997,
											"name": "StratCandidate",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1996,
											"src": "1033:14:12"
										},
										"referencedDeclaration": 1996,
										"src": "1033:14:12",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_StratCandidate_$1996_storage_ptr",
											"typeString": "struct PlexusVaultNative.StratCandidate"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a8c62e76",
									"id": 2002,
									"mutability": "mutable",
									"name": "strategy",
									"nameLocation": "1143:8:12",
									"nodeType": "VariableDeclaration",
									"scope": 2683,
									"src": "1126:25:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IStrategy_$1972",
										"typeString": "contract IStrategy"
									},
									"typeName": {
										"id": 2001,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2000,
											"name": "IStrategy",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1972,
											"src": "1126:9:12"
										},
										"referencedDeclaration": 1972,
										"src": "1126:9:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IStrategy_$1972",
											"typeString": "contract IStrategy"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e2d1e75c",
									"id": 2004,
									"mutability": "mutable",
									"name": "approvalDelay",
									"nameLocation": "1253:13:12",
									"nodeType": "VariableDeclaration",
									"scope": 2683,
									"src": "1238:28:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2003,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1238:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 2008,
									"name": "NewStratCandidate",
									"nameLocation": "1279:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2006,
												"indexed": false,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1305:14:12",
												"nodeType": "VariableDeclaration",
												"scope": 2008,
												"src": "1297:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1297:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:24:12"
									},
									"src": "1273:48:12"
								},
								{
									"anonymous": false,
									"id": 2012,
									"name": "UpgradeStrat",
									"nameLocation": "1332:12:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2010,
												"indexed": false,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1353:14:12",
												"nodeType": "VariableDeclaration",
												"scope": 2012,
												"src": "1345:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1345:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1344:24:12"
									},
									"src": "1326:43:12"
								},
								{
									"body": {
										"id": 2046,
										"nodeType": "Block",
										"src": "2047:175:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2028,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2018,
															"src": "2070:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 2029,
															"name": "_symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2020,
															"src": "2077:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2027,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 434,
														"src": "2057:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 2030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2057:28:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2031,
												"nodeType": "ExpressionStatement",
												"src": "2057:28:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2032,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "2095:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2095:16:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2034,
												"nodeType": "ExpressionStatement",
												"src": "2095:16:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2035,
														"name": "__ReentrancyGuard_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 325,
														"src": "2121:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2121:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2037,
												"nodeType": "ExpressionStatement",
												"src": "2121:24:12"
											},
											{
												"expression": {
													"id": 2040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2038,
														"name": "strategy",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2002,
														"src": "2155:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IStrategy_$1972",
															"typeString": "contract IStrategy"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2039,
														"name": "_strategy",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2016,
														"src": "2166:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IStrategy_$1972",
															"typeString": "contract IStrategy"
														}
													},
													"src": "2155:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IStrategy_$1972",
														"typeString": "contract IStrategy"
													}
												},
												"id": 2041,
												"nodeType": "ExpressionStatement",
												"src": "2155:20:12"
											},
											{
												"expression": {
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2042,
														"name": "approvalDelay",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2004,
														"src": "2185:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2043,
														"name": "_approvalDelay",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2022,
														"src": "2201:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2185:30:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "2185:30:12"
											}
										]
									},
									"documentation": {
										"id": 2013,
										"nodeType": "StructuredDocumentation",
										"src": "1375:539:12",
										"text": " @dev Sets the value of {token} to the token that the vault will\n hold as underlying value. It initializes the vault's own 'plxv' token\n This token is minted when someone does a deposit. It is burned in order\n to withdraw the corresponding portion of the underlying assets.\n @param _strategy the address of the strategy.\n @param _name the name of the vault token.\n @param _symbol the symbol of the vault token.\n @param _approvalDelay the delay before a new strat can be approved."
									},
									"functionSelector": "4d12d4b6",
									"id": 2047,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2025,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2024,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 203,
												"src": "2035:11:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "2035:11:12"
										}
									],
									"name": "initialize",
									"nameLocation": "1928:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2016,
												"mutability": "mutable",
												"name": "_strategy",
												"nameLocation": "1949:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "1939:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IStrategy_$1972",
													"typeString": "contract IStrategy"
												},
												"typeName": {
													"id": 2015,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2014,
														"name": "IStrategy",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1972,
														"src": "1939:9:12"
													},
													"referencedDeclaration": 1972,
													"src": "1939:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IStrategy_$1972",
														"typeString": "contract IStrategy"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "_name",
												"nameLocation": "1974:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "1960:19:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2017,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1960:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "_symbol",
												"nameLocation": "1995:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "1981:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2019,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1981:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2022,
												"mutability": "mutable",
												"name": "_approvalDelay",
												"nameLocation": "2012:14:12",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "2004:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2004:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1938:89:12"
									},
									"returnParameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2047:0:12"
									},
									"scope": 2683,
									"src": "1919:303:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "2284:58:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 2054,
																	"name": "strategy",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2002,
																	"src": "2319:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IStrategy_$1972",
																		"typeString": "contract IStrategy"
																	}
																},
																"id": 2055,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "want",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1920,
																"src": "2319:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view external returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2319:15:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														],
														"id": 2053,
														"name": "IERC20Upgradeable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "2301:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$1077_$",
															"typeString": "type(contract IERC20Upgradeable)"
														}
													},
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2301:34:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"functionReturnParameters": 2052,
												"id": 2058,
												"nodeType": "Return",
												"src": "2294:41:12"
											}
										]
									},
									"functionSelector": "1f1fcd51",
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "want",
									"nameLocation": "2237:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2241:2:12"
									},
									"returnParameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "2265:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 2050,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2049,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1077,
														"src": "2265:17:12"
													},
													"referencedDeclaration": 1077,
													"src": "2265:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2264:19:12"
									},
									"scope": 2683,
									"src": "2228:114:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2081,
										"nodeType": "Block",
										"src": "2658:89:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2071,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2700:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																			"typeString": "contract PlexusVaultNative"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																			"typeString": "contract PlexusVaultNative"
																		}
																	],
																	"id": 2070,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2692:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2069,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2692:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2072,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2692:13:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2066,
																	"name": "want",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2060,
																	"src": "2675:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																		"typeString": "function () view returns (contract IERC20Upgradeable)"
																	}
																},
																"id": 2067,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2675:6:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"id": 2068,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1034,
															"src": "2675:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view external returns (uint256)"
															}
														},
														"id": 2073,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2675:31:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 2075,
																		"name": "strategy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2002,
																		"src": "2719:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	],
																	"id": 2074,
																	"name": "IStrategy",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1972,
																	"src": "2709:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IStrategy_$1972_$",
																		"typeString": "type(contract IStrategy)"
																	}
																},
																"id": 2076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2709:19:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IStrategy_$1972",
																	"typeString": "contract IStrategy"
																}
															},
															"id": 2077,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1936,
															"src": "2709:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																"typeString": "function () view external returns (uint256)"
															}
														},
														"id": 2078,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2709:31:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2675:65:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2065,
												"id": 2080,
												"nodeType": "Return",
												"src": "2668:72:12"
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "2348:259:12",
										"text": " @dev It calculates the total underlying value of {token} held by the system.\n It takes into account the vault contract balance, the strategy contract balance\n  and the balance deployed in other contracts as part of the strategy."
									},
									"functionSelector": "b69ef8a8",
									"id": 2082,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balance",
									"nameLocation": "2621:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2628:2:12"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "2652:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2063,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2652:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:6:12"
									},
									"scope": 2683,
									"src": "2612:135:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2097,
										"nodeType": "Block",
										"src": "3081:55:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2093,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3123:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																],
																"id": 2092,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3115:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2091,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3115:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3115:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2088,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "3098:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2089,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3098:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2090,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1034,
														"src": "3098:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3098:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2087,
												"id": 2096,
												"nodeType": "Return",
												"src": "3091:38:12"
											}
										]
									},
									"documentation": {
										"id": 2083,
										"nodeType": "StructuredDocumentation",
										"src": "2753:272:12",
										"text": " @dev Custom logic in here for how much the vault allows to be borrowed.\n We return 100% of tokens for now. Under certain conditions we might\n want to keep some of the system funds at hand in the vault, instead\n of putting them to work."
									},
									"functionSelector": "48a0d754",
									"id": 2098,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "available",
									"nameLocation": "3039:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3048:2:12"
									},
									"returnParameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "3072:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3072:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3071:9:12"
									},
									"scope": 2683,
									"src": "3030:106:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2119,
										"nodeType": "Block",
										"src": "3414:86:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2104,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "3431:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 2105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3431:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3448:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3431:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2109,
																			"name": "balance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2082,
																			"src": "3460:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																				"typeString": "function () view returns (uint256)"
																			}
																		},
																		"id": 2110,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3460:9:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"hexValue": "31653138",
																		"id": 2111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3472:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		"value": "1e18"
																	},
																	"src": "3460:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2113,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3459:18:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2114,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "3480:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 2115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3480:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3459:34:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3431:62:12",
													"trueExpression": {
														"hexValue": "31653138",
														"id": 2108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3452:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000"
														},
														"value": "1e18"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2103,
												"id": 2118,
												"nodeType": "Return",
												"src": "3424:69:12"
											}
										]
									},
									"documentation": {
										"id": 2099,
										"nodeType": "StructuredDocumentation",
										"src": "3142:205:12",
										"text": " @dev Function for various UIs to display the current value of one of our yield tokens.\n Returns an uint256 with 18 decimals of how much underlying asset one vault share represents."
									},
									"functionSelector": "77c7b8fc",
									"id": 2120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPricePerFullShare",
									"nameLocation": "3361:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3381:2:12"
									},
									"returnParameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2120,
												"src": "3405:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3405:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3404:9:12"
									},
									"scope": 2683,
									"src": "3352:148:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2133,
										"nodeType": "Block",
										"src": "3630:54:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2128,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3665:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3665:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2125,
																		"name": "want",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2060,
																		"src": "3648:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																			"typeString": "function () view returns (contract IERC20Upgradeable)"
																		}
																	},
																	"id": 2126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3648:6:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 2127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balanceOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1034,
																"src": "3648:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view external returns (uint256)"
																}
															},
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3648:28:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2124,
														"name": "deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2210,
														"src": "3640:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3640:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2132,
												"nodeType": "ExpressionStatement",
												"src": "3640:37:12"
											}
										]
									},
									"documentation": {
										"id": 2121,
										"nodeType": "StructuredDocumentation",
										"src": "3506:88:12",
										"text": " @dev A helper function to call deposit() with all the sender's funds."
									},
									"functionSelector": "de5f6268",
									"id": 2134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositAll",
									"nameLocation": "3608:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3618:2:12"
									},
									"returnParameters": {
										"id": 2123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3630:0:12"
									},
									"scope": 2683,
									"src": "3599:85:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2209,
										"nodeType": "Block",
										"src": "3931:486:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2142,
															"name": "strategy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2002,
															"src": "3941:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IStrategy_$1972",
																"typeString": "contract IStrategy"
															}
														},
														"id": 2144,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "beforeDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1923,
														"src": "3941:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 2145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3941:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2146,
												"nodeType": "ExpressionStatement",
												"src": "3941:24:12"
											},
											{
												"assignments": [
													2148
												],
												"declarations": [
													{
														"constant": false,
														"id": 2148,
														"mutability": "mutable",
														"name": "_pool",
														"nameLocation": "3984:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 2209,
														"src": "3976:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2147,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3976:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2151,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2149,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "3992:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3992:9:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3976:25:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2155,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4035:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4035:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 2159,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4055:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																],
																"id": 2158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4047:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2157,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4047:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4047:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2161,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2137,
															"src": "4062:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2152,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "4011:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4011:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2154,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1198,
														"src": "4011:23:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1077_$",
															"typeString": "function (contract IERC20Upgradeable,address,address,uint256)"
														}
													},
													"id": 2162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4011:59:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2163,
												"nodeType": "ExpressionStatement",
												"src": "4011:59:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2164,
														"name": "earn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2314,
														"src": "4080:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4080:6:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2166,
												"nodeType": "ExpressionStatement",
												"src": "4080:6:12"
											},
											{
												"assignments": [
													2168
												],
												"declarations": [
													{
														"constant": false,
														"id": 2168,
														"mutability": "mutable",
														"name": "_after",
														"nameLocation": "4104:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2209,
														"src": "4096:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2167,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4096:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2171,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2169,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "4113:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4113:9:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4096:26:12"
											},
											{
												"expression": {
													"id": 2176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2172,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2137,
														"src": "4132:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2175,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2173,
															"name": "_after",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2168,
															"src": "4142:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 2174,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2148,
															"src": "4151:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4142:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4132:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2177,
												"nodeType": "ExpressionStatement",
												"src": "4132:24:12"
											},
											{
												"assignments": [
													2179
												],
												"declarations": [
													{
														"constant": false,
														"id": 2179,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "4218:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2209,
														"src": "4210:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2178,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4210:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2181,
												"initialValue": {
													"hexValue": "30",
													"id": 2180,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4227:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4210:18:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2182,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "4242:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2183,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4242:13:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2184,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4259:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4242:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2201,
													"nodeType": "Block",
													"src": "4309:67:12",
													"statements": [
														{
															"expression": {
																"id": 2199,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2191,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2179,
																	"src": "4323:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2195,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2192,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2137,
																					"src": "4333:7:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2193,
																						"name": "totalSupply",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 492,
																						"src": "4343:11:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																							"typeString": "function () view returns (uint256)"
																						}
																					},
																					"id": 2194,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4343:13:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "4333:23:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2196,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4332:25:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2197,
																		"name": "_pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2148,
																		"src": "4360:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4332:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4323:42:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2200,
															"nodeType": "ExpressionStatement",
															"src": "4323:42:12"
														}
													]
												},
												"id": 2202,
												"nodeType": "IfStatement",
												"src": "4238:138:12",
												"trueBody": {
													"id": 2190,
													"nodeType": "Block",
													"src": "4262:41:12",
													"statements": [
														{
															"expression": {
																"id": 2188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2186,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2179,
																	"src": "4276:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 2187,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2137,
																	"src": "4285:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4276:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2189,
															"nodeType": "ExpressionStatement",
															"src": "4276:16:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2204,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4391:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4391:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2206,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2179,
															"src": "4403:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2203,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "4385:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4385:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2208,
												"nodeType": "ExpressionStatement",
												"src": "4385:25:12"
											}
										]
									},
									"documentation": {
										"id": 2135,
										"nodeType": "StructuredDocumentation",
										"src": "3690:185:12",
										"text": " @dev The entrypoint of funds into the system. People deposit with this function\n into the vault. The vault is then in charge of sending funds into the strategy."
									},
									"functionSelector": "b6b55f25",
									"id": 2210,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2140,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2139,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "3918:12:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "3918:12:12"
										}
									],
									"name": "deposit",
									"nameLocation": "3889:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2137,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3902:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "3897:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2136,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3897:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3896:14:12"
									},
									"returnParameters": {
										"id": 2141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3931:0:12"
									},
									"scope": 2683,
									"src": "3880:537:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2288,
										"nodeType": "Block",
										"src": "4639:521:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2216,
															"name": "strategy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2002,
															"src": "4649:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IStrategy_$1972",
																"typeString": "contract IStrategy"
															}
														},
														"id": 2218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "beforeDeposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1923,
														"src": "4649:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 2219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4649:24:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2220,
												"nodeType": "ExpressionStatement",
												"src": "4649:24:12"
											},
											{
												"assignments": [
													2222
												],
												"declarations": [
													{
														"constant": false,
														"id": 2222,
														"mutability": "mutable",
														"name": "_pool",
														"nameLocation": "4692:5:12",
														"nodeType": "VariableDeclaration",
														"scope": 2288,
														"src": "4684:13:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2221,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4684:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2225,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2223,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "4700:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4700:9:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4684:25:12"
											},
											{
												"assignments": [
													2227
												],
												"declarations": [
													{
														"constant": false,
														"id": 2227,
														"mutability": "mutable",
														"name": "_amount",
														"nameLocation": "4727:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2288,
														"src": "4719:15:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2226,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4719:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2230,
												"initialValue": {
													"expression": {
														"id": 2228,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "4737:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"src": "4737:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4719:27:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 2234,
																					"name": "want",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2060,
																					"src": "4779:4:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																						"typeString": "function () view returns (contract IERC20Upgradeable)"
																					}
																				},
																				"id": 2235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4779:6:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																					"typeString": "contract IERC20Upgradeable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																					"typeString": "contract IERC20Upgradeable"
																				}
																			],
																			"id": 2233,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4771:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2232,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4771:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4771:15:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2231,
																	"name": "IWrappedNative",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1906,
																	"src": "4756:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IWrappedNative_$1906_$",
																		"typeString": "type(contract IWrappedNative)"
																	}
																},
																"id": 2237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4756:31:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IWrappedNative_$1906",
																	"typeString": "contract IWrappedNative"
																}
															},
															"id": 2238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposit",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1900,
															"src": "4756:39:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$__$returns$__$",
																"typeString": "function () payable external"
															}
														},
														"id": 2240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2239,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2227,
																"src": "4803:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4756:55:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$__$returns$__$value",
															"typeString": "function () payable external"
														}
													},
													"id": 2241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4756:57:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2242,
												"nodeType": "ExpressionStatement",
												"src": "4756:57:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2243,
														"name": "earn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2314,
														"src": "4823:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:6:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2245,
												"nodeType": "ExpressionStatement",
												"src": "4823:6:12"
											},
											{
												"assignments": [
													2247
												],
												"declarations": [
													{
														"constant": false,
														"id": 2247,
														"mutability": "mutable",
														"name": "_after",
														"nameLocation": "4847:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2288,
														"src": "4839:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2246,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4839:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2250,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2248,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "4856:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4856:9:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4839:26:12"
											},
											{
												"expression": {
													"id": 2255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2251,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2227,
														"src": "4875:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2252,
															"name": "_after",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2247,
															"src": "4885:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 2253,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2222,
															"src": "4894:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4885:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4875:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2256,
												"nodeType": "ExpressionStatement",
												"src": "4875:24:12"
											},
											{
												"assignments": [
													2258
												],
												"declarations": [
													{
														"constant": false,
														"id": 2258,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "4961:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2288,
														"src": "4953:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2257,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4953:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2260,
												"initialValue": {
													"hexValue": "30",
													"id": 2259,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4970:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4953:18:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2261,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "4985:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4985:13:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2263,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5002:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4985:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2280,
													"nodeType": "Block",
													"src": "5052:67:12",
													"statements": [
														{
															"expression": {
																"id": 2278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2270,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2258,
																	"src": "5066:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2274,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2271,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2227,
																					"src": "5076:7:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2272,
																						"name": "totalSupply",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 492,
																						"src": "5086:11:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																							"typeString": "function () view returns (uint256)"
																						}
																					},
																					"id": 2273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "5086:13:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "5076:23:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2275,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5075:25:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2276,
																		"name": "_pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2222,
																		"src": "5103:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5075:33:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5066:42:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2279,
															"nodeType": "ExpressionStatement",
															"src": "5066:42:12"
														}
													]
												},
												"id": 2281,
												"nodeType": "IfStatement",
												"src": "4981:138:12",
												"trueBody": {
													"id": 2269,
													"nodeType": "Block",
													"src": "5005:41:12",
													"statements": [
														{
															"expression": {
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2265,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2258,
																	"src": "5019:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 2266,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2227,
																	"src": "5028:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5019:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2268,
															"nodeType": "ExpressionStatement",
															"src": "5019:16:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2283,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5134:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5134:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2285,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2258,
															"src": "5146:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2282,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "5128:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5128:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2287,
												"nodeType": "ExpressionStatement",
												"src": "5128:25:12"
											}
										]
									},
									"documentation": {
										"id": 2211,
										"nodeType": "StructuredDocumentation",
										"src": "4423:158:12",
										"text": " @dev Alterwnative entry point into the strat. You can send wnative,\n and the vault will wrap them before sending them into the strat."
									},
									"functionSelector": "db6b5246",
									"id": 2289,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2214,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2213,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "4626:12:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "4626:12:12"
										}
									],
									"name": "depositNative",
									"nameLocation": "4595:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4608:2:12"
									},
									"returnParameters": {
										"id": 2215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4639:0:12"
									},
									"scope": 2683,
									"src": "4586:574:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2313,
										"nodeType": "Block",
										"src": "5344:122:12",
										"statements": [
											{
												"assignments": [
													2294
												],
												"declarations": [
													{
														"constant": false,
														"id": 2294,
														"mutability": "mutable",
														"name": "_bal",
														"nameLocation": "5359:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 2313,
														"src": "5354:9:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2293,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "5354:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2297,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2295,
														"name": "available",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2098,
														"src": "5366:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5366:11:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5354:23:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2303,
																	"name": "strategy",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2002,
																	"src": "5415:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IStrategy_$1972",
																		"typeString": "contract IStrategy"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IStrategy_$1972",
																		"typeString": "contract IStrategy"
																	}
																],
																"id": 2302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5407:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2301,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5407:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5407:17:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2305,
															"name": "_bal",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2294,
															"src": "5426:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2298,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "5387:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5387:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2300,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1171,
														"src": "5387:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1077_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 2306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5387:44:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2307,
												"nodeType": "ExpressionStatement",
												"src": "5387:44:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2308,
															"name": "strategy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2002,
															"src": "5441:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IStrategy_$1972",
																"typeString": "contract IStrategy"
															}
														},
														"id": 2310,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "deposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1926,
														"src": "5441:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 2311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5441:18:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2312,
												"nodeType": "ExpressionStatement",
												"src": "5441:18:12"
											}
										]
									},
									"documentation": {
										"id": 2290,
										"nodeType": "StructuredDocumentation",
										"src": "5166:150:12",
										"text": " @dev Function to send funds into the strategy and put them to work. It's primarily called\n by the vault's deposit() function."
									},
									"functionSelector": "d389800f",
									"id": 2314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "earn",
									"nameLocation": "5330:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5334:2:12"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5344:0:12"
									},
									"scope": 2683,
									"src": "5321:145:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2325,
										"nodeType": "Block",
										"src": "5598:48:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2320,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5627:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5627:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2319,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "5617:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 2322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:21:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2318,
														"name": "withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2426,
														"src": "5608:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5608:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2324,
												"nodeType": "ExpressionStatement",
												"src": "5608:31:12"
											}
										]
									},
									"documentation": {
										"id": 2315,
										"nodeType": "StructuredDocumentation",
										"src": "5472:89:12",
										"text": " @dev A helper function to call withdraw() with all the sender's funds."
									},
									"functionSelector": "853828b6",
									"id": 2326,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawAll",
									"nameLocation": "5575:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5586:2:12"
									},
									"returnParameters": {
										"id": 2317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5598:0:12"
									},
									"scope": 2683,
									"src": "5566:80:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2337,
										"nodeType": "Block",
										"src": "5786:54:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 2332,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5821:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5821:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2331,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "5811:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 2334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5811:21:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2330,
														"name": "withdrawNative",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2526,
														"src": "5796:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5796:37:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2336,
												"nodeType": "ExpressionStatement",
												"src": "5796:37:12"
											}
										]
									},
									"documentation": {
										"id": 2327,
										"nodeType": "StructuredDocumentation",
										"src": "5652:91:12",
										"text": " @dev Alterwnative helper function to withdraw all funds in wnative form."
									},
									"functionSelector": "482fe024",
									"id": 2338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawAllNative",
									"nameLocation": "5757:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5774:2:12"
									},
									"returnParameters": {
										"id": 2329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5786:0:12"
									},
									"scope": 2683,
									"src": "5748:92:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2425,
										"nodeType": "Block",
										"src": "6113:485:12",
										"statements": [
											{
												"assignments": [
													2345
												],
												"declarations": [
													{
														"constant": false,
														"id": 2345,
														"mutability": "mutable",
														"name": "r",
														"nameLocation": "6131:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 2425,
														"src": "6123:9:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2344,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6123:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2354,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2346,
																		"name": "balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2082,
																		"src": "6136:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 2347,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6136:9:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2348,
																	"name": "_shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2341,
																	"src": "6148:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6136:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2350,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6135:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2351,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "6159:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2352,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6159:13:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6135:37:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6123:49:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2356,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6188:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6188:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2358,
															"name": "_shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "6200:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2355,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 883,
														"src": "6182:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6182:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2360,
												"nodeType": "ExpressionStatement",
												"src": "6182:26:12"
											},
											{
												"assignments": [
													2362
												],
												"declarations": [
													{
														"constant": false,
														"id": 2362,
														"mutability": "mutable",
														"name": "b",
														"nameLocation": "6224:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 2425,
														"src": "6219:6:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2361,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6219:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2371,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2368,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6253:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																],
																"id": 2367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6245:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2366,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6245:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6245:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2363,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "6228:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6228:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2365,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1034,
														"src": "6228:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6228:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6219:40:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2372,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2362,
														"src": "6273:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2373,
														"name": "r",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2345,
														"src": "6277:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6273:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2416,
												"nodeType": "IfStatement",
												"src": "6269:278:12",
												"trueBody": {
													"id": 2415,
													"nodeType": "Block",
													"src": "6280:267:12",
													"statements": [
														{
															"assignments": [
																2376
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2376,
																	"mutability": "mutable",
																	"name": "_withdraw",
																	"nameLocation": "6299:9:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2415,
																	"src": "6294:14:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2375,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6294:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2380,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2377,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2345,
																	"src": "6311:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2378,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2362,
																	"src": "6315:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6311:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6294:22:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2384,
																		"name": "_withdraw",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2376,
																		"src": "6348:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2381,
																		"name": "strategy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2002,
																		"src": "6330:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	},
																	"id": 2383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1931,
																	"src": "6330:17:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 2385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6330:28:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2386,
															"nodeType": "ExpressionStatement",
															"src": "6330:28:12"
														},
														{
															"assignments": [
																2388
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2388,
																	"mutability": "mutable",
																	"name": "_after",
																	"nameLocation": "6377:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2415,
																	"src": "6372:11:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2387,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6372:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2397,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2394,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "6411:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																					"typeString": "contract PlexusVaultNative"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																					"typeString": "contract PlexusVaultNative"
																				}
																			],
																			"id": 2393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6403:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2392,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6403:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2395,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6403:13:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2389,
																			"name": "want",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2060,
																			"src": "6386:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																				"typeString": "function () view returns (contract IERC20Upgradeable)"
																			}
																		},
																		"id": 2390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6386:6:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	},
																	"id": 2391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1034,
																	"src": "6386:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 2396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6386:31:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6372:45:12"
														},
														{
															"assignments": [
																2399
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2399,
																	"mutability": "mutable",
																	"name": "_diff",
																	"nameLocation": "6436:5:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2415,
																	"src": "6431:10:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2398,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6431:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2403,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2400,
																	"name": "_after",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2388,
																	"src": "6444:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2401,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2362,
																	"src": "6453:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6444:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6431:23:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2406,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2404,
																	"name": "_diff",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2399,
																	"src": "6472:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2405,
																	"name": "_withdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2376,
																	"src": "6480:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6472:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2414,
															"nodeType": "IfStatement",
															"src": "6468:69:12",
															"trueBody": {
																"id": 2413,
																"nodeType": "Block",
																"src": "6491:46:12",
																"statements": [
																	{
																		"expression": {
																			"id": 2411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2407,
																				"name": "r",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2345,
																				"src": "6509:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2410,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2408,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2362,
																					"src": "6513:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 2409,
																					"name": "_diff",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2399,
																					"src": "6517:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "6513:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6509:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2412,
																		"nodeType": "ExpressionStatement",
																		"src": "6509:13:12"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2420,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6577:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6577:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2422,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2345,
															"src": "6589:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2417,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "6557:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6557:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1171,
														"src": "6557:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1077_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 2423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6557:34:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2424,
												"nodeType": "ExpressionStatement",
												"src": "6557:34:12"
											}
										]
									},
									"documentation": {
										"id": 2339,
										"nodeType": "StructuredDocumentation",
										"src": "5846:220:12",
										"text": " @dev Function to exit the system. The vault will withdraw the required tokens\n from the strategy and pay up the token holder. A proportional number of IOU\n tokens are burned in the process."
									},
									"functionSelector": "2e1a7d4d",
									"id": 2426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "6080:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "_shares",
												"nameLocation": "6097:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2426,
												"src": "6089:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6089:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6088:17:12"
									},
									"returnParameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6113:0:12"
									},
									"scope": 2683,
									"src": "6071:527:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2525,
										"nodeType": "Block",
										"src": "6799:535:12",
										"statements": [
											{
												"assignments": [
													2433
												],
												"declarations": [
													{
														"constant": false,
														"id": 2433,
														"mutability": "mutable",
														"name": "r",
														"nameLocation": "6817:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 2525,
														"src": "6809:9:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6809:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2442,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2434,
																		"name": "balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2082,
																		"src": "6822:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																			"typeString": "function () view returns (uint256)"
																		}
																	},
																	"id": 2435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6822:9:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2436,
																	"name": "_shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2429,
																	"src": "6834:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6822:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2438,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6821:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2439,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 492,
															"src": "6845:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 2440,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6845:13:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6821:37:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6809:49:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2444,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6874:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2445,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6874:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2446,
															"name": "_shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2429,
															"src": "6886:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2443,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 883,
														"src": "6868:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6868:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2448,
												"nodeType": "ExpressionStatement",
												"src": "6868:26:12"
											},
											{
												"assignments": [
													2450
												],
												"declarations": [
													{
														"constant": false,
														"id": 2450,
														"mutability": "mutable",
														"name": "b",
														"nameLocation": "6910:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 2525,
														"src": "6905:6:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2449,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6905:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2459,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2456,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6939:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																],
																"id": 2455,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6931:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2454,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6931:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6931:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2451,
																"name": "want",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2060,
																"src": "6914:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "function () view returns (contract IERC20Upgradeable)"
																}
															},
															"id": 2452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6914:6:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1034,
														"src": "6914:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6914:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6905:40:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2460,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2450,
														"src": "6959:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2461,
														"name": "r",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2433,
														"src": "6963:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6959:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2504,
												"nodeType": "IfStatement",
												"src": "6955:278:12",
												"trueBody": {
													"id": 2503,
													"nodeType": "Block",
													"src": "6966:267:12",
													"statements": [
														{
															"assignments": [
																2464
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2464,
																	"mutability": "mutable",
																	"name": "_withdraw",
																	"nameLocation": "6985:9:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2503,
																	"src": "6980:14:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2463,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6980:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2468,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2465,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2433,
																	"src": "6997:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2466,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2450,
																	"src": "7001:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6997:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6980:22:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2472,
																		"name": "_withdraw",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2464,
																		"src": "7034:9:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2469,
																		"name": "strategy",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2002,
																		"src": "7016:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	},
																	"id": 2471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1931,
																	"src": "7016:17:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 2473,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7016:28:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2474,
															"nodeType": "ExpressionStatement",
															"src": "7016:28:12"
														},
														{
															"assignments": [
																2476
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2476,
																	"mutability": "mutable",
																	"name": "_after",
																	"nameLocation": "7063:6:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2503,
																	"src": "7058:11:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2475,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "7058:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2485,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2482,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "7097:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																					"typeString": "contract PlexusVaultNative"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																					"typeString": "contract PlexusVaultNative"
																				}
																			],
																			"id": 2481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7089:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2480,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7089:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7089:13:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2477,
																			"name": "want",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2060,
																			"src": "7072:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																				"typeString": "function () view returns (contract IERC20Upgradeable)"
																			}
																		},
																		"id": 2478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7072:6:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	},
																	"id": 2479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1034,
																	"src": "7072:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 2484,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7072:31:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7058:45:12"
														},
														{
															"assignments": [
																2487
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2487,
																	"mutability": "mutable",
																	"name": "_diff",
																	"nameLocation": "7122:5:12",
																	"nodeType": "VariableDeclaration",
																	"scope": 2503,
																	"src": "7117:10:12",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2486,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "7117:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2491,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2488,
																	"name": "_after",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2476,
																	"src": "7130:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2489,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2450,
																	"src": "7139:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7130:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7117:23:12"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2494,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2492,
																	"name": "_diff",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2487,
																	"src": "7158:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2493,
																	"name": "_withdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2464,
																	"src": "7166:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7158:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2502,
															"nodeType": "IfStatement",
															"src": "7154:69:12",
															"trueBody": {
																"id": 2501,
																"nodeType": "Block",
																"src": "7177:46:12",
																"statements": [
																	{
																		"expression": {
																			"id": 2499,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2495,
																				"name": "r",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2433,
																				"src": "7195:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2498,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2496,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2450,
																					"src": "7199:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 2497,
																					"name": "_diff",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2487,
																					"src": "7203:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7199:9:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7195:13:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2500,
																		"nodeType": "ExpressionStatement",
																		"src": "7195:13:12"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2513,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2433,
															"src": "7284:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2508,
																				"name": "want",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2060,
																				"src": "7266:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																					"typeString": "function () view returns (contract IERC20Upgradeable)"
																				}
																			},
																			"id": 2509,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7266:6:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		],
																		"id": 2507,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7258:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2506,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "7258:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7258:15:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2505,
																"name": "IWrappedNative",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1906,
																"src": "7243:14:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IWrappedNative_$1906_$",
																	"typeString": "type(contract IWrappedNative)"
																}
															},
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7243:31:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWrappedNative_$1906",
																"typeString": "contract IWrappedNative"
															}
														},
														"id": 2512,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1905,
														"src": "7243:40:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 2514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7243:43:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2515,
												"nodeType": "ExpressionStatement",
												"src": "7243:43:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2522,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2433,
															"src": "7325:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 2518,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7304:3:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2519,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7304:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7296:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 2516,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7296:8:12",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 2520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7296:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 2521,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "7296:28:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7296:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2524,
												"nodeType": "ExpressionStatement",
												"src": "7296:31:12"
											}
										]
									},
									"documentation": {
										"id": 2427,
										"nodeType": "StructuredDocumentation",
										"src": "6604:142:12",
										"text": " @dev Alterwnative function to exit the system. Works just like 'withdraw(uint256)',\n but the funds arrive in wnative."
									},
									"functionSelector": "84276d81",
									"id": 2526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawNative",
									"nameLocation": "6760:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2429,
												"mutability": "mutable",
												"name": "_shares",
												"nameLocation": "6783:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2526,
												"src": "6775:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6775:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6774:17:12"
									},
									"returnParameters": {
										"id": 2431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6799:0:12"
									},
									"scope": 2683,
									"src": "6751:583:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2572,
										"nodeType": "Block",
										"src": "7562:351:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2537,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "7588:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																			"typeString": "contract PlexusVaultNative"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																			"typeString": "contract PlexusVaultNative"
																		}
																	],
																	"id": 2536,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7580:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2535,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7580:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2538,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7580:13:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2540,
																				"name": "_implementation",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2529,
																				"src": "7607:15:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2539,
																			"name": "IStrategy",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1972,
																			"src": "7597:9:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IStrategy_$1972_$",
																				"typeString": "type(contract IStrategy)"
																			}
																		},
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7597:26:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	},
																	"id": 2542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "vault",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1914,
																	"src": "7597:32:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 2543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7597:34:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7580:51:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50726f706f73616c206e6f742076616c696420666f722074686973205661756c74",
															"id": 2545,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7633:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d06d9f1cf1cb47b4c164a82a99136bb279d51ecac86ea5fd348be592f7bfe2e",
																"typeString": "literal_string \"Proposal not valid for this Vault\""
															},
															"value": "Proposal not valid for this Vault"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6d06d9f1cf1cb47b4c164a82a99136bb279d51ecac86ea5fd348be592f7bfe2e",
																"typeString": "literal_string \"Proposal not valid for this Vault\""
															}
														],
														"id": 2534,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7572:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7572:97:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2547,
												"nodeType": "ExpressionStatement",
												"src": "7572:97:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															},
															"id": 2556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2549,
																	"name": "want",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2060,
																	"src": "7687:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																		"typeString": "function () view returns (contract IERC20Upgradeable)"
																	}
																},
																"id": 2550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7687:6:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2552,
																				"name": "_implementation",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2529,
																				"src": "7707:15:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2551,
																			"name": "IStrategy",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1972,
																			"src": "7697:9:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IStrategy_$1972_$",
																				"typeString": "type(contract IStrategy)"
																			}
																		},
																		"id": 2553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7697:26:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IStrategy_$1972",
																			"typeString": "contract IStrategy"
																		}
																	},
																	"id": 2554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "want",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1920,
																	"src": "7697:31:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																		"typeString": "function () view external returns (contract IERC20Upgradeable)"
																	}
																},
																"id": 2555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7697:33:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"src": "7687:43:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "446966666572656e742077616e74",
															"id": 2557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7732:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_84be5580ebe4458c333a4fbd253aad4689f1822f27fa0ce035cf3715b9d65a16",
																"typeString": "literal_string \"Different want\""
															},
															"value": "Different want"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_84be5580ebe4458c333a4fbd253aad4689f1822f27fa0ce035cf3715b9d65a16",
																"typeString": "literal_string \"Different want\""
															}
														],
														"id": 2548,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7679:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7679:70:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2559,
												"nodeType": "ExpressionStatement",
												"src": "7679:70:12"
											},
											{
												"expression": {
													"id": 2566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2560,
														"name": "stratCandidate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1999,
														"src": "7759:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
															"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2562,
																"name": "_implementation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2529,
																"src": "7808:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 2563,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "7839:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "7839:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2561,
															"name": "StratCandidate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "7776:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_StratCandidate_$1996_storage_ptr_$",
																"typeString": "type(struct PlexusVaultNative.StratCandidate storage pointer)"
															}
														},
														"id": 2565,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"implementation",
															"proposedTime"
														],
														"nodeType": "FunctionCall",
														"src": "7776:80:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StratCandidate_$1996_memory_ptr",
															"typeString": "struct PlexusVaultNative.StratCandidate memory"
														}
													},
													"src": "7759:97:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
														"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
													}
												},
												"id": 2567,
												"nodeType": "ExpressionStatement",
												"src": "7759:97:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2569,
															"name": "_implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2529,
															"src": "7890:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2568,
														"name": "NewStratCandidate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2008,
														"src": "7872:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7872:34:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2571,
												"nodeType": "EmitStatement",
												"src": "7867:39:12"
											}
										]
									},
									"documentation": {
										"id": 2527,
										"nodeType": "StructuredDocumentation",
										"src": "7340:153:12",
										"text": " @dev Sets the candidate for the new strat to use with this vault.\n @param _implementation The address of the candidate strategy."
									},
									"functionSelector": "5b12ff9b",
									"id": 2573,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2532,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2531,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "7552:9:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "7552:9:12"
										}
									],
									"name": "proposeStrat",
									"nameLocation": "7507:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "_implementation",
												"nameLocation": "7528:15:12",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "7520:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7520:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7519:25:12"
									},
									"returnParameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7562:0:12"
									},
									"scope": 2683,
									"src": "7498:415:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2636,
										"nodeType": "Block",
										"src": "8194:470:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2580,
																	"name": "stratCandidate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1999,
																	"src": "8212:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																		"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
																	}
																},
																"id": 2581,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "implementation",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1993,
																"src": "8212:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8253:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8245:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2582,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8245:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2585,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8245:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8212:43:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5468657265206973206e6f2063616e646964617465",
															"id": 2587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8257:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bd89e0da76576d0c02b1731f203bfb3440dbeacfaecd99d6f04131a27cd8ca1b",
																"typeString": "literal_string \"There is no candidate\""
															},
															"value": "There is no candidate"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bd89e0da76576d0c02b1731f203bfb3440dbeacfaecd99d6f04131a27cd8ca1b",
																"typeString": "literal_string \"There is no candidate\""
															}
														],
														"id": 2579,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8204:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8204:77:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2589,
												"nodeType": "ExpressionStatement",
												"src": "8204:77:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2594,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2591,
																		"name": "stratCandidate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1999,
																		"src": "8299:14:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																			"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
																		}
																	},
																	"id": 2592,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "proposedTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1995,
																	"src": "8299:27:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"id": 2593,
																	"name": "approvalDelay",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2004,
																	"src": "8329:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8299:43:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2595,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "8345:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 2596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "8345:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8299:61:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "44656c617920686173206e6f7420706173736564",
															"id": 2598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8362:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68d78fa197bf0b20149fd726ff33ff5aa05819c7985dd8bf3f524bc84a6e33c8",
																"typeString": "literal_string \"Delay has not passed\""
															},
															"value": "Delay has not passed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68d78fa197bf0b20149fd726ff33ff5aa05819c7985dd8bf3f524bc84a6e33c8",
																"typeString": "literal_string \"Delay has not passed\""
															}
														],
														"id": 2590,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8291:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8291:94:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2600,
												"nodeType": "ExpressionStatement",
												"src": "8291:94:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2602,
																"name": "stratCandidate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1999,
																"src": "8414:14:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																	"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
																}
															},
															"id": 2603,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "implementation",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1993,
															"src": "8414:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2601,
														"name": "UpgradeStrat",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2012,
														"src": "8401:12:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8401:43:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2605,
												"nodeType": "EmitStatement",
												"src": "8396:48:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2606,
															"name": "strategy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2002,
															"src": "8455:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IStrategy_$1972",
																"typeString": "contract IStrategy"
															}
														},
														"id": 2608,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "retireStrat",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1952,
														"src": "8455:20:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 2609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:22:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2610,
												"nodeType": "ExpressionStatement",
												"src": "8455:22:12"
											},
											{
												"expression": {
													"id": 2616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2611,
														"name": "strategy",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2002,
														"src": "8487:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IStrategy_$1972",
															"typeString": "contract IStrategy"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 2613,
																	"name": "stratCandidate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1999,
																	"src": "8508:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																		"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
																	}
																},
																"id": 2614,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "implementation",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1993,
																"src": "8508:29:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2612,
															"name": "IStrategy",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1972,
															"src": "8498:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IStrategy_$1972_$",
																"typeString": "type(contract IStrategy)"
															}
														},
														"id": 2615,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8498:40:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IStrategy_$1972",
															"typeString": "contract IStrategy"
														}
													},
													"src": "8487:51:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IStrategy_$1972",
														"typeString": "contract IStrategy"
													}
												},
												"id": 2617,
												"nodeType": "ExpressionStatement",
												"src": "8487:51:12"
											},
											{
												"expression": {
													"id": 2625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2618,
															"name": "stratCandidate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1999,
															"src": "8548:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
															}
														},
														"id": 2620,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "implementation",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1993,
														"src": "8548:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2623,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8588:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8580:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2621,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8580:7:12",
																"typeDescriptions": {}
															}
														},
														"id": 2624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8580:10:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8548:42:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2626,
												"nodeType": "ExpressionStatement",
												"src": "8548:42:12"
											},
											{
												"expression": {
													"id": 2631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2627,
															"name": "stratCandidate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1999,
															"src": "8600:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StratCandidate_$1996_storage",
																"typeString": "struct PlexusVaultNative.StratCandidate storage ref"
															}
														},
														"id": 2629,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "proposedTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1995,
														"src": "8600:27:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "35303030303030303030",
														"id": 2630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8630:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5000000000_by_1",
															"typeString": "int_const 5000000000"
														},
														"value": "5000000000"
													},
													"src": "8600:40:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2632,
												"nodeType": "ExpressionStatement",
												"src": "8600:40:12"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2633,
														"name": "earn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2314,
														"src": "8651:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8651:6:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2635,
												"nodeType": "ExpressionStatement",
												"src": "8651:6:12"
											}
										]
									},
									"documentation": {
										"id": 2574,
										"nodeType": "StructuredDocumentation",
										"src": "7919:228:12",
										"text": " @dev It switches the active strat for the strat candidate. After upgrading, the\n candidate implementation is set to the 0x00 address, and proposedTime to a time\n happening in +100 years for safety."
									},
									"functionSelector": "e6685244",
									"id": 2637,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2577,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2576,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "8184:9:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "8184:9:12"
										}
									],
									"name": "upgradeStrat",
									"nameLocation": "8162:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8174:2:12"
									},
									"returnParameters": {
										"id": 2578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8194:0:12"
									},
									"scope": 2683,
									"src": "8153:511:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2677,
										"nodeType": "Block",
										"src": "8872:207:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2646,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2640,
																"src": "8890:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2649,
																			"name": "want",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2060,
																			"src": "8908:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IERC20Upgradeable_$1077_$",
																				"typeString": "function () view returns (contract IERC20Upgradeable)"
																			}
																		},
																		"id": 2650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8908:6:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	],
																	"id": 2648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8900:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2647,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8900:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2651,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8900:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8890:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "21746f6b656e",
															"id": 2653,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8917:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6b08df48b67a8acda5828e85af8c62865fe7bd53995164d29920fdc8d1b5e5d9",
																"typeString": "literal_string \"!token\""
															},
															"value": "!token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6b08df48b67a8acda5828e85af8c62865fe7bd53995164d29920fdc8d1b5e5d9",
																"typeString": "literal_string \"!token\""
															}
														],
														"id": 2645,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8882:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8882:44:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2655,
												"nodeType": "ExpressionStatement",
												"src": "8882:44:12"
											},
											{
												"assignments": [
													2657
												],
												"declarations": [
													{
														"constant": false,
														"id": 2657,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "8945:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2677,
														"src": "8937:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2656,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8937:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2667,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2664,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8998:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_PlexusVaultNative_$2683",
																		"typeString": "contract PlexusVaultNative"
																	}
																],
																"id": 2663,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8990:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2662,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8990:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 2665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8990:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2659,
																	"name": "_token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2640,
																	"src": "8972:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2658,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1077,
																"src": "8954:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 2660,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8954:25:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2661,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1034,
														"src": "8954:35:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8954:50:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8937:67:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2672,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "9053:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2673,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "9053:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2674,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2657,
															"src": "9065:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2669,
																	"name": "_token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2640,
																	"src": "9032:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2668,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1077,
																"src": "9014:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$1077_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 2670,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9014:25:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$1077",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 2671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1171,
														"src": "9014:38:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1077_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1077_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 2675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9014:58:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2676,
												"nodeType": "ExpressionStatement",
												"src": "9014:58:12"
											}
										]
									},
									"documentation": {
										"id": 2638,
										"nodeType": "StructuredDocumentation",
										"src": "8670:132:12",
										"text": " @dev Rescues random funds stuck that the strat can't handle.\n @param _token address of the token to rescue."
									},
									"functionSelector": "def68a9c",
									"id": 2678,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2643,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2642,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "8862:9:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "8862:9:12"
										}
									],
									"name": "inCaseTokensGetStuck",
									"nameLocation": "8816:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2640,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "8845:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2678,
												"src": "8837:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2639,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8837:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8836:16:12"
									},
									"returnParameters": {
										"id": 2644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8872:0:12"
									},
									"scope": 2683,
									"src": "8807:272:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2681,
										"nodeType": "Block",
										"src": "9112:2:12",
										"statements": []
									},
									"id": 2682,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9092:2:12"
									},
									"returnParameters": {
										"id": 2680,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9112:0:12"
									},
									"scope": 2683,
									"src": "9085:29:12",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2684,
							"src": "735:8381:12",
							"usedErrors": []
						}
					],
					"src": "33:9084:12"
				},
				"id": 12
			}
		}
	}
}